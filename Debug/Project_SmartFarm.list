
Project_SmartFarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08009c40  08009c40  0000ac40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a060  0800a060  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a060  0800a060  0000b060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a068  0800a068  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a068  0800a068  0000b068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a06c  0800a06c  0000b06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a070  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  200001d4  0800a244  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0800a244  0000c580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158dd  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003505  00000000  00000000  00021ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00024fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e88  00000000  00000000  00026290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a54e  00000000  00000000  00027118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c2a  00000000  00000000  00041666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eb88  00000000  00000000  0005b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9e18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef0  00000000  00000000  000f9e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ffd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c24 	.word	0x08009c24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009c24 	.word	0x08009c24

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <lcdCommand>:
//핸들러 정의

extern I2C_HandleTypeDef hi2c1; //i2c.c 소스파일에 정의되어있음

void lcdCommand(uint8_t command)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  uint8_t high_nibble, low_nibble;
  uint8_t i2c_buffer[4];
  high_nibble = command & 0xf0;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f023 030f 	bic.w	r3, r3, #15
 8000eb8:	73fb      	strb	r3, [r7, #15]
  low_nibble = (command << 4) & 0xf0;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	73bb      	strb	r3, [r7, #14]
  i2c_buffer[0] = high_nibble | 0x04 | 0x08;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	f043 030c 	orr.w	r3, r3, #12
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	723b      	strb	r3, [r7, #8]
  i2c_buffer[1] = high_nibble | 0x00 | 0x08;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	727b      	strb	r3, [r7, #9]
  i2c_buffer[2] = low_nibble | 0x04 | 0x08;
 8000ed4:	7bbb      	ldrb	r3, [r7, #14]
 8000ed6:	f043 030c 	orr.w	r3, r3, #12
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	72bb      	strb	r3, [r7, #10]
  i2c_buffer[3] = low_nibble | 0x00 | 0x08;
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	72fb      	strb	r3, [r7, #11]
  while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer,
 8000ee8:	bf00      	nop
 8000eea:	f107 0208 	add.w	r2, r7, #8
 8000eee:	2364      	movs	r3, #100	@ 0x64
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	214e      	movs	r1, #78	@ 0x4e
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <lcdCommand+0x64>)
 8000ef8:	f002 ffb4 	bl	8003e64 <HAL_I2C_Master_Transmit>
 8000efc:	4603      	mov	r3, r0
                                4, 100) != HAL_OK);
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f3      	bne.n	8000eea <lcdCommand+0x42>
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000298 	.word	0x20000298

08000f10 <lcdData>:

//1byte write

void lcdData(uint8_t data)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  uint8_t high_nibble, low_nibble;
  uint8_t i2c_buffer[4];
  high_nibble = data & 0xf0;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f023 030f 	bic.w	r3, r3, #15
 8000f20:	73fb      	strb	r3, [r7, #15]
  low_nibble = (data << 4) & 0xf0;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	73bb      	strb	r3, [r7, #14]
  i2c_buffer[0] = high_nibble | 0x05 | 0x08;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	f043 030d 	orr.w	r3, r3, #13
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	723b      	strb	r3, [r7, #8]
  i2c_buffer[1] = high_nibble | 0x01 | 0x08;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	f043 0309 	orr.w	r3, r3, #9
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	727b      	strb	r3, [r7, #9]
  i2c_buffer[2] = low_nibble | 0x05 | 0x08;
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	f043 030d 	orr.w	r3, r3, #13
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	72bb      	strb	r3, [r7, #10]
  i2c_buffer[3] = low_nibble | 0x01 | 0x08;
 8000f46:	7bbb      	ldrb	r3, [r7, #14]
 8000f48:	f043 0309 	orr.w	r3, r3, #9
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	72fb      	strb	r3, [r7, #11]
  while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer,
 8000f50:	bf00      	nop
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	2364      	movs	r3, #100	@ 0x64
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	214e      	movs	r1, #78	@ 0x4e
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <lcdData+0x64>)
 8000f60:	f002 ff80 	bl	8003e64 <HAL_I2C_Master_Transmit>
 8000f64:	4603      	mov	r3, r0
                                4, 100) != HAL_OK);
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f3      	bne.n	8000f52 <lcdData+0x42>
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000298 	.word	0x20000298

08000f78 <lcdInit>:
void lcdInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8000f7c:	2032      	movs	r0, #50	@ 0x32
 8000f7e:	f001 fa23 	bl	80023c8 <HAL_Delay>
  lcdCommand(0x33);
 8000f82:	2033      	movs	r0, #51	@ 0x33
 8000f84:	f7ff ff90 	bl	8000ea8 <lcdCommand>
  HAL_Delay(5);
 8000f88:	2005      	movs	r0, #5
 8000f8a:	f001 fa1d 	bl	80023c8 <HAL_Delay>
  lcdCommand(0x32);
 8000f8e:	2032      	movs	r0, #50	@ 0x32
 8000f90:	f7ff ff8a 	bl	8000ea8 <lcdCommand>
  HAL_Delay(5);
 8000f94:	2005      	movs	r0, #5
 8000f96:	f001 fa17 	bl	80023c8 <HAL_Delay>
  lcdCommand(0x28);
 8000f9a:	2028      	movs	r0, #40	@ 0x28
 8000f9c:	f7ff ff84 	bl	8000ea8 <lcdCommand>
  HAL_Delay(5);
 8000fa0:	2005      	movs	r0, #5
 8000fa2:	f001 fa11 	bl	80023c8 <HAL_Delay>
  lcdCommand(DISPLAY_ON);
 8000fa6:	200c      	movs	r0, #12
 8000fa8:	f7ff ff7e 	bl	8000ea8 <lcdCommand>
  HAL_Delay(5);
 8000fac:	2005      	movs	r0, #5
 8000fae:	f001 fa0b 	bl	80023c8 <HAL_Delay>
  lcdCommand(0x06);
 8000fb2:	2006      	movs	r0, #6
 8000fb4:	f7ff ff78 	bl	8000ea8 <lcdCommand>
  HAL_Delay(5);
 8000fb8:	2005      	movs	r0, #5
 8000fba:	f001 fa05 	bl	80023c8 <HAL_Delay>
  lcdCommand(CLEAR_DISPLAY);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f7ff ff72 	bl	8000ea8 <lcdCommand>
  HAL_Delay(2);
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f001 f9ff 	bl	80023c8 <HAL_Delay>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <lcdString>:
void lcdString(char *str)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  while(*str)lcdData(*str++);
 8000fd6:	e006      	b.n	8000fe6 <lcdString+0x18>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff95 	bl	8000f10 <lcdData>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f4      	bne.n	8000fd8 <lcdString+0xa>
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <moveCursor>:

void moveCursor(uint8_t row, uint8_t col)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
  lcdCommand(0x80 | row<<6 | col);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	019b      	lsls	r3, r3, #6
 800100c:	b2da      	uxtb	r2, r3
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	4313      	orrs	r3, r2
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff44 	bl	8000ea8 <lcdCommand>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102e:	463b      	mov	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800103a:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <MX_ADC1_Init+0xb4>)
 800103c:	4a28      	ldr	r2, [pc, #160]	@ (80010e0 <MX_ADC1_Init+0xb8>)
 800103e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001040:	4b26      	ldr	r3, [pc, #152]	@ (80010dc <MX_ADC1_Init+0xb4>)
 8001042:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001046:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <MX_ADC1_Init+0xb4>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800104e:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <MX_ADC1_Init+0xb4>)
 8001050:	2201      	movs	r2, #1
 8001052:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001054:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <MX_ADC1_Init+0xb4>)
 8001056:	2201      	movs	r2, #1
 8001058:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105a:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <MX_ADC1_Init+0xb4>)
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001062:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <MX_ADC1_Init+0xb4>)
 8001064:	2200      	movs	r2, #0
 8001066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001068:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <MX_ADC1_Init+0xb4>)
 800106a:	4a1e      	ldr	r2, [pc, #120]	@ (80010e4 <MX_ADC1_Init+0xbc>)
 800106c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106e:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <MX_ADC1_Init+0xb4>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001074:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <MX_ADC1_Init+0xb4>)
 8001076:	2202      	movs	r2, #2
 8001078:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_ADC1_Init+0xb4>)
 800107c:	2201      	movs	r2, #1
 800107e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_ADC1_Init+0xb4>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001088:	4814      	ldr	r0, [pc, #80]	@ (80010dc <MX_ADC1_Init+0xb4>)
 800108a:	f001 f9c1 	bl	8002410 <HAL_ADC_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001094:	f000 fdb2 	bl	8001bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001098:	230f      	movs	r3, #15
 800109a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800109c:	2301      	movs	r3, #1
 800109e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80010a0:	2306      	movs	r3, #6
 80010a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <MX_ADC1_Init+0xb4>)
 80010aa:	f001 fc13 	bl	80028d4 <HAL_ADC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010b4:	f000 fda2 	bl	8001bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010b8:	2306      	movs	r3, #6
 80010ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010bc:	2302      	movs	r3, #2
 80010be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_ADC1_Init+0xb4>)
 80010c6:	f001 fc05 	bl	80028d4 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010d0:	f000 fd94 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200001f0 	.word	0x200001f0
 80010e0:	40012000 	.word	0x40012000
 80010e4:	0f000001 	.word	0x0f000001

080010e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a3f      	ldr	r2, [pc, #252]	@ (8001204 <HAL_ADC_MspInit+0x11c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d178      	bne.n	80011fc <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b3e      	ldr	r3, [pc, #248]	@ (8001208 <HAL_ADC_MspInit+0x120>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	4a3d      	ldr	r2, [pc, #244]	@ (8001208 <HAL_ADC_MspInit+0x120>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001118:	6453      	str	r3, [r2, #68]	@ 0x44
 800111a:	4b3b      	ldr	r3, [pc, #236]	@ (8001208 <HAL_ADC_MspInit+0x120>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b37      	ldr	r3, [pc, #220]	@ (8001208 <HAL_ADC_MspInit+0x120>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a36      	ldr	r2, [pc, #216]	@ (8001208 <HAL_ADC_MspInit+0x120>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b34      	ldr	r3, [pc, #208]	@ (8001208 <HAL_ADC_MspInit+0x120>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b30      	ldr	r3, [pc, #192]	@ (8001208 <HAL_ADC_MspInit+0x120>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a2f      	ldr	r2, [pc, #188]	@ (8001208 <HAL_ADC_MspInit+0x120>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b2d      	ldr	r3, [pc, #180]	@ (8001208 <HAL_ADC_MspInit+0x120>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = WaterLevel_Pin;
 800115e:	2340      	movs	r3, #64	@ 0x40
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001162:	2303      	movs	r3, #3
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WaterLevel_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4826      	ldr	r0, [pc, #152]	@ (800120c <HAL_ADC_MspInit+0x124>)
 8001172:	f002 fb7d 	bl	8003870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Photo_Pin;
 8001176:	2320      	movs	r3, #32
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117a:	2303      	movs	r3, #3
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Photo_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4821      	ldr	r0, [pc, #132]	@ (8001210 <HAL_ADC_MspInit+0x128>)
 800118a:	f002 fb71 	bl	8003870 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 8001190:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <HAL_ADC_MspInit+0x130>)
 8001192:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001194:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 80011a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 80011b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 80011b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011d0:	4810      	ldr	r0, [pc, #64]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 80011d2:	f001 ff4b 	bl	800306c <HAL_DMA_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80011dc:	f000 fd0e 	bl	8001bfc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 80011e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80011e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001214 <HAL_ADC_MspInit+0x12c>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	2012      	movs	r0, #18
 80011f2:	f001 ff04 	bl	8002ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011f6:	2012      	movs	r0, #18
 80011f8:	f001 ff1d 	bl	8003036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	@ 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40012000 	.word	0x40012000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020800 	.word	0x40020800
 8001214:	20000238 	.word	0x20000238
 8001218:	40026410 	.word	0x40026410

0800121c <delay_us>:
#include "delay_us.h"



void delay_us(uint16_t us)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim11, 0);
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <delay_us+0x30>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
    while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 800122e:	bf00      	nop
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <delay_us+0x30>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	429a      	cmp	r2, r3
 800123a:	d3f9      	bcc.n	8001230 <delay_us+0x14>
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200003a0 	.word	0x200003a0

08001250 <dht11Init>:
#include "dht.h"

void dht11Init(DHT11 *dht, GPIO_TypeDef *port, uint16_t pin)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	4613      	mov	r3, r2
 800125c:	80fb      	strh	r3, [r7, #6]
  dht->port = port;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	601a      	str	r2, [r3, #0]
  dht->pin = pin;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	88fa      	ldrh	r2, [r7, #6]
 8001268:	809a      	strh	r2, [r3, #4]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <dht11GpioMode>:

// DHT11 GPIO Mode 함수 설정
void dht11GpioMode(DHT11 *dht, uint8_t mode)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b088      	sub	sp, #32
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	70fb      	strb	r3, [r7, #3]
  GPIO_InitTypeDef GPIO_InitStruct = {0};  //GPIO 구조체 변수 선언 및 초기화
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]


  if(mode == OUTPUT)
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d111      	bne.n	80012bc <dht11GpioMode+0x46>
  {
    // 출력모드 설정
    GPIO_InitStruct.Pin = dht->pin;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	889b      	ldrh	r3, [r3, #4]
 800129c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a6:	2302      	movs	r3, #2
 80012a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f107 020c 	add.w	r2, r7, #12
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 fadb 	bl	8003870 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
  }
}
 80012ba:	e013      	b.n	80012e4 <dht11GpioMode+0x6e>
  else if(mode == INPUT)
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d110      	bne.n	80012e4 <dht11GpioMode+0x6e>
    GPIO_InitStruct.Pin = dht->pin;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	889b      	ldrh	r3, [r3, #4]
 80012c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f107 020c 	add.w	r2, r7, #12
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fac6 	bl	8003870 <HAL_GPIO_Init>
}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <dht11Read>:
uint8_t dht11Read(DHT11 *dht)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b090      	sub	sp, #64	@ 0x40
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  bool ret = true;    //  기본 반환값 설정
 80012f4:	2301      	movs	r3, #1
 80012f6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

  uint16_t timeTick = 0;     //시간 측정 변수 선언 및 초기화
 80012fa:	2300      	movs	r3, #0
 80012fc:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint8_t  pluse[40] = {0};  // 40비트 데이터를 저장...
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2224      	movs	r2, #36	@ 0x24
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f006 fc54 	bl	8007bb8 <memset>

  uint8_t humValue1 = 0, humValue2 = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001316:	2300      	movs	r3, #0
 8001318:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  uint8_t tempValue1 = 0, tempValue2 = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001322:	2300      	movs	r3, #0
 8001324:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  uint8_t parityValue = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

  // 타이머 시작
  HAL_TIM_Base_Start(&htim11);
 800132e:	48a3      	ldr	r0, [pc, #652]	@ (80015bc <dht11Read+0x2d0>)
 8001330:	f003 fdda 	bl	8004ee8 <HAL_TIM_Base_Start>

  // 통신 시작 신호 전송
  dht11GpioMode(dht, OUTPUT);       //GPIO를 출력으로 선언
 8001334:	2101      	movs	r1, #1
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff9d 	bl	8001276 <dht11GpioMode>
  HAL_GPIO_WritePin(dht->port, dht->pin, 0);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	889b      	ldrh	r3, [r3, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	4619      	mov	r1, r3
 8001348:	f002 fc2e 	bl	8003ba8 <HAL_GPIO_WritePin>
  HAL_Delay(20);                    // 적어도 18ms 이상 대기
 800134c:	2014      	movs	r0, #20
 800134e:	f001 f83b 	bl	80023c8 <HAL_Delay>
  HAL_GPIO_WritePin(dht->port, dht->pin, 1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	889b      	ldrh	r3, [r3, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	4619      	mov	r1, r3
 800135e:	f002 fc23 	bl	8003ba8 <HAL_GPIO_WritePin>
  delay_us(20);
 8001362:	2014      	movs	r0, #20
 8001364:	f7ff ff5a 	bl	800121c <delay_us>
  dht11GpioMode(dht, INPUT);        //INPUT 모드로 전환
 8001368:	2100      	movs	r1, #0
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff83 	bl	8001276 <dht11GpioMode>


  //  DHT11의 응답신호 대기
  __HAL_TIM_SET_COUNTER(&htim11, 0);
 8001370:	4b92      	ldr	r3, [pc, #584]	@ (80015bc <dht11Read+0x2d0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	@ 0x24
  while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET)
 8001378:	e008      	b.n	800138c <dht11Read+0xa0>
  {
    if(__HAL_TIM_GET_COUNTER(&htim11) > 100)
 800137a:	4b90      	ldr	r3, [pc, #576]	@ (80015bc <dht11Read+0x2d0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001380:	2b64      	cmp	r3, #100	@ 0x64
 8001382:	d903      	bls.n	800138c <dht11Read+0xa0>
    {
      printf("LOW Signal Time Out\n\r");
 8001384:	488e      	ldr	r0, [pc, #568]	@ (80015c0 <dht11Read+0x2d4>)
 8001386:	f006 faaf 	bl	80078e8 <iprintf>
      break;
 800138a:	e00a      	b.n	80013a2 <dht11Read+0xb6>
  while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f002 fbee 	bl	8003b78 <HAL_GPIO_ReadPin>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0eb      	beq.n	800137a <dht11Read+0x8e>
    }
  }
  __HAL_TIM_SET_COUNTER(&htim11, 0);
 80013a2:	4b86      	ldr	r3, [pc, #536]	@ (80015bc <dht11Read+0x2d0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
  while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 80013aa:	e008      	b.n	80013be <dht11Read+0xd2>
  {
    if(__HAL_TIM_GET_COUNTER(&htim11) > 120)
 80013ac:	4b83      	ldr	r3, [pc, #524]	@ (80015bc <dht11Read+0x2d0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	2b78      	cmp	r3, #120	@ 0x78
 80013b4:	d903      	bls.n	80013be <dht11Read+0xd2>
    {
      printf("HIGH Signal Time Out\n\r");
 80013b6:	4883      	ldr	r0, [pc, #524]	@ (80015c4 <dht11Read+0x2d8>)
 80013b8:	f006 fa96 	bl	80078e8 <iprintf>
      break;
 80013bc:	e00a      	b.n	80013d4 <dht11Read+0xe8>
  while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	889b      	ldrh	r3, [r3, #4]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f002 fbd5 	bl	8003b78 <HAL_GPIO_ReadPin>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d0eb      	beq.n	80013ac <dht11Read+0xc0>
    }
  }

  for(uint8_t i= 0; i <40; i++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80013da:	e03f      	b.n	800145c <dht11Read+0x170>
  {
    while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET);
 80013dc:	bf00      	nop
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	889b      	ldrh	r3, [r3, #4]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4610      	mov	r0, r2
 80013ea:	f002 fbc5 	bl	8003b78 <HAL_GPIO_ReadPin>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f4      	beq.n	80013de <dht11Read+0xf2>

    __HAL_TIM_SET_COUNTER(&htim11, 0);
 80013f4:	4b71      	ldr	r3, [pc, #452]	@ (80015bc <dht11Read+0x2d0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	@ 0x24
    while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 80013fc:	e01e      	b.n	800143c <dht11Read+0x150>
    {
      timeTick = __HAL_TIM_GET_COUNTER(&htim11);
 80013fe:	4b6f      	ldr	r3, [pc, #444]	@ (80015bc <dht11Read+0x2d0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001404:	867b      	strh	r3, [r7, #50]	@ 0x32

      //  신호 길이 판별
      if(timeTick > 20 && timeTick < 30)    // 26 ~ 28us -> '0'
 8001406:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001408:	2b14      	cmp	r3, #20
 800140a:	d90a      	bls.n	8001422 <dht11Read+0x136>
 800140c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800140e:	2b1d      	cmp	r3, #29
 8001410:	d807      	bhi.n	8001422 <dht11Read+0x136>
      {
        pluse[i] = 0;
 8001412:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001416:	3340      	adds	r3, #64	@ 0x40
 8001418:	443b      	add	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	f803 2c38 	strb.w	r2, [r3, #-56]
 8001420:	e00c      	b.n	800143c <dht11Read+0x150>
      }
      else if(timeTick > 65 && timeTick < 85)
 8001422:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001424:	2b41      	cmp	r3, #65	@ 0x41
 8001426:	d909      	bls.n	800143c <dht11Read+0x150>
 8001428:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800142a:	2b54      	cmp	r3, #84	@ 0x54
 800142c:	d806      	bhi.n	800143c <dht11Read+0x150>
      {
        pluse[i] = 1;
 800142e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001432:	3340      	adds	r3, #64	@ 0x40
 8001434:	443b      	add	r3, r7
 8001436:	2201      	movs	r2, #1
 8001438:	f803 2c38 	strb.w	r2, [r3, #-56]
    while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	889b      	ldrh	r3, [r3, #4]
 8001444:	4619      	mov	r1, r3
 8001446:	4610      	mov	r0, r2
 8001448:	f002 fb96 	bl	8003b78 <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b01      	cmp	r3, #1
 8001450:	d0d5      	beq.n	80013fe <dht11Read+0x112>
  for(uint8_t i= 0; i <40; i++)
 8001452:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001456:	3301      	adds	r3, #1
 8001458:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800145c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001460:	2b27      	cmp	r3, #39	@ 0x27
 8001462:	d9bb      	bls.n	80013dc <dht11Read+0xf0>
      }
    }
  }
  HAL_TIM_Base_Stop(&htim11);
 8001464:	4855      	ldr	r0, [pc, #340]	@ (80015bc <dht11Read+0x2d0>)
 8001466:	f003 fd99 	bl	8004f9c <HAL_TIM_Base_Stop>

  // 온습도 데이터 처리
  for(uint8_t i = 0; i < 8; i++) {humValue1 = (humValue1 << 1) + pluse[i];} // 습도 상위 8비트
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001470:	e011      	b.n	8001496 <dht11Read+0x1aa>
 8001472:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	b2da      	uxtb	r2, r3
 800147a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800147e:	3340      	adds	r3, #64	@ 0x40
 8001480:	443b      	add	r3, r7
 8001482:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001486:	4413      	add	r3, r2
 8001488:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800148c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001490:	3301      	adds	r3, #1
 8001492:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001496:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800149a:	2b07      	cmp	r3, #7
 800149c:	d9e9      	bls.n	8001472 <dht11Read+0x186>
  for(uint8_t i = 8; i < 16; i++) {humValue2 = (humValue2 << 1) + pluse[i];} // 습도 하위 8비트
 800149e:	2308      	movs	r3, #8
 80014a0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80014a4:	e011      	b.n	80014ca <dht11Read+0x1de>
 80014a6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80014b2:	3340      	adds	r3, #64	@ 0x40
 80014b4:	443b      	add	r3, r7
 80014b6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80014ba:	4413      	add	r3, r2
 80014bc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80014c0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80014c4:	3301      	adds	r3, #1
 80014c6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80014ca:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	d9e9      	bls.n	80014a6 <dht11Read+0x1ba>
  for(uint8_t i = 16; i < 24; i++) {tempValue1 = (tempValue1 << 1) + pluse[i];} // 온도 상위 8비트
 80014d2:	2310      	movs	r3, #16
 80014d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80014d8:	e011      	b.n	80014fe <dht11Read+0x212>
 80014da:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80014e6:	3340      	adds	r3, #64	@ 0x40
 80014e8:	443b      	add	r3, r7
 80014ea:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80014ee:	4413      	add	r3, r2
 80014f0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80014f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80014f8:	3301      	adds	r3, #1
 80014fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80014fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001502:	2b17      	cmp	r3, #23
 8001504:	d9e9      	bls.n	80014da <dht11Read+0x1ee>
  for(uint8_t i = 24; i < 32; i++) {tempValue2 = (tempValue2 << 1) + pluse[i];} // 온도 하위 8비트
 8001506:	2318      	movs	r3, #24
 8001508:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800150c:	e011      	b.n	8001532 <dht11Read+0x246>
 800150e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800151a:	3340      	adds	r3, #64	@ 0x40
 800151c:	443b      	add	r3, r7
 800151e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001522:	4413      	add	r3, r2
 8001524:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8001528:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800152c:	3301      	adds	r3, #1
 800152e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001532:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001536:	2b1f      	cmp	r3, #31
 8001538:	d9e9      	bls.n	800150e <dht11Read+0x222>
  for(uint8_t i = 32; i < 40; i++) {parityValue = (parityValue << 1) + pluse[i];}
 800153a:	2320      	movs	r3, #32
 800153c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001540:	e011      	b.n	8001566 <dht11Read+0x27a>
 8001542:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	b2da      	uxtb	r2, r3
 800154a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800154e:	3340      	adds	r3, #64	@ 0x40
 8001550:	443b      	add	r3, r7
 8001552:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001556:	4413      	add	r3, r2
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800155c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001560:	3301      	adds	r3, #1
 8001562:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001566:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800156a:	2b27      	cmp	r3, #39	@ 0x27
 800156c:	d9e9      	bls.n	8001542 <dht11Read+0x256>

  // 구조체에 온습도 값 저장
  dht->temperature = tempValue1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8001574:	719a      	strb	r2, [r3, #6]
  dht->humidity = humValue1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800157c:	71da      	strb	r2, [r3, #7]


  uint8_t checkSum = humValue1 + humValue2 + tempValue1 + tempValue2;
 800157e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001582:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001586:	4413      	add	r3, r2
 8001588:	b2da      	uxtb	r2, r3
 800158a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800158e:	4413      	add	r3, r2
 8001590:	b2da      	uxtb	r2, r3
 8001592:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001596:	4413      	add	r3, r2
 8001598:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  if(checkSum != parityValue)
 800159c:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80015a0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d002      	beq.n	80015ae <dht11Read+0x2c2>
  {
    printf("Checksum Error\r\n");
 80015a8:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <dht11Read+0x2dc>)
 80015aa:	f006 fa05 	bl	80079b8 <puts>





  return ret;
 80015ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3740      	adds	r7, #64	@ 0x40
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200003a0 	.word	0x200003a0
 80015c0:	08009c40 	.word	0x08009c40
 80015c4:	08009c58 	.word	0x08009c58
 80015c8:	08009c70 	.word	0x08009c70

080015cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_DMA_Init+0x3c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <MX_DMA_Init+0x3c>)
 80015dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_DMA_Init+0x3c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2038      	movs	r0, #56	@ 0x38
 80015f4:	f001 fd03 	bl	8002ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015f8:	2038      	movs	r0, #56	@ 0x38
 80015fa:	f001 fd1c 	bl	8003036 <HAL_NVIC_EnableIRQ>

}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b41      	ldr	r3, [pc, #260]	@ (800172c <MX_GPIO_Init+0x120>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a40      	ldr	r2, [pc, #256]	@ (800172c <MX_GPIO_Init+0x120>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <MX_GPIO_Init+0x120>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b3a      	ldr	r3, [pc, #232]	@ (800172c <MX_GPIO_Init+0x120>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a39      	ldr	r2, [pc, #228]	@ (800172c <MX_GPIO_Init+0x120>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b37      	ldr	r3, [pc, #220]	@ (800172c <MX_GPIO_Init+0x120>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b33      	ldr	r3, [pc, #204]	@ (800172c <MX_GPIO_Init+0x120>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a32      	ldr	r2, [pc, #200]	@ (800172c <MX_GPIO_Init+0x120>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b30      	ldr	r3, [pc, #192]	@ (800172c <MX_GPIO_Init+0x120>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <MX_GPIO_Init+0x120>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a2b      	ldr	r2, [pc, #172]	@ (800172c <MX_GPIO_Init+0x120>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <MX_GPIO_Init+0x120>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|Dht11_Pin|Pump_Pin
 8001692:	2200      	movs	r2, #0
 8001694:	f240 1153 	movw	r1, #339	@ 0x153
 8001698:	4825      	ldr	r0, [pc, #148]	@ (8001730 <MX_GPIO_Init+0x124>)
 800169a:	f002 fa85 	bl	8003ba8 <HAL_GPIO_WritePin>
                          |Pump2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2102      	movs	r1, #2
 80016a2:	4824      	ldr	r0, [pc, #144]	@ (8001734 <MX_GPIO_Init+0x128>)
 80016a4:	f002 fa80 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2101      	movs	r1, #1
 80016ac:	4822      	ldr	r0, [pc, #136]	@ (8001738 <MX_GPIO_Init+0x12c>)
 80016ae:	f002 fa7b 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin Pump_Pin Pump2_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|Pump_Pin|Pump2_Pin;
 80016b2:	f240 1343 	movw	r3, #323	@ 0x143
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	4819      	ldr	r0, [pc, #100]	@ (8001730 <MX_GPIO_Init+0x124>)
 80016cc:	f002 f8d0 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016d0:	2302      	movs	r3, #2
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4813      	ldr	r0, [pc, #76]	@ (8001734 <MX_GPIO_Init+0x128>)
 80016e8:	f002 f8c2 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dht11_Pin */
  GPIO_InitStruct.Pin = Dht11_Pin;
 80016ec:	2310      	movs	r3, #16
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f8:	2302      	movs	r3, #2
 80016fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Dht11_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	480b      	ldr	r0, [pc, #44]	@ (8001730 <MX_GPIO_Init+0x124>)
 8001704:	f002 f8b4 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8001708:	2301      	movs	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	2301      	movs	r3, #1
 800170e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	4806      	ldr	r0, [pc, #24]	@ (8001738 <MX_GPIO_Init+0x12c>)
 8001720:	f002 f8a6 	bl	8003870 <HAL_GPIO_Init>

}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	@ 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	40020800 	.word	0x40020800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400

0800173c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <MX_I2C1_Init+0x50>)
 8001742:	4a13      	ldr	r2, [pc, #76]	@ (8001790 <MX_I2C1_Init+0x54>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <MX_I2C1_Init+0x50>)
 8001748:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <MX_I2C1_Init+0x58>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_I2C1_Init+0x50>)
 800175a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800175e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	@ (800178c <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	@ (800178c <MX_I2C1_Init+0x50>)
 800177a:	f002 fa2f 	bl	8003bdc <HAL_I2C_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001784:	f000 fa3a 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000298 	.word	0x20000298
 8001790:	40005400 	.word	0x40005400
 8001794:	000186a0 	.word	0x000186a0

08001798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a19      	ldr	r2, [pc, #100]	@ (800181c <HAL_I2C_MspInit+0x84>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d12c      	bne.n	8001814 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a17      	ldr	r2, [pc, #92]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017dc:	2312      	movs	r3, #18
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e8:	2304      	movs	r3, #4
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	480c      	ldr	r0, [pc, #48]	@ (8001824 <HAL_I2C_MspInit+0x8c>)
 80017f4:	f002 f83c 	bl	8003870 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	4a07      	ldr	r2, [pc, #28]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 8001802:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001806:	6413      	str	r3, [r2, #64]	@ 0x40
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	@ 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40005400 	.word	0x40005400
 8001820:	40023800 	.word	0x40023800
 8001824:	40020400 	.word	0x40020400

08001828 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001830:	1d39      	adds	r1, r7, #4
 8001832:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001836:	2201      	movs	r2, #1
 8001838:	4803      	ldr	r0, [pc, #12]	@ (8001848 <__io_putchar+0x20>)
 800183a:	f004 fb35 	bl	8005ea8 <HAL_UART_Transmit>

  return ch;
 800183e:	687b      	ldr	r3, [r7, #4]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200003e8 	.word	0x200003e8

0800184c <updateLCD>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void updateLCD(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  lcdCommand(CLEAR_DISPLAY);
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff fb29 	bl	8000ea8 <lcdCommand>
  HAL_Delay(2);  // Clear 명령 후 잠시 대기
 8001856:	2002      	movs	r0, #2
 8001858:	f000 fdb6 	bl	80023c8 <HAL_Delay>

  // 첫 번째 줄: 온도와 습도
  sprintf(lcdBuffer, "T:%dC H:%d%%", dht.temperature, dht.humidity);
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <updateLCD+0x58>)
 800185e:	799b      	ldrb	r3, [r3, #6]
 8001860:	461a      	mov	r2, r3
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <updateLCD+0x58>)
 8001864:	79db      	ldrb	r3, [r3, #7]
 8001866:	4910      	ldr	r1, [pc, #64]	@ (80018a8 <updateLCD+0x5c>)
 8001868:	4810      	ldr	r0, [pc, #64]	@ (80018ac <updateLCD+0x60>)
 800186a:	f006 f8ad 	bl	80079c8 <siprintf>
  moveCursor(0, 0);
 800186e:	2100      	movs	r1, #0
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fbc1 	bl	8000ff8 <moveCursor>
  lcdString(lcdBuffer);
 8001876:	480d      	ldr	r0, [pc, #52]	@ (80018ac <updateLCD+0x60>)
 8001878:	f7ff fba9 	bl	8000fce <lcdString>
  HAL_Delay(1);
 800187c:	2001      	movs	r0, #1
 800187e:	f000 fda3 	bl	80023c8 <HAL_Delay>

  // 두 번째 줄: 조도값
  sprintf(lcdBuffer, "Light:%d", Light); // 값바꿔줌
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <updateLCD+0x64>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	b29b      	uxth	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	490a      	ldr	r1, [pc, #40]	@ (80018b4 <updateLCD+0x68>)
 800188c:	4807      	ldr	r0, [pc, #28]	@ (80018ac <updateLCD+0x60>)
 800188e:	f006 f89b 	bl	80079c8 <siprintf>
  moveCursor(1, 0);
 8001892:	2100      	movs	r1, #0
 8001894:	2001      	movs	r0, #1
 8001896:	f7ff fbaf 	bl	8000ff8 <moveCursor>
  lcdString(lcdBuffer);
 800189a:	4804      	ldr	r0, [pc, #16]	@ (80018ac <updateLCD+0x60>)
 800189c:	f7ff fb97 	bl	8000fce <lcdString>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200002ec 	.word	0x200002ec
 80018a8:	08009c80 	.word	0x08009c80
 80018ac:	200002f4 	.word	0x200002f4
 80018b0:	20000304 	.word	0x20000304
 80018b4:	08009c90 	.word	0x08009c90

080018b8 <DHT_Reset>:

void DHT_Reset(); // 온습도 사이클 조정
void DHT_Reset()
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  dht11GpioMode(&dht, OUTPUT);
 80018bc:	2101      	movs	r1, #1
 80018be:	4806      	ldr	r0, [pc, #24]	@ (80018d8 <DHT_Reset+0x20>)
 80018c0:	f7ff fcd9 	bl	8001276 <dht11GpioMode>
  HAL_GPIO_WritePin(dht.port, dht.pin, GPIO_PIN_SET);
 80018c4:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <DHT_Reset+0x20>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a03      	ldr	r2, [pc, #12]	@ (80018d8 <DHT_Reset+0x20>)
 80018ca:	8891      	ldrh	r1, [r2, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 f96a 	bl	8003ba8 <HAL_GPIO_WritePin>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200002ec 	.word	0x200002ec

080018dc <HAL_ADC_ConvCpltCallback>:

// ADC 변환 완료 콜백
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a05      	ldr	r2, [pc, #20]	@ (8001900 <HAL_ADC_ConvCpltCallback+0x24>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d102      	bne.n	80018f4 <HAL_ADC_ConvCpltCallback+0x18>
  {
    adcFlag = 1;  // ADC 변환 완료 플래그 설정
 80018ee:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <HAL_ADC_ConvCpltCallback+0x28>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
  }
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40012000 	.word	0x40012000
 8001904:	20000308 	.word	0x20000308

08001908 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a39      	ldr	r2, [pc, #228]	@ (80019fc <HAL_UART_RxCpltCallback+0xf4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d16c      	bne.n	80019f4 <HAL_UART_RxCpltCallback+0xec>
  {
    //HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
    //HAL_UART_Transmit_IT(&huart2, &rxData, sizeof(rxData));

    if(rxData == 'L')
 800191a:	4b39      	ldr	r3, [pc, #228]	@ (8001a00 <HAL_UART_RxCpltCallback+0xf8>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b4c      	cmp	r3, #76	@ 0x4c
 8001920:	d10e      	bne.n	8001940 <HAL_UART_RxCpltCallback+0x38>
    {
      HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
 8001922:	2201      	movs	r2, #1
 8001924:	2101      	movs	r1, #1
 8001926:	4837      	ldr	r0, [pc, #220]	@ (8001a04 <HAL_UART_RxCpltCallback+0xfc>)
 8001928:	f002 f93e 	bl	8003ba8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 800192c:	2201      	movs	r2, #1
 800192e:	2102      	movs	r1, #2
 8001930:	4834      	ldr	r0, [pc, #208]	@ (8001a04 <HAL_UART_RxCpltCallback+0xfc>)
 8001932:	f002 f939 	bl	8003ba8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 1);
 8001936:	2201      	movs	r2, #1
 8001938:	2101      	movs	r1, #1
 800193a:	4833      	ldr	r0, [pc, #204]	@ (8001a08 <HAL_UART_RxCpltCallback+0x100>)
 800193c:	f002 f934 	bl	8003ba8 <HAL_GPIO_WritePin>
    }

    if(rxData == 'l')
 8001940:	4b2f      	ldr	r3, [pc, #188]	@ (8001a00 <HAL_UART_RxCpltCallback+0xf8>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b6c      	cmp	r3, #108	@ 0x6c
 8001946:	d10e      	bne.n	8001966 <HAL_UART_RxCpltCallback+0x5e>
    {
      HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2101      	movs	r1, #1
 800194c:	482d      	ldr	r0, [pc, #180]	@ (8001a04 <HAL_UART_RxCpltCallback+0xfc>)
 800194e:	f002 f92b 	bl	8003ba8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2102      	movs	r1, #2
 8001956:	482b      	ldr	r0, [pc, #172]	@ (8001a04 <HAL_UART_RxCpltCallback+0xfc>)
 8001958:	f002 f926 	bl	8003ba8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2101      	movs	r1, #1
 8001960:	4829      	ldr	r0, [pc, #164]	@ (8001a08 <HAL_UART_RxCpltCallback+0x100>)
 8001962:	f002 f921 	bl	8003ba8 <HAL_GPIO_WritePin>
    }

    if(rxData == 'P')
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <HAL_UART_RxCpltCallback+0xf8>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b50      	cmp	r3, #80	@ 0x50
 800196c:	d10a      	bne.n	8001984 <HAL_UART_RxCpltCallback+0x7c>
    {
      HAL_GPIO_WritePin(Pump_GPIO_Port, Pump_Pin, 1);
 800196e:	2201      	movs	r2, #1
 8001970:	2140      	movs	r1, #64	@ 0x40
 8001972:	4824      	ldr	r0, [pc, #144]	@ (8001a04 <HAL_UART_RxCpltCallback+0xfc>)
 8001974:	f002 f918 	bl	8003ba8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Pump2_GPIO_Port, Pump2_Pin, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800197e:	4821      	ldr	r0, [pc, #132]	@ (8001a04 <HAL_UART_RxCpltCallback+0xfc>)
 8001980:	f002 f912 	bl	8003ba8 <HAL_GPIO_WritePin>
//      HAL_TIM_Base_Start_IT(&htim3);
    }

    if(rxData == 'p')
 8001984:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <HAL_UART_RxCpltCallback+0xf8>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b70      	cmp	r3, #112	@ 0x70
 800198a:	d10a      	bne.n	80019a2 <HAL_UART_RxCpltCallback+0x9a>
    {
//      __HAL_TIM_SET_COUNTER(&htim3, 0);
//      HAL_TIM_Base_Stop_IT(&htim3);
      HAL_GPIO_WritePin(Pump_GPIO_Port, Pump_Pin, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2140      	movs	r1, #64	@ 0x40
 8001990:	481c      	ldr	r0, [pc, #112]	@ (8001a04 <HAL_UART_RxCpltCallback+0xfc>)
 8001992:	f002 f909 	bl	8003ba8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Pump2_GPIO_Port, Pump2_Pin, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800199c:	4819      	ldr	r0, [pc, #100]	@ (8001a04 <HAL_UART_RxCpltCallback+0xfc>)
 800199e:	f002 f903 	bl	8003ba8 <HAL_GPIO_WritePin>
    }

    if(rxData == 'F')
 80019a2:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <HAL_UART_RxCpltCallback+0xf8>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b46      	cmp	r3, #70	@ 0x46
 80019a8:	d104      	bne.n	80019b4 <HAL_UART_RxCpltCallback+0xac>
    {
      TIM2->CCR1 = 65535;
 80019aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019b2:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if(rxData == 'f')
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_UART_RxCpltCallback+0xf8>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b66      	cmp	r3, #102	@ 0x66
 80019ba:	d103      	bne.n	80019c4 <HAL_UART_RxCpltCallback+0xbc>
    {
      TIM2->CCR1 = 0;
 80019bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019c0:	2200      	movs	r2, #0
 80019c2:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if(rxData == 'E')
 80019c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <HAL_UART_RxCpltCallback+0xf8>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b45      	cmp	r3, #69	@ 0x45
 80019ca:	d10e      	bne.n	80019ea <HAL_UART_RxCpltCallback+0xe2>
    {
      HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2101      	movs	r1, #1
 80019d0:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <HAL_UART_RxCpltCallback+0xfc>)
 80019d2:	f002 f8e9 	bl	8003ba8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2102      	movs	r1, #2
 80019da:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <HAL_UART_RxCpltCallback+0xfc>)
 80019dc:	f002 f8e4 	bl	8003ba8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2101      	movs	r1, #1
 80019e4:	4808      	ldr	r0, [pc, #32]	@ (8001a08 <HAL_UART_RxCpltCallback+0x100>)
 80019e6:	f002 f8df 	bl	8003ba8 <HAL_GPIO_WritePin>
    }

    HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 80019ea:	2201      	movs	r2, #1
 80019ec:	4904      	ldr	r1, [pc, #16]	@ (8001a00 <HAL_UART_RxCpltCallback+0xf8>)
 80019ee:	4807      	ldr	r0, [pc, #28]	@ (8001a0c <HAL_UART_RxCpltCallback+0x104>)
 80019f0:	f004 fae5 	bl	8005fbe <HAL_UART_Receive_IT>
  }
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40004400 	.word	0x40004400
 8001a00:	20000309 	.word	0x20000309
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	200003e8 	.word	0x200003e8

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a14:	f000 fc66 	bl	80022e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a18:	f000 f888 	bl	8001b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1c:	f7ff fdf6 	bl	800160c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a20:	f7ff fdd4 	bl	80015cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a24:	f000 fbba 	bl	800219c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001a28:	f7ff fafe 	bl	8001028 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001a2c:	f7ff fe86 	bl	800173c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001a30:	f000 fa42 	bl	8001eb8 <MX_TIM2_Init>
  MX_TIM11_Init();
 8001a34:	f000 fb04 	bl	8002040 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001a38:	f000 fab4 	bl	8001fa4 <MX_TIM3_Init>
    //  HAL_TIM_Base_Start(&htim11);
    //  HAL_Delay(100);  // 타이머 안정화 대기

    // LCD 초기화 전 충분한 대기시간
    //HAL_Delay(1000);
    lcdInit();
 8001a3c:	f7ff fa9c 	bl	8000f78 <lcdInit>
    HAL_Delay(200);
 8001a40:	20c8      	movs	r0, #200	@ 0xc8
 8001a42:	f000 fcc1 	bl	80023c8 <HAL_Delay>
    // LCD 초기화 후 충분히 대기

    // LCD 테스트
    lcdCommand(CLEAR_DISPLAY);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff fa2e 	bl	8000ea8 <lcdCommand>
    HAL_Delay(2);
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f000 fcbb 	bl	80023c8 <HAL_Delay>
    moveCursor(0, 0);
 8001a52:	2100      	movs	r1, #0
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff facf 	bl	8000ff8 <moveCursor>
    lcdString("System Start...");
 8001a5a:	482a      	ldr	r0, [pc, #168]	@ (8001b04 <main+0xf4>)
 8001a5c:	f7ff fab7 	bl	8000fce <lcdString>
    HAL_Delay(1000); // 딜레이 빼면 안됨..
 8001a60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a64:	f000 fcb0 	bl	80023c8 <HAL_Delay>

    // 온습도센서 Init , 초기화 및 GPIO 설정
    dht11Init(&dht, GPIOC, GPIO_PIN_4);
 8001a68:	2210      	movs	r2, #16
 8001a6a:	4927      	ldr	r1, [pc, #156]	@ (8001b08 <main+0xf8>)
 8001a6c:	4827      	ldr	r0, [pc, #156]	@ (8001b0c <main+0xfc>)
 8001a6e:	f7ff fbef 	bl	8001250 <dht11Init>

    // ADC로 저항값을 DMA로 받기위한 대기상태
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValue, 2);
 8001a72:	2202      	movs	r2, #2
 8001a74:	4926      	ldr	r1, [pc, #152]	@ (8001b10 <main+0x100>)
 8001a76:	4827      	ldr	r0, [pc, #156]	@ (8001b14 <main+0x104>)
 8001a78:	f000 fe1e 	bl	80026b8 <HAL_ADC_Start_DMA>
    //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcValue, 1);

    // 유아트 대기상태 ( 버튼 클릭시 유아트 필요 )
    HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4926      	ldr	r1, [pc, #152]	@ (8001b18 <main+0x108>)
 8001a80:	4826      	ldr	r0, [pc, #152]	@ (8001b1c <main+0x10c>)
 8001a82:	f004 fa9c 	bl	8005fbe <HAL_UART_Receive_IT>

    // TIM3 PWM 시작 (DC 팬 모터용)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a86:	2100      	movs	r1, #0
 8001a88:	4825      	ldr	r0, [pc, #148]	@ (8001b20 <main+0x110>)
 8001a8a:	f003 fb07 	bl	800509c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    dht11GpioMode(&dht, OUTPUT);
 8001a8e:	2101      	movs	r1, #1
 8001a90:	481e      	ldr	r0, [pc, #120]	@ (8001b0c <main+0xfc>)
 8001a92:	f7ff fbf0 	bl	8001276 <dht11GpioMode>
    HAL_GPIO_WritePin(dht.port, dht.pin, GPIO_PIN_SET);
 8001a96:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <main+0xfc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b0c <main+0xfc>)
 8001a9c:	8891      	ldrh	r1, [r2, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 f881 	bl	8003ba8 <HAL_GPIO_WritePin>
    HAL_Delay(1000); // DHT11 안정화 대기
 8001aa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aaa:	f000 fc8d 	bl	80023c8 <HAL_Delay>


    while (1)
    {
      // DHT11 데이터 읽기 시도
      if(dht11Read(&dht))
 8001aae:	4817      	ldr	r0, [pc, #92]	@ (8001b0c <main+0xfc>)
 8001ab0:	f7ff fc1c 	bl	80012ec <dht11Read>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d019      	beq.n	8001aee <main+0xde>
      {
        // UART로 온습도와 조도값 전송
        printf("%d, %d, %d\n",
               dht.temperature,
 8001aba:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <main+0xfc>)
 8001abc:	799b      	ldrb	r3, [r3, #6]
        printf("%d, %d, %d\n",
 8001abe:	4619      	mov	r1, r3
               dht.humidity,
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <main+0xfc>)
 8001ac2:	79db      	ldrb	r3, [r3, #7]
        printf("%d, %d, %d\n",
 8001ac4:	461a      	mov	r2, r3
               Light);
 8001ac6:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <main+0x100>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
        printf("%d, %d, %d\n",
 8001acc:	4815      	ldr	r0, [pc, #84]	@ (8001b24 <main+0x114>)
 8001ace:	f005 ff0b 	bl	80078e8 <iprintf>

        // LCD 업데이트
        updateLCD();
 8001ad2:	f7ff febb 	bl	800184c <updateLCD>
//          HAL_GPIO_WritePin(Pump_GPIO_Port, Pump_Pin, 1);
//          HAL_TIM_Base_Start_IT(&htim3);
//
//        }
        // 온습도 측정 포트설정 리셋
        DHT_Reset();
 8001ad6:	f7ff feef 	bl	80018b8 <DHT_Reset>
        HAL_Delay(2000);  // 2초 주기로 반복
 8001ada:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ade:	f000 fc73 	bl	80023c8 <HAL_Delay>
        // ADC로 저항값을 DMA로 '다시' 받기위한 대기상태
        HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValue, 2);
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	490a      	ldr	r1, [pc, #40]	@ (8001b10 <main+0x100>)
 8001ae6:	480b      	ldr	r0, [pc, #44]	@ (8001b14 <main+0x104>)
 8001ae8:	f000 fde6 	bl	80026b8 <HAL_ADC_Start_DMA>
 8001aec:	e7df      	b.n	8001aae <main+0x9e>
      }


      else
      {
        printf("DHT11 Read Failed\r\n");
 8001aee:	480e      	ldr	r0, [pc, #56]	@ (8001b28 <main+0x118>)
 8001af0:	f005 ff62 	bl	80079b8 <puts>
        // DHT11 리셋을 위한 처리
        DHT_Reset();
 8001af4:	f7ff fee0 	bl	80018b8 <DHT_Reset>
        HAL_Delay(1000);
 8001af8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001afc:	f000 fc64 	bl	80023c8 <HAL_Delay>
      if(dht11Read(&dht))
 8001b00:	e7d5      	b.n	8001aae <main+0x9e>
 8001b02:	bf00      	nop
 8001b04:	08009c9c 	.word	0x08009c9c
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	200002ec 	.word	0x200002ec
 8001b10:	20000304 	.word	0x20000304
 8001b14:	200001f0 	.word	0x200001f0
 8001b18:	20000309 	.word	0x20000309
 8001b1c:	200003e8 	.word	0x200003e8
 8001b20:	20000310 	.word	0x20000310
 8001b24:	08009cac 	.word	0x08009cac
 8001b28:	08009cb8 	.word	0x08009cb8

08001b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b094      	sub	sp, #80	@ 0x50
 8001b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b32:	f107 0320 	add.w	r3, r7, #32
 8001b36:	2230      	movs	r2, #48	@ 0x30
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f006 f83c 	bl	8007bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <SystemClock_Config+0xc8>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	4a26      	ldr	r2, [pc, #152]	@ (8001bf4 <SystemClock_Config+0xc8>)
 8001b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b60:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <SystemClock_Config+0xc8>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <SystemClock_Config+0xcc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a20      	ldr	r2, [pc, #128]	@ (8001bf8 <SystemClock_Config+0xcc>)
 8001b76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <SystemClock_Config+0xcc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b92:	2302      	movs	r3, #2
 8001b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ba0:	2364      	movs	r3, #100	@ 0x64
 8001ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bac:	f107 0320 	add.w	r3, r7, #32
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 fcb1 	bl	8004518 <HAL_RCC_OscConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bbc:	f000 f81e 	bl	8001bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2103      	movs	r1, #3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f002 ff13 	bl	8004a08 <HAL_RCC_ClockConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001be8:	f000 f808 	bl	8001bfc <Error_Handler>
  }
}
 8001bec:	bf00      	nop
 8001bee:	3750      	adds	r7, #80	@ 0x50
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000

08001bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c00:	b672      	cpsid	i
}
 8001c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <Error_Handler+0x8>

08001c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <HAL_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	4a0f      	ldr	r2, [pc, #60]	@ (8001c54 <HAL_MspInit+0x4c>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <HAL_MspInit+0x4c>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <HAL_MspInit+0x4c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	4a08      	ldr	r2, [pc, #32]	@ (8001c54 <HAL_MspInit+0x4c>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_MspInit+0x4c>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <NMI_Handler+0x4>

08001c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <MemManage_Handler+0x4>

08001c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cae:	f000 fb6b 	bl	8002388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <ADC_IRQHandler+0x10>)
 8001cbe:	f000 fbea 	bl	8002496 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200001f0 	.word	0x200001f0

08001ccc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <TIM3_IRQHandler+0x10>)
 8001cd2:	f003 fa93 	bl	80051fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000358 	.word	0x20000358

08001ce0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <USART2_IRQHandler+0x10>)
 8001ce6:	f004 f98f 	bl	8006008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200003e8 	.word	0x200003e8

08001cf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <DMA2_Stream0_IRQHandler+0x10>)
 8001cfa:	f001 fb4f 	bl	800339c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000238 	.word	0x20000238

08001d08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return 1;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_kill>:

int _kill(int pid, int sig)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d22:	f005 ff9b 	bl	8007c5c <__errno>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2216      	movs	r2, #22
 8001d2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_exit>:

void _exit (int status)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffe7 	bl	8001d18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d4a:	bf00      	nop
 8001d4c:	e7fd      	b.n	8001d4a <_exit+0x12>

08001d4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e00a      	b.n	8001d76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d60:	f3af 8000 	nop.w
 8001d64:	4601      	mov	r1, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	60ba      	str	r2, [r7, #8]
 8001d6c:	b2ca      	uxtb	r2, r1
 8001d6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3301      	adds	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	dbf0      	blt.n	8001d60 <_read+0x12>
  }

  return len;
 8001d7e:	687b      	ldr	r3, [r7, #4]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e009      	b.n	8001dae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	60ba      	str	r2, [r7, #8]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fd40 	bl	8001828 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	dbf1      	blt.n	8001d9a <_write+0x12>
  }
  return len;
 8001db6:	687b      	ldr	r3, [r7, #4]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_close>:

int _close(int file)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_isatty>:

int _isatty(int file)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e00:	2301      	movs	r3, #1
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b085      	sub	sp, #20
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e30:	4a14      	ldr	r2, [pc, #80]	@ (8001e84 <_sbrk+0x5c>)
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <_sbrk+0x60>)
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e3c:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <_sbrk+0x64>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <_sbrk+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d207      	bcs.n	8001e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e58:	f005 ff00 	bl	8007c5c <__errno>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	220c      	movs	r2, #12
 8001e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	e009      	b.n	8001e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6e:	4b07      	ldr	r3, [pc, #28]	@ (8001e8c <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <_sbrk+0x64>)
 8001e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20020000 	.word	0x20020000
 8001e88:	00000400 	.word	0x00000400
 8001e8c:	2000030c 	.word	0x2000030c
 8001e90:	20000580 	.word	0x20000580

08001e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <SystemInit+0x20>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9e:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <SystemInit+0x20>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08e      	sub	sp, #56	@ 0x38
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ebe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ecc:	f107 0320 	add.w	r3, r7, #32
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	615a      	str	r2, [r3, #20]
 8001ee6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001eea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001efc:	4b28      	ldr	r3, [pc, #160]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001efe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f04:	4b26      	ldr	r3, [pc, #152]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0a:	4b25      	ldr	r3, [pc, #148]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f10:	4823      	ldr	r0, [pc, #140]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001f12:	f002 ff99 	bl	8004e48 <HAL_TIM_Base_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f1c:	f7ff fe6e 	bl	8001bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	481c      	ldr	r0, [pc, #112]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001f2e:	f003 fb17 	bl	8005560 <HAL_TIM_ConfigClockSource>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f38:	f7ff fe60 	bl	8001bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f3c:	4818      	ldr	r0, [pc, #96]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001f3e:	f003 f854 	bl	8004fea <HAL_TIM_PWM_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f48:	f7ff fe58 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f54:	f107 0320 	add.w	r3, r7, #32
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4811      	ldr	r0, [pc, #68]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001f5c:	f003 fed2 	bl	8005d04 <HAL_TIMEx_MasterConfigSynchronization>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f66:	f7ff fe49 	bl	8001bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f6a:	2360      	movs	r3, #96	@ 0x60
 8001f6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001f82:	f003 fa2b 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f8c:	f7ff fe36 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f90:	4803      	ldr	r0, [pc, #12]	@ (8001fa0 <MX_TIM2_Init+0xe8>)
 8001f92:	f000 f8cb 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001f96:	bf00      	nop
 8001f98:	3738      	adds	r7, #56	@ 0x38
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000310 	.word	0x20000310

08001fa4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb8:	463b      	mov	r3, r7
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <MX_TIM3_Init+0x94>)
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800203c <MX_TIM3_Init+0x98>)
 8001fc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002038 <MX_TIM3_Init+0x94>)
 8001fc8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001fcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <MX_TIM3_Init+0x94>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001fd4:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <MX_TIM3_Init+0x94>)
 8001fd6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001fda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <MX_TIM3_Init+0x94>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <MX_TIM3_Init+0x94>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fe8:	4813      	ldr	r0, [pc, #76]	@ (8002038 <MX_TIM3_Init+0x94>)
 8001fea:	f002 ff2d 	bl	8004e48 <HAL_TIM_Base_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ff4:	f7ff fe02 	bl	8001bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	4619      	mov	r1, r3
 8002004:	480c      	ldr	r0, [pc, #48]	@ (8002038 <MX_TIM3_Init+0x94>)
 8002006:	f003 faab 	bl	8005560 <HAL_TIM_ConfigClockSource>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002010:	f7ff fdf4 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800201c:	463b      	mov	r3, r7
 800201e:	4619      	mov	r1, r3
 8002020:	4805      	ldr	r0, [pc, #20]	@ (8002038 <MX_TIM3_Init+0x94>)
 8002022:	f003 fe6f 	bl	8005d04 <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800202c:	f7ff fde6 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000358 	.word	0x20000358
 800203c:	40000400 	.word	0x40000400

08002040 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002044:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <MX_TIM11_Init+0x40>)
 8002046:	4a0f      	ldr	r2, [pc, #60]	@ (8002084 <MX_TIM11_Init+0x44>)
 8002048:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 800204a:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <MX_TIM11_Init+0x40>)
 800204c:	2263      	movs	r2, #99	@ 0x63
 800204e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <MX_TIM11_Init+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <MX_TIM11_Init+0x40>)
 8002058:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800205c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <MX_TIM11_Init+0x40>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <MX_TIM11_Init+0x40>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	@ (8002080 <MX_TIM11_Init+0x40>)
 800206c:	f002 feec 	bl	8004e48 <HAL_TIM_Base_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002076:	f7ff fdc1 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200003a0 	.word	0x200003a0
 8002084:	40014800 	.word	0x40014800

08002088 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002098:	d10e      	bne.n	80020b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_TIM_Base_MspInit+0x98>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002120 <HAL_TIM_Base_MspInit+0x98>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_TIM_Base_MspInit+0x98>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80020b6:	e02e      	b.n	8002116 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a19      	ldr	r2, [pc, #100]	@ (8002124 <HAL_TIM_Base_MspInit+0x9c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d116      	bne.n	80020f0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <HAL_TIM_Base_MspInit+0x98>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	4a15      	ldr	r2, [pc, #84]	@ (8002120 <HAL_TIM_Base_MspInit+0x98>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d2:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <HAL_TIM_Base_MspInit+0x98>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 14, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	210e      	movs	r1, #14
 80020e2:	201d      	movs	r0, #29
 80020e4:	f000 ff8b 	bl	8002ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020e8:	201d      	movs	r0, #29
 80020ea:	f000 ffa4 	bl	8003036 <HAL_NVIC_EnableIRQ>
}
 80020ee:	e012      	b.n	8002116 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM11)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002128 <HAL_TIM_Base_MspInit+0xa0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10d      	bne.n	8002116 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <HAL_TIM_Base_MspInit+0x98>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	4a07      	ldr	r2, [pc, #28]	@ (8002120 <HAL_TIM_Base_MspInit+0x98>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002108:	6453      	str	r3, [r2, #68]	@ 0x44
 800210a:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <HAL_TIM_Base_MspInit+0x98>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40000400 	.word	0x40000400
 8002128:	40014800 	.word	0x40014800

0800212c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214c:	d11d      	bne.n	800218a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <HAL_TIM_MspPostInit+0x68>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	4a0f      	ldr	r2, [pc, #60]	@ (8002194 <HAL_TIM_MspPostInit+0x68>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <HAL_TIM_MspPostInit+0x68>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Fan_Pin;
 800216a:	2320      	movs	r3, #32
 800216c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002176:	2302      	movs	r3, #2
 8002178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800217a:	2301      	movs	r3, #1
 800217c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Fan_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 030c 	add.w	r3, r7, #12
 8002182:	4619      	mov	r1, r3
 8002184:	4804      	ldr	r0, [pc, #16]	@ (8002198 <HAL_TIM_MspPostInit+0x6c>)
 8002186:	f001 fb73 	bl	8003870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	40020000 	.word	0x40020000

0800219c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021a0:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	@ (80021ec <MX_USART2_UART_Init+0x50>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021a6:	4b10      	ldr	r3, [pc, #64]	@ (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021c0:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	@ (80021e8 <MX_USART2_UART_Init+0x4c>)
 80021d4:	f003 fe18 	bl	8005e08 <HAL_UART_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021de:	f7ff fd0d 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200003e8 	.word	0x200003e8
 80021ec:	40004400 	.word	0x40004400

080021f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	@ 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1d      	ldr	r2, [pc, #116]	@ (8002284 <HAL_UART_MspInit+0x94>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d133      	bne.n	800227a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <HAL_UART_MspInit+0x98>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	4a1b      	ldr	r2, [pc, #108]	@ (8002288 <HAL_UART_MspInit+0x98>)
 800221c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002220:	6413      	str	r3, [r2, #64]	@ 0x40
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_UART_MspInit+0x98>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <HAL_UART_MspInit+0x98>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a14      	ldr	r2, [pc, #80]	@ (8002288 <HAL_UART_MspInit+0x98>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_UART_MspInit+0x98>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800224a:	230c      	movs	r3, #12
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800225a:	2307      	movs	r3, #7
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4809      	ldr	r0, [pc, #36]	@ (800228c <HAL_UART_MspInit+0x9c>)
 8002266:	f001 fb03 	bl	8003870 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	2026      	movs	r0, #38	@ 0x26
 8002270:	f000 fec5 	bl	8002ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002274:	2026      	movs	r0, #38	@ 0x26
 8002276:	f000 fede 	bl	8003036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	@ 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40004400 	.word	0x40004400
 8002288:	40023800 	.word	0x40023800
 800228c:	40020000 	.word	0x40020000

08002290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002290:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002294:	f7ff fdfe 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002298:	480c      	ldr	r0, [pc, #48]	@ (80022cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800229a:	490d      	ldr	r1, [pc, #52]	@ (80022d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800229c:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a0:	e002      	b.n	80022a8 <LoopCopyDataInit>

080022a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a6:	3304      	adds	r3, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ac:	d3f9      	bcc.n	80022a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ae:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022b0:	4c0a      	ldr	r4, [pc, #40]	@ (80022dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b4:	e001      	b.n	80022ba <LoopFillZerobss>

080022b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b8:	3204      	adds	r2, #4

080022ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022bc:	d3fb      	bcc.n	80022b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022be:	f005 fcd3 	bl	8007c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c2:	f7ff fba5 	bl	8001a10 <main>
  bx  lr    
 80022c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80022d4:	0800a070 	.word	0x0800a070
  ldr r2, =_sbss
 80022d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80022dc:	20000580 	.word	0x20000580

080022e0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <DMA1_Stream0_IRQHandler>
	...

080022e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <HAL_Init+0x40>)
 80022ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002324 <HAL_Init+0x40>)
 80022fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a07      	ldr	r2, [pc, #28]	@ (8002324 <HAL_Init+0x40>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230c:	2003      	movs	r0, #3
 800230e:	f000 fe6b 	bl	8002fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002312:	200f      	movs	r0, #15
 8002314:	f000 f808 	bl	8002328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002318:	f7ff fc76 	bl	8001c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023c00 	.word	0x40023c00

08002328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002330:	4b12      	ldr	r3, [pc, #72]	@ (800237c <HAL_InitTick+0x54>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b12      	ldr	r3, [pc, #72]	@ (8002380 <HAL_InitTick+0x58>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800233e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fe83 	bl	8003052 <HAL_SYSTICK_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e00e      	b.n	8002374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b0f      	cmp	r3, #15
 800235a:	d80a      	bhi.n	8002372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800235c:	2200      	movs	r2, #0
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f000 fe4b 	bl	8002ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002368:	4a06      	ldr	r2, [pc, #24]	@ (8002384 <HAL_InitTick+0x5c>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000000 	.word	0x20000000
 8002380:	20000008 	.word	0x20000008
 8002384:	20000004 	.word	0x20000004

08002388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_IncTick+0x20>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_IncTick+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	@ (80023ac <HAL_IncTick+0x24>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000430 	.word	0x20000430

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000430 	.word	0x20000430

080023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff ffee 	bl	80023b0 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d005      	beq.n	80023ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e2:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <HAL_Delay+0x44>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ee:	bf00      	nop
 80023f0:	f7ff ffde 	bl	80023b0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d8f7      	bhi.n	80023f0 <HAL_Delay+0x28>
  {
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000008 	.word	0x20000008

08002410 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e033      	b.n	800248e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fe5a 	bl	80010e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	d118      	bne.n	8002480 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002456:	f023 0302 	bic.w	r3, r3, #2
 800245a:	f043 0202 	orr.w	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fb68 	bl	8002b38 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	f023 0303 	bic.w	r3, r3, #3
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	@ 0x40
 800247e:	e001      	b.n	8002484 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d049      	beq.n	8002560 <HAL_ADC_IRQHandler+0xca>
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d046      	beq.n	8002560 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d105      	bne.n	80024ea <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d12b      	bne.n	8002550 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d127      	bne.n	8002550 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002506:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002518:	2b00      	cmp	r3, #0
 800251a:	d119      	bne.n	8002550 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0220 	bic.w	r2, r2, #32
 800252a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d105      	bne.n	8002550 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff f9c3 	bl	80018dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f06f 0212 	mvn.w	r2, #18
 800255e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d057      	beq.n	8002626 <HAL_ADC_IRQHandler+0x190>
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d054      	beq.n	8002626 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d139      	bne.n	8002616 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d12b      	bne.n	8002616 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d124      	bne.n	8002616 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d11d      	bne.n	8002616 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d119      	bne.n	8002616 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025f0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fc0c 	bl	8002e34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 020c 	mvn.w	r2, #12
 8002624:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002634:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d017      	beq.n	800266c <HAL_ADC_IRQHandler+0x1d6>
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d014      	beq.n	800266c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10d      	bne.n	800266c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f925 	bl	80028ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f06f 0201 	mvn.w	r2, #1
 800266a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800267a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d015      	beq.n	80026ae <HAL_ADC_IRQHandler+0x218>
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d012      	beq.n	80026ae <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0220 	mvn.w	r2, #32
 800269c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f90e 	bl	80028c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0220 	mvn.w	r2, #32
 80026ac:	601a      	str	r2, [r3, #0]
  }
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Start_DMA+0x1e>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e0ce      	b.n	8002874 <HAL_ADC_Start_DMA+0x1bc>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d018      	beq.n	800271e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026fc:	4b5f      	ldr	r3, [pc, #380]	@ (800287c <HAL_ADC_Start_DMA+0x1c4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a5f      	ldr	r2, [pc, #380]	@ (8002880 <HAL_ADC_Start_DMA+0x1c8>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0c9a      	lsrs	r2, r3, #18
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002710:	e002      	b.n	8002718 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	3b01      	subs	r3, #1
 8002716:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f9      	bne.n	8002712 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800272c:	d107      	bne.n	800273e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800273c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	f040 8086 	bne.w	800285a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002756:	f023 0301 	bic.w	r3, r3, #1
 800275a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002778:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800278c:	d106      	bne.n	800279c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	f023 0206 	bic.w	r2, r3, #6
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	645a      	str	r2, [r3, #68]	@ 0x44
 800279a:	e002      	b.n	80027a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027aa:	4b36      	ldr	r3, [pc, #216]	@ (8002884 <HAL_ADC_Start_DMA+0x1cc>)
 80027ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b2:	4a35      	ldr	r2, [pc, #212]	@ (8002888 <HAL_ADC_Start_DMA+0x1d0>)
 80027b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ba:	4a34      	ldr	r2, [pc, #208]	@ (800288c <HAL_ADC_Start_DMA+0x1d4>)
 80027bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c2:	4a33      	ldr	r2, [pc, #204]	@ (8002890 <HAL_ADC_Start_DMA+0x1d8>)
 80027c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80027de:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ee:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	334c      	adds	r3, #76	@ 0x4c
 80027fa:	4619      	mov	r1, r3
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f000 fce2 	bl	80031c8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10f      	bne.n	8002830 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d129      	bne.n	8002872 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	e020      	b.n	8002872 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a17      	ldr	r2, [pc, #92]	@ (8002894 <HAL_ADC_Start_DMA+0x1dc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d11b      	bne.n	8002872 <HAL_ADC_Start_DMA+0x1ba>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d114      	bne.n	8002872 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e00b      	b.n	8002872 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f043 0210 	orr.w	r2, r3, #16
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000000 	.word	0x20000000
 8002880:	431bde83 	.word	0x431bde83
 8002884:	40012300 	.word	0x40012300
 8002888:	08002d31 	.word	0x08002d31
 800288c:	08002deb 	.word	0x08002deb
 8002890:	08002e07 	.word	0x08002e07
 8002894:	40012000 	.word	0x40012000

08002898 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x1c>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e113      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x244>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b09      	cmp	r3, #9
 80028fe:	d925      	bls.n	800294c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68d9      	ldr	r1, [r3, #12]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	3b1e      	subs	r3, #30
 8002916:	2207      	movs	r2, #7
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43da      	mvns	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	400a      	ands	r2, r1
 8002924:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68d9      	ldr	r1, [r3, #12]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	4618      	mov	r0, r3
 8002938:	4603      	mov	r3, r0
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4403      	add	r3, r0
 800293e:	3b1e      	subs	r3, #30
 8002940:	409a      	lsls	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	e022      	b.n	8002992 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6919      	ldr	r1, [r3, #16]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	2207      	movs	r2, #7
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	400a      	ands	r2, r1
 800296e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6919      	ldr	r1, [r3, #16]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	4618      	mov	r0, r3
 8002982:	4603      	mov	r3, r0
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4403      	add	r3, r0
 8002988:	409a      	lsls	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b06      	cmp	r3, #6
 8002998:	d824      	bhi.n	80029e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	3b05      	subs	r3, #5
 80029ac:	221f      	movs	r2, #31
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	400a      	ands	r2, r1
 80029ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	4618      	mov	r0, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3b05      	subs	r3, #5
 80029d6:	fa00 f203 	lsl.w	r2, r0, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80029e2:	e04c      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	d824      	bhi.n	8002a36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	3b23      	subs	r3, #35	@ 0x23
 80029fe:	221f      	movs	r2, #31
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43da      	mvns	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	400a      	ands	r2, r1
 8002a0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	3b23      	subs	r3, #35	@ 0x23
 8002a28:	fa00 f203 	lsl.w	r2, r0, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a34:	e023      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	3b41      	subs	r3, #65	@ 0x41
 8002a48:	221f      	movs	r2, #31
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	400a      	ands	r2, r1
 8002a56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	4618      	mov	r0, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b41      	subs	r3, #65	@ 0x41
 8002a72:	fa00 f203 	lsl.w	r2, r0, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a7e:	4b29      	ldr	r3, [pc, #164]	@ (8002b24 <HAL_ADC_ConfigChannel+0x250>)
 8002a80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a28      	ldr	r2, [pc, #160]	@ (8002b28 <HAL_ADC_ConfigChannel+0x254>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d10f      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1d8>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b12      	cmp	r3, #18
 8002a92:	d10b      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b28 <HAL_ADC_ConfigChannel+0x254>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d12b      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x23a>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1c      	ldr	r2, [pc, #112]	@ (8002b2c <HAL_ADC_ConfigChannel+0x258>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d003      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b11      	cmp	r3, #17
 8002ac6:	d122      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a11      	ldr	r2, [pc, #68]	@ (8002b2c <HAL_ADC_ConfigChannel+0x258>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d111      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aea:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <HAL_ADC_ConfigChannel+0x25c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a11      	ldr	r2, [pc, #68]	@ (8002b34 <HAL_ADC_ConfigChannel+0x260>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	0c9a      	lsrs	r2, r3, #18
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b00:	e002      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f9      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40012300 	.word	0x40012300
 8002b28:	40012000 	.word	0x40012000
 8002b2c:	10000012 	.word	0x10000012
 8002b30:	20000000 	.word	0x20000000
 8002b34:	431bde83 	.word	0x431bde83

08002b38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b40:	4b79      	ldr	r3, [pc, #484]	@ (8002d28 <ADC_Init+0x1f0>)
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	021a      	lsls	r2, r3, #8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	4a58      	ldr	r2, [pc, #352]	@ (8002d2c <ADC_Init+0x1f4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d022      	beq.n	8002c16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6899      	ldr	r1, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6899      	ldr	r1, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	e00f      	b.n	8002c36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c34:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0202 	bic.w	r2, r2, #2
 8002c44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6899      	ldr	r1, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7e1b      	ldrb	r3, [r3, #24]
 8002c50:	005a      	lsls	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01b      	beq.n	8002c9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c72:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	035a      	lsls	r2, r3, #13
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	e007      	b.n	8002cac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002caa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	051a      	lsls	r2, r3, #20
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6899      	ldr	r1, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cee:	025a      	lsls	r2, r3, #9
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6899      	ldr	r1, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	029a      	lsls	r2, r3, #10
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	609a      	str	r2, [r3, #8]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40012300 	.word	0x40012300
 8002d2c:	0f000001 	.word	0x0f000001

08002d30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d13c      	bne.n	8002dc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d12b      	bne.n	8002dbc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d127      	bne.n	8002dbc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d72:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d119      	bne.n	8002dbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0220 	bic.w	r2, r2, #32
 8002d96:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f7fe fd8d 	bl	80018dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dc2:	e00e      	b.n	8002de2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff fd75 	bl	80028c0 <HAL_ADC_ErrorCallback>
}
 8002dd6:	e004      	b.n	8002de2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff fd4d 	bl	8002898 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e12:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2240      	movs	r2, #64	@ 0x40
 8002e18:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff fd4a 	bl	80028c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e58:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e64:	4013      	ands	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e7a:	4a04      	ldr	r2, [pc, #16]	@ (8002e8c <__NVIC_SetPriorityGrouping+0x44>)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	60d3      	str	r3, [r2, #12]
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e94:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	f003 0307 	and.w	r3, r3, #7
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	db0b      	blt.n	8002ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	f003 021f 	and.w	r2, r3, #31
 8002ec4:	4907      	ldr	r1, [pc, #28]	@ (8002ee4 <__NVIC_EnableIRQ+0x38>)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2001      	movs	r0, #1
 8002ece:	fa00 f202 	lsl.w	r2, r0, r2
 8002ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	e000e100 	.word	0xe000e100

08002ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	6039      	str	r1, [r7, #0]
 8002ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	db0a      	blt.n	8002f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	490c      	ldr	r1, [pc, #48]	@ (8002f34 <__NVIC_SetPriority+0x4c>)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	0112      	lsls	r2, r2, #4
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f10:	e00a      	b.n	8002f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	4908      	ldr	r1, [pc, #32]	@ (8002f38 <__NVIC_SetPriority+0x50>)
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	3b04      	subs	r3, #4
 8002f20:	0112      	lsls	r2, r2, #4
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	440b      	add	r3, r1
 8002f26:	761a      	strb	r2, [r3, #24]
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	e000e100 	.word	0xe000e100
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	@ 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f1c3 0307 	rsb	r3, r3, #7
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	bf28      	it	cs
 8002f5a:	2304      	movcs	r3, #4
 8002f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3304      	adds	r3, #4
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d902      	bls.n	8002f6c <NVIC_EncodePriority+0x30>
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3b03      	subs	r3, #3
 8002f6a:	e000      	b.n	8002f6e <NVIC_EncodePriority+0x32>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f70:	f04f 32ff 	mov.w	r2, #4294967295
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	401a      	ands	r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f84:	f04f 31ff 	mov.w	r1, #4294967295
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	43d9      	mvns	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	4313      	orrs	r3, r2
         );
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3724      	adds	r7, #36	@ 0x24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fb4:	d301      	bcc.n	8002fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e00f      	b.n	8002fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fba:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <SysTick_Config+0x40>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc2:	210f      	movs	r1, #15
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc8:	f7ff ff8e 	bl	8002ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fcc:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <SysTick_Config+0x40>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd2:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <SysTick_Config+0x40>)
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	e000e010 	.word	0xe000e010

08002fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff29 	bl	8002e48 <__NVIC_SetPriorityGrouping>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b086      	sub	sp, #24
 8003002:	af00      	add	r7, sp, #0
 8003004:	4603      	mov	r3, r0
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003010:	f7ff ff3e 	bl	8002e90 <__NVIC_GetPriorityGrouping>
 8003014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	6978      	ldr	r0, [r7, #20]
 800301c:	f7ff ff8e 	bl	8002f3c <NVIC_EncodePriority>
 8003020:	4602      	mov	r2, r0
 8003022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff5d 	bl	8002ee8 <__NVIC_SetPriority>
}
 800302e:	bf00      	nop
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	4603      	mov	r3, r0
 800303e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ff31 	bl	8002eac <__NVIC_EnableIRQ>
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff ffa2 	bl	8002fa4 <SysTick_Config>
 8003060:	4603      	mov	r3, r0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003078:	f7ff f99a 	bl	80023b0 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e099      	b.n	80031bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a8:	e00f      	b.n	80030ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030aa:	f7ff f981 	bl	80023b0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	d908      	bls.n	80030ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2203      	movs	r2, #3
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e078      	b.n	80031bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e8      	bne.n	80030aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4b38      	ldr	r3, [pc, #224]	@ (80031c4 <HAL_DMA_Init+0x158>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003102:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	2b04      	cmp	r3, #4
 8003122:	d107      	bne.n	8003134 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312c:	4313      	orrs	r3, r2
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f023 0307 	bic.w	r3, r3, #7
 800314a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	2b04      	cmp	r3, #4
 800315c:	d117      	bne.n	800318e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00e      	beq.n	800318e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fb01 	bl	8003778 <DMA_CheckFifoParam>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2240      	movs	r2, #64	@ 0x40
 8003180:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800318a:	2301      	movs	r3, #1
 800318c:	e016      	b.n	80031bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fab8 	bl	800370c <DMA_CalcBaseAndBitshift>
 800319c:	4603      	mov	r3, r0
 800319e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	223f      	movs	r2, #63	@ 0x3f
 80031a6:	409a      	lsls	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	f010803f 	.word	0xf010803f

080031c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_DMA_Start_IT+0x26>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e040      	b.n	8003270 <HAL_DMA_Start_IT+0xa8>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d12f      	bne.n	8003262 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fa4a 	bl	80036b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	223f      	movs	r2, #63	@ 0x3f
 8003222:	409a      	lsls	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0216 	orr.w	r2, r2, #22
 8003236:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0208 	orr.w	r2, r2, #8
 800324e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e005      	b.n	800326e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800326a:	2302      	movs	r3, #2
 800326c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800326e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003286:	f7ff f893 	bl	80023b0 <HAL_GetTick>
 800328a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d008      	beq.n	80032aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2280      	movs	r2, #128	@ 0x80
 800329c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e052      	b.n	8003350 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0216 	bic.w	r2, r2, #22
 80032b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <HAL_DMA_Abort+0x62>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0208 	bic.w	r2, r2, #8
 80032e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fa:	e013      	b.n	8003324 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032fc:	f7ff f858 	bl	80023b0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b05      	cmp	r3, #5
 8003308:	d90c      	bls.n	8003324 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2203      	movs	r2, #3
 8003314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e015      	b.n	8003350 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e4      	bne.n	80032fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003336:	223f      	movs	r2, #63	@ 0x3f
 8003338:	409a      	lsls	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d004      	beq.n	8003376 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2280      	movs	r2, #128	@ 0x80
 8003370:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e00c      	b.n	8003390 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2205      	movs	r2, #5
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033a8:	4b8e      	ldr	r3, [pc, #568]	@ (80035e4 <HAL_DMA_IRQHandler+0x248>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a8e      	ldr	r2, [pc, #568]	@ (80035e8 <HAL_DMA_IRQHandler+0x24c>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0a9b      	lsrs	r3, r3, #10
 80033b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	2208      	movs	r2, #8
 80033c8:	409a      	lsls	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01a      	beq.n	8003408 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0204 	bic.w	r2, r2, #4
 80033ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	2208      	movs	r2, #8
 80033f6:	409a      	lsls	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	f043 0201 	orr.w	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	2201      	movs	r2, #1
 800340e:	409a      	lsls	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d012      	beq.n	800343e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	2201      	movs	r2, #1
 800342c:	409a      	lsls	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003436:	f043 0202 	orr.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003442:	2204      	movs	r2, #4
 8003444:	409a      	lsls	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003460:	2204      	movs	r2, #4
 8003462:	409a      	lsls	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346c:	f043 0204 	orr.w	r2, r3, #4
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	2210      	movs	r2, #16
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d043      	beq.n	800350c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d03c      	beq.n	800350c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003496:	2210      	movs	r2, #16
 8003498:	409a      	lsls	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d018      	beq.n	80034de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d024      	beq.n	800350c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
 80034ca:	e01f      	b.n	800350c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01b      	beq.n	800350c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
 80034dc:	e016      	b.n	800350c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d107      	bne.n	80034fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0208 	bic.w	r2, r2, #8
 80034fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003510:	2220      	movs	r2, #32
 8003512:	409a      	lsls	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 808f 	beq.w	800363c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8087 	beq.w	800363c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003532:	2220      	movs	r2, #32
 8003534:	409a      	lsls	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b05      	cmp	r3, #5
 8003544:	d136      	bne.n	80035b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0216 	bic.w	r2, r2, #22
 8003554:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003564:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d103      	bne.n	8003576 <HAL_DMA_IRQHandler+0x1da>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0208 	bic.w	r2, r2, #8
 8003584:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358a:	223f      	movs	r2, #63	@ 0x3f
 800358c:	409a      	lsls	r2, r3
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d07e      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
        }
        return;
 80035b2:	e079      	b.n	80036a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01d      	beq.n	80035fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d031      	beq.n	800363c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
 80035e0:	e02c      	b.n	800363c <HAL_DMA_IRQHandler+0x2a0>
 80035e2:	bf00      	nop
 80035e4:	20000000 	.word	0x20000000
 80035e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d023      	beq.n	800363c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
 80035fc:	e01e      	b.n	800363c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10f      	bne.n	800362c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0210 	bic.w	r2, r2, #16
 800361a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	2b00      	cmp	r3, #0
 8003642:	d032      	beq.n	80036aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d022      	beq.n	8003696 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2205      	movs	r2, #5
 8003654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	3301      	adds	r3, #1
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	429a      	cmp	r2, r3
 8003672:	d307      	bcc.n	8003684 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f2      	bne.n	8003668 <HAL_DMA_IRQHandler+0x2cc>
 8003682:	e000      	b.n	8003686 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003684:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	4798      	blx	r3
 80036a6:	e000      	b.n	80036aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80036a8:	bf00      	nop
    }
  }
}
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b40      	cmp	r3, #64	@ 0x40
 80036dc:	d108      	bne.n	80036f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036ee:	e007      	b.n	8003700 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	60da      	str	r2, [r3, #12]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	3b10      	subs	r3, #16
 800371c:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <DMA_CalcBaseAndBitshift+0x64>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003726:	4a13      	ldr	r2, [pc, #76]	@ (8003774 <DMA_CalcBaseAndBitshift+0x68>)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d909      	bls.n	800374e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	1d1a      	adds	r2, r3, #4
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	659a      	str	r2, [r3, #88]	@ 0x58
 800374c:	e007      	b.n	800375e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003756:	f023 0303 	bic.w	r3, r3, #3
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	aaaaaaab 	.word	0xaaaaaaab
 8003774:	08009ce4 	.word	0x08009ce4

08003778 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d11f      	bne.n	80037d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d856      	bhi.n	8003846 <DMA_CheckFifoParam+0xce>
 8003798:	a201      	add	r2, pc, #4	@ (adr r2, 80037a0 <DMA_CheckFifoParam+0x28>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037b1 	.word	0x080037b1
 80037a4:	080037c3 	.word	0x080037c3
 80037a8:	080037b1 	.word	0x080037b1
 80037ac:	08003847 	.word	0x08003847
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d046      	beq.n	800384a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c0:	e043      	b.n	800384a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037ca:	d140      	bne.n	800384e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d0:	e03d      	b.n	800384e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037da:	d121      	bne.n	8003820 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d837      	bhi.n	8003852 <DMA_CheckFifoParam+0xda>
 80037e2:	a201      	add	r2, pc, #4	@ (adr r2, 80037e8 <DMA_CheckFifoParam+0x70>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	080037ff 	.word	0x080037ff
 80037f0:	080037f9 	.word	0x080037f9
 80037f4:	08003811 	.word	0x08003811
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      break;
 80037fc:	e030      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003802:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d025      	beq.n	8003856 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380e:	e022      	b.n	8003856 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003818:	d11f      	bne.n	800385a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800381e:	e01c      	b.n	800385a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d903      	bls.n	800382e <DMA_CheckFifoParam+0xb6>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d003      	beq.n	8003834 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800382c:	e018      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      break;
 8003832:	e015      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00e      	beq.n	800385e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      break;
 8003844:	e00b      	b.n	800385e <DMA_CheckFifoParam+0xe6>
      break;
 8003846:	bf00      	nop
 8003848:	e00a      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;
 800384a:	bf00      	nop
 800384c:	e008      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;
 800384e:	bf00      	nop
 8003850:	e006      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;
 8003852:	bf00      	nop
 8003854:	e004      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;
 8003856:	bf00      	nop
 8003858:	e002      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;   
 800385a:	bf00      	nop
 800385c:	e000      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;
 800385e:	bf00      	nop
    }
  } 
  
  return status; 
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop

08003870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	@ 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	e159      	b.n	8003b40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800388c:	2201      	movs	r2, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	f040 8148 	bne.w	8003b3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d005      	beq.n	80038c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d130      	bne.n	8003924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	2203      	movs	r2, #3
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f8:	2201      	movs	r2, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 0201 	and.w	r2, r3, #1
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b03      	cmp	r3, #3
 800392e:	d017      	beq.n	8003960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	2203      	movs	r2, #3
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d123      	bne.n	80039b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	08da      	lsrs	r2, r3, #3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3208      	adds	r2, #8
 8003974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	220f      	movs	r2, #15
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	08da      	lsrs	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3208      	adds	r2, #8
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	2203      	movs	r2, #3
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0203 	and.w	r2, r3, #3
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a2 	beq.w	8003b3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	4b57      	ldr	r3, [pc, #348]	@ (8003b58 <HAL_GPIO_Init+0x2e8>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	4a56      	ldr	r2, [pc, #344]	@ (8003b58 <HAL_GPIO_Init+0x2e8>)
 8003a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a06:	4b54      	ldr	r3, [pc, #336]	@ (8003b58 <HAL_GPIO_Init+0x2e8>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a12:	4a52      	ldr	r2, [pc, #328]	@ (8003b5c <HAL_GPIO_Init+0x2ec>)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a49      	ldr	r2, [pc, #292]	@ (8003b60 <HAL_GPIO_Init+0x2f0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d019      	beq.n	8003a72 <HAL_GPIO_Init+0x202>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a48      	ldr	r2, [pc, #288]	@ (8003b64 <HAL_GPIO_Init+0x2f4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_GPIO_Init+0x1fe>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a47      	ldr	r2, [pc, #284]	@ (8003b68 <HAL_GPIO_Init+0x2f8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00d      	beq.n	8003a6a <HAL_GPIO_Init+0x1fa>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a46      	ldr	r2, [pc, #280]	@ (8003b6c <HAL_GPIO_Init+0x2fc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <HAL_GPIO_Init+0x1f6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a45      	ldr	r2, [pc, #276]	@ (8003b70 <HAL_GPIO_Init+0x300>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <HAL_GPIO_Init+0x1f2>
 8003a5e:	2304      	movs	r3, #4
 8003a60:	e008      	b.n	8003a74 <HAL_GPIO_Init+0x204>
 8003a62:	2307      	movs	r3, #7
 8003a64:	e006      	b.n	8003a74 <HAL_GPIO_Init+0x204>
 8003a66:	2303      	movs	r3, #3
 8003a68:	e004      	b.n	8003a74 <HAL_GPIO_Init+0x204>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e002      	b.n	8003a74 <HAL_GPIO_Init+0x204>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_GPIO_Init+0x204>
 8003a72:	2300      	movs	r3, #0
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f002 0203 	and.w	r2, r2, #3
 8003a7a:	0092      	lsls	r2, r2, #2
 8003a7c:	4093      	lsls	r3, r2
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a84:	4935      	ldr	r1, [pc, #212]	@ (8003b5c <HAL_GPIO_Init+0x2ec>)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	089b      	lsrs	r3, r3, #2
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a92:	4b38      	ldr	r3, [pc, #224]	@ (8003b74 <HAL_GPIO_Init+0x304>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8003b74 <HAL_GPIO_Init+0x304>)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003abc:	4b2d      	ldr	r3, [pc, #180]	@ (8003b74 <HAL_GPIO_Init+0x304>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae0:	4a24      	ldr	r2, [pc, #144]	@ (8003b74 <HAL_GPIO_Init+0x304>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ae6:	4b23      	ldr	r3, [pc, #140]	@ (8003b74 <HAL_GPIO_Init+0x304>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003b74 <HAL_GPIO_Init+0x304>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b10:	4b18      	ldr	r3, [pc, #96]	@ (8003b74 <HAL_GPIO_Init+0x304>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b34:	4a0f      	ldr	r2, [pc, #60]	@ (8003b74 <HAL_GPIO_Init+0x304>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b0f      	cmp	r3, #15
 8003b44:	f67f aea2 	bls.w	800388c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	3724      	adds	r7, #36	@ 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40013800 	.word	0x40013800
 8003b60:	40020000 	.word	0x40020000
 8003b64:	40020400 	.word	0x40020400
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020c00 	.word	0x40020c00
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40013c00 	.word	0x40013c00

08003b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	887b      	ldrh	r3, [r7, #2]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e001      	b.n	8003b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	807b      	strh	r3, [r7, #2]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bb8:	787b      	ldrb	r3, [r7, #1]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bc4:	e003      	b.n	8003bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bc6:	887b      	ldrh	r3, [r7, #2]
 8003bc8:	041a      	lsls	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	619a      	str	r2, [r3, #24]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e12b      	b.n	8003e46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fdc8 	bl	8001798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2224      	movs	r2, #36	@ 0x24
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c40:	f001 f8da 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 8003c44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4a81      	ldr	r2, [pc, #516]	@ (8003e50 <HAL_I2C_Init+0x274>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d807      	bhi.n	8003c60 <HAL_I2C_Init+0x84>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a80      	ldr	r2, [pc, #512]	@ (8003e54 <HAL_I2C_Init+0x278>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	bf94      	ite	ls
 8003c58:	2301      	movls	r3, #1
 8003c5a:	2300      	movhi	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e006      	b.n	8003c6e <HAL_I2C_Init+0x92>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a7d      	ldr	r2, [pc, #500]	@ (8003e58 <HAL_I2C_Init+0x27c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bf94      	ite	ls
 8003c68:	2301      	movls	r3, #1
 8003c6a:	2300      	movhi	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0e7      	b.n	8003e46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a78      	ldr	r2, [pc, #480]	@ (8003e5c <HAL_I2C_Init+0x280>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0c9b      	lsrs	r3, r3, #18
 8003c80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a6a      	ldr	r2, [pc, #424]	@ (8003e50 <HAL_I2C_Init+0x274>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d802      	bhi.n	8003cb0 <HAL_I2C_Init+0xd4>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3301      	adds	r3, #1
 8003cae:	e009      	b.n	8003cc4 <HAL_I2C_Init+0xe8>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	4a69      	ldr	r2, [pc, #420]	@ (8003e60 <HAL_I2C_Init+0x284>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	099b      	lsrs	r3, r3, #6
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	495c      	ldr	r1, [pc, #368]	@ (8003e50 <HAL_I2C_Init+0x274>)
 8003ce0:	428b      	cmp	r3, r1
 8003ce2:	d819      	bhi.n	8003d18 <HAL_I2C_Init+0x13c>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1e59      	subs	r1, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf2:	1c59      	adds	r1, r3, #1
 8003cf4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cf8:	400b      	ands	r3, r1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_I2C_Init+0x138>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1e59      	subs	r1, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d12:	e051      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d14:	2304      	movs	r3, #4
 8003d16:	e04f      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d111      	bne.n	8003d44 <HAL_I2C_Init+0x168>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1e58      	subs	r0, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	440b      	add	r3, r1
 8003d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e012      	b.n	8003d6a <HAL_I2C_Init+0x18e>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e58      	subs	r0, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	0099      	lsls	r1, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Init+0x196>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e022      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10e      	bne.n	8003d98 <HAL_I2C_Init+0x1bc>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1e58      	subs	r0, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6859      	ldr	r1, [r3, #4]
 8003d82:	460b      	mov	r3, r1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	440b      	add	r3, r1
 8003d88:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d96:	e00f      	b.n	8003db8 <HAL_I2C_Init+0x1dc>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1e58      	subs	r0, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	0099      	lsls	r1, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dae:	3301      	adds	r3, #1
 8003db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	6809      	ldr	r1, [r1, #0]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003de6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6911      	ldr	r1, [r2, #16]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68d2      	ldr	r2, [r2, #12]
 8003df2:	4311      	orrs	r1, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	000186a0 	.word	0x000186a0
 8003e54:	001e847f 	.word	0x001e847f
 8003e58:	003d08ff 	.word	0x003d08ff
 8003e5c:	431bde83 	.word	0x431bde83
 8003e60:	10624dd3 	.word	0x10624dd3

08003e64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	460b      	mov	r3, r1
 8003e72:	817b      	strh	r3, [r7, #10]
 8003e74:	4613      	mov	r3, r2
 8003e76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e78:	f7fe fa9a 	bl	80023b0 <HAL_GetTick>
 8003e7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	f040 80e0 	bne.w	800404c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	2319      	movs	r3, #25
 8003e92:	2201      	movs	r2, #1
 8003e94:	4970      	ldr	r1, [pc, #448]	@ (8004058 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f964 	bl	8004164 <I2C_WaitOnFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e0d3      	b.n	800404e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_I2C_Master_Transmit+0x50>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0cc      	b.n	800404e <HAL_I2C_Master_Transmit+0x1ea>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d007      	beq.n	8003eda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ee8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2221      	movs	r2, #33	@ 0x21
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	893a      	ldrh	r2, [r7, #8]
 8003f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4a50      	ldr	r2, [pc, #320]	@ (800405c <HAL_I2C_Master_Transmit+0x1f8>)
 8003f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f1c:	8979      	ldrh	r1, [r7, #10]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	6a3a      	ldr	r2, [r7, #32]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f89c 	bl	8004060 <I2C_MasterRequestWrite>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e08d      	b.n	800404e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f48:	e066      	b.n	8004018 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	6a39      	ldr	r1, [r7, #32]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fa22 	bl	8004398 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d107      	bne.n	8003f72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06b      	b.n	800404e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	781a      	ldrb	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d11b      	bne.n	8003fec <HAL_I2C_Master_Transmit+0x188>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d017      	beq.n	8003fec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	6a39      	ldr	r1, [r7, #32]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fa19 	bl	8004428 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00d      	beq.n	8004018 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	2b04      	cmp	r3, #4
 8004002:	d107      	bne.n	8004014 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004012:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e01a      	b.n	800404e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d194      	bne.n	8003f4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800402e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	00100002 	.word	0x00100002
 800405c:	ffff0000 	.word	0xffff0000

08004060 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	460b      	mov	r3, r1
 800406e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d006      	beq.n	800408a <I2C_MasterRequestWrite+0x2a>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d003      	beq.n	800408a <I2C_MasterRequestWrite+0x2a>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004088:	d108      	bne.n	800409c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e00b      	b.n	80040b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	2b12      	cmp	r3, #18
 80040a2:	d107      	bne.n	80040b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f84f 	bl	8004164 <I2C_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00d      	beq.n	80040e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040da:	d103      	bne.n	80040e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e035      	b.n	8004154 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f0:	d108      	bne.n	8004104 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040f2:	897b      	ldrh	r3, [r7, #10]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004100:	611a      	str	r2, [r3, #16]
 8004102:	e01b      	b.n	800413c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004104:	897b      	ldrh	r3, [r7, #10]
 8004106:	11db      	asrs	r3, r3, #7
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f003 0306 	and.w	r3, r3, #6
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f063 030f 	orn	r3, r3, #15
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	490e      	ldr	r1, [pc, #56]	@ (800415c <I2C_MasterRequestWrite+0xfc>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f898 	bl	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e010      	b.n	8004154 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004132:	897b      	ldrh	r3, [r7, #10]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4907      	ldr	r1, [pc, #28]	@ (8004160 <I2C_MasterRequestWrite+0x100>)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f888 	bl	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	00010008 	.word	0x00010008
 8004160:	00010002 	.word	0x00010002

08004164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004174:	e048      	b.n	8004208 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d044      	beq.n	8004208 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417e:	f7fe f917 	bl	80023b0 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d139      	bne.n	8004208 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	0c1b      	lsrs	r3, r3, #16
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10d      	bne.n	80041ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	43da      	mvns	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	e00c      	b.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	43da      	mvns	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d116      	bne.n	8004208 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e023      	b.n	8004250 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	0c1b      	lsrs	r3, r3, #16
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b01      	cmp	r3, #1
 8004210:	d10d      	bne.n	800422e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	43da      	mvns	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4013      	ands	r3, r2
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	e00c      	b.n	8004248 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	43da      	mvns	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	429a      	cmp	r2, r3
 800424c:	d093      	beq.n	8004176 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004266:	e071      	b.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004276:	d123      	bne.n	80042c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004286:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004290:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	f043 0204 	orr.w	r2, r3, #4
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e067      	b.n	8004390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d041      	beq.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c8:	f7fe f872 	bl	80023b0 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d302      	bcc.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d136      	bne.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d10c      	bne.n	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	43da      	mvns	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e00b      	b.n	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	43da      	mvns	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4013      	ands	r3, r2
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d016      	beq.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e021      	b.n	8004390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d10c      	bne.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	43da      	mvns	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e00b      	b.n	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	43da      	mvns	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf14      	ite	ne
 8004382:	2301      	movne	r3, #1
 8004384:	2300      	moveq	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	f47f af6d 	bne.w	8004268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a4:	e034      	b.n	8004410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f886 	bl	80044b8 <I2C_IsAcknowledgeFailed>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e034      	b.n	8004420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d028      	beq.n	8004410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043be:	f7fd fff7 	bl	80023b0 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11d      	bne.n	8004410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043de:	2b80      	cmp	r3, #128	@ 0x80
 80043e0:	d016      	beq.n	8004410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e007      	b.n	8004420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441a:	2b80      	cmp	r3, #128	@ 0x80
 800441c:	d1c3      	bne.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004434:	e034      	b.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f83e 	bl	80044b8 <I2C_IsAcknowledgeFailed>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e034      	b.n	80044b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d028      	beq.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444e:	f7fd ffaf 	bl	80023b0 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	d302      	bcc.n	8004464 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11d      	bne.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b04      	cmp	r3, #4
 8004470:	d016      	beq.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e007      	b.n	80044b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d1c3      	bne.n	8004436 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ce:	d11b      	bne.n	8004508 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	f043 0204 	orr.w	r2, r3, #4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e267      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d075      	beq.n	8004622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004536:	4b88      	ldr	r3, [pc, #544]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	2b04      	cmp	r3, #4
 8004540:	d00c      	beq.n	800455c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004542:	4b85      	ldr	r3, [pc, #532]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800454a:	2b08      	cmp	r3, #8
 800454c:	d112      	bne.n	8004574 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454e:	4b82      	ldr	r3, [pc, #520]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800455a:	d10b      	bne.n	8004574 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	4b7e      	ldr	r3, [pc, #504]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05b      	beq.n	8004620 <HAL_RCC_OscConfig+0x108>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d157      	bne.n	8004620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e242      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800457c:	d106      	bne.n	800458c <HAL_RCC_OscConfig+0x74>
 800457e:	4b76      	ldr	r3, [pc, #472]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a75      	ldr	r2, [pc, #468]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e01d      	b.n	80045c8 <HAL_RCC_OscConfig+0xb0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x98>
 8004596:	4b70      	ldr	r3, [pc, #448]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6f      	ldr	r2, [pc, #444]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0xb0>
 80045b0:	4b69      	ldr	r3, [pc, #420]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a68      	ldr	r2, [pc, #416]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b66      	ldr	r3, [pc, #408]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a65      	ldr	r2, [pc, #404]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d013      	beq.n	80045f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fd feee 	bl	80023b0 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fd feea 	bl	80023b0 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	@ 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e207      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0xc0>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7fd feda 	bl	80023b0 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004600:	f7fd fed6 	bl	80023b0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	@ 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e1f3      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004612:	4b51      	ldr	r3, [pc, #324]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0xe8>
 800461e:	e000      	b.n	8004622 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d063      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800462e:	4b4a      	ldr	r3, [pc, #296]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800463a:	4b47      	ldr	r3, [pc, #284]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004642:	2b08      	cmp	r3, #8
 8004644:	d11c      	bne.n	8004680 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004646:	4b44      	ldr	r3, [pc, #272]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d116      	bne.n	8004680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004652:	4b41      	ldr	r3, [pc, #260]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <HAL_RCC_OscConfig+0x152>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d001      	beq.n	800466a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e1c7      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466a:	4b3b      	ldr	r3, [pc, #236]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4937      	ldr	r1, [pc, #220]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467e:	e03a      	b.n	80046f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d020      	beq.n	80046ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004688:	4b34      	ldr	r3, [pc, #208]	@ (800475c <HAL_RCC_OscConfig+0x244>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fd fe8f 	bl	80023b0 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004696:	f7fd fe8b 	bl	80023b0 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e1a8      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b4:	4b28      	ldr	r3, [pc, #160]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4925      	ldr	r1, [pc, #148]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	600b      	str	r3, [r1, #0]
 80046c8:	e015      	b.n	80046f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ca:	4b24      	ldr	r3, [pc, #144]	@ (800475c <HAL_RCC_OscConfig+0x244>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fd fe6e 	bl	80023b0 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d8:	f7fd fe6a 	bl	80023b0 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e187      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d036      	beq.n	8004770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470a:	4b15      	ldr	r3, [pc, #84]	@ (8004760 <HAL_RCC_OscConfig+0x248>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fd fe4e 	bl	80023b0 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004718:	f7fd fe4a 	bl	80023b0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e167      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472a:	4b0b      	ldr	r3, [pc, #44]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800472c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x200>
 8004736:	e01b      	b.n	8004770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004738:	4b09      	ldr	r3, [pc, #36]	@ (8004760 <HAL_RCC_OscConfig+0x248>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473e:	f7fd fe37 	bl	80023b0 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	e00e      	b.n	8004764 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004746:	f7fd fe33 	bl	80023b0 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d907      	bls.n	8004764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e150      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
 8004758:	40023800 	.word	0x40023800
 800475c:	42470000 	.word	0x42470000
 8004760:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004764:	4b88      	ldr	r3, [pc, #544]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1ea      	bne.n	8004746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8097 	beq.w	80048ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004782:	4b81      	ldr	r3, [pc, #516]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	4b7d      	ldr	r3, [pc, #500]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	4a7c      	ldr	r2, [pc, #496]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	@ 0x40
 800479e:	4b7a      	ldr	r3, [pc, #488]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	4b77      	ldr	r3, [pc, #476]	@ (800498c <HAL_RCC_OscConfig+0x474>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d118      	bne.n	80047ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ba:	4b74      	ldr	r3, [pc, #464]	@ (800498c <HAL_RCC_OscConfig+0x474>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a73      	ldr	r2, [pc, #460]	@ (800498c <HAL_RCC_OscConfig+0x474>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c6:	f7fd fdf3 	bl	80023b0 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ce:	f7fd fdef 	bl	80023b0 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e10c      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	4b6a      	ldr	r3, [pc, #424]	@ (800498c <HAL_RCC_OscConfig+0x474>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x2ea>
 80047f4:	4b64      	ldr	r3, [pc, #400]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f8:	4a63      	ldr	r2, [pc, #396]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004800:	e01c      	b.n	800483c <HAL_RCC_OscConfig+0x324>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b05      	cmp	r3, #5
 8004808:	d10c      	bne.n	8004824 <HAL_RCC_OscConfig+0x30c>
 800480a:	4b5f      	ldr	r3, [pc, #380]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480e:	4a5e      	ldr	r2, [pc, #376]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004810:	f043 0304 	orr.w	r3, r3, #4
 8004814:	6713      	str	r3, [r2, #112]	@ 0x70
 8004816:	4b5c      	ldr	r3, [pc, #368]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481a:	4a5b      	ldr	r2, [pc, #364]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	6713      	str	r3, [r2, #112]	@ 0x70
 8004822:	e00b      	b.n	800483c <HAL_RCC_OscConfig+0x324>
 8004824:	4b58      	ldr	r3, [pc, #352]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004828:	4a57      	ldr	r2, [pc, #348]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004830:	4b55      	ldr	r3, [pc, #340]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004834:	4a54      	ldr	r2, [pc, #336]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004836:	f023 0304 	bic.w	r3, r3, #4
 800483a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d015      	beq.n	8004870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fd fdb4 	bl	80023b0 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484a:	e00a      	b.n	8004862 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484c:	f7fd fdb0 	bl	80023b0 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e0cb      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004862:	4b49      	ldr	r3, [pc, #292]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0ee      	beq.n	800484c <HAL_RCC_OscConfig+0x334>
 800486e:	e014      	b.n	800489a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004870:	f7fd fd9e 	bl	80023b0 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004876:	e00a      	b.n	800488e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004878:	f7fd fd9a 	bl	80023b0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0b5      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488e:	4b3e      	ldr	r3, [pc, #248]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1ee      	bne.n	8004878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d105      	bne.n	80048ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a0:	4b39      	ldr	r3, [pc, #228]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	4a38      	ldr	r2, [pc, #224]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80048a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80a1 	beq.w	80049f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b6:	4b34      	ldr	r3, [pc, #208]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d05c      	beq.n	800497c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d141      	bne.n	800494e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ca:	4b31      	ldr	r3, [pc, #196]	@ (8004990 <HAL_RCC_OscConfig+0x478>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fd fd6e 	bl	80023b0 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd fd6a 	bl	80023b0 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e087      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	4b27      	ldr	r3, [pc, #156]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	019b      	lsls	r3, r3, #6
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	3b01      	subs	r3, #1
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	491b      	ldr	r1, [pc, #108]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004920:	4b1b      	ldr	r3, [pc, #108]	@ (8004990 <HAL_RCC_OscConfig+0x478>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004926:	f7fd fd43 	bl	80023b0 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492e:	f7fd fd3f 	bl	80023b0 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e05c      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004940:	4b11      	ldr	r3, [pc, #68]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x416>
 800494c:	e054      	b.n	80049f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494e:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <HAL_RCC_OscConfig+0x478>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004954:	f7fd fd2c 	bl	80023b0 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495c:	f7fd fd28 	bl	80023b0 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e045      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496e:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x444>
 800497a:	e03d      	b.n	80049f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d107      	bne.n	8004994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e038      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
 8004988:	40023800 	.word	0x40023800
 800498c:	40007000 	.word	0x40007000
 8004990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004994:	4b1b      	ldr	r3, [pc, #108]	@ (8004a04 <HAL_RCC_OscConfig+0x4ec>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d028      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d121      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d11a      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049c4:	4013      	ands	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d111      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	3b01      	subs	r3, #1
 80049de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800

08004a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0cc      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b68      	ldr	r3, [pc, #416]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d90c      	bls.n	8004a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b65      	ldr	r3, [pc, #404]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a32:	4b63      	ldr	r3, [pc, #396]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0b8      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d020      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a5c:	4b59      	ldr	r3, [pc, #356]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4a58      	ldr	r2, [pc, #352]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a74:	4b53      	ldr	r3, [pc, #332]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a52      	ldr	r2, [pc, #328]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a80:	4b50      	ldr	r3, [pc, #320]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	494d      	ldr	r1, [pc, #308]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d044      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	4b47      	ldr	r3, [pc, #284]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d119      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e07f      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e06f      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e067      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae6:	4b37      	ldr	r3, [pc, #220]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f023 0203 	bic.w	r2, r3, #3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4934      	ldr	r1, [pc, #208]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af8:	f7fd fc5a 	bl	80023b0 <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b00:	f7fd fc56 	bl	80023b0 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e04f      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b16:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 020c 	and.w	r2, r3, #12
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d1eb      	bne.n	8004b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b28:	4b25      	ldr	r3, [pc, #148]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d20c      	bcs.n	8004b50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b22      	ldr	r3, [pc, #136]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e032      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b5c:	4b19      	ldr	r3, [pc, #100]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4916      	ldr	r1, [pc, #88]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b7a:	4b12      	ldr	r3, [pc, #72]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	490e      	ldr	r1, [pc, #56]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b8e:	f000 f821 	bl	8004bd4 <HAL_RCC_GetSysClockFreq>
 8004b92:	4602      	mov	r2, r0
 8004b94:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	490a      	ldr	r1, [pc, #40]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba0:	5ccb      	ldrb	r3, [r1, r3]
 8004ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba6:	4a09      	ldr	r2, [pc, #36]	@ (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004baa:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd fbba 	bl	8002328 <HAL_InitTick>

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40023c00 	.word	0x40023c00
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	08009ccc 	.word	0x08009ccc
 8004bcc:	20000000 	.word	0x20000000
 8004bd0:	20000004 	.word	0x20000004

08004bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd8:	b094      	sub	sp, #80	@ 0x50
 8004bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bec:	4b79      	ldr	r3, [pc, #484]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 030c 	and.w	r3, r3, #12
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d00d      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	f200 80e1 	bhi.w	8004dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x34>
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d003      	beq.n	8004c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c06:	e0db      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b73      	ldr	r3, [pc, #460]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c0c:	e0db      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0e:	4b73      	ldr	r3, [pc, #460]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8004c10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c12:	e0d8      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c14:	4b6f      	ldr	r3, [pc, #444]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d063      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	2200      	movs	r2, #0
 8004c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c3e:	2300      	movs	r3, #0
 8004c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	f04f 0000 	mov.w	r0, #0
 8004c4e:	f04f 0100 	mov.w	r1, #0
 8004c52:	0159      	lsls	r1, r3, #5
 8004c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c58:	0150      	lsls	r0, r2, #5
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4621      	mov	r1, r4
 8004c60:	1a51      	subs	r1, r2, r1
 8004c62:	6139      	str	r1, [r7, #16]
 8004c64:	4629      	mov	r1, r5
 8004c66:	eb63 0301 	sbc.w	r3, r3, r1
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c78:	4659      	mov	r1, fp
 8004c7a:	018b      	lsls	r3, r1, #6
 8004c7c:	4651      	mov	r1, sl
 8004c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c82:	4651      	mov	r1, sl
 8004c84:	018a      	lsls	r2, r1, #6
 8004c86:	4651      	mov	r1, sl
 8004c88:	ebb2 0801 	subs.w	r8, r2, r1
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca6:	4690      	mov	r8, r2
 8004ca8:	4699      	mov	r9, r3
 8004caa:	4623      	mov	r3, r4
 8004cac:	eb18 0303 	adds.w	r3, r8, r3
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	462b      	mov	r3, r5
 8004cb4:	eb49 0303 	adc.w	r3, r9, r3
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	024b      	lsls	r3, r1, #9
 8004cca:	4621      	mov	r1, r4
 8004ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	024a      	lsls	r2, r1, #9
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cda:	2200      	movs	r2, #0
 8004cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ce4:	f7fb ff68 	bl	8000bb8 <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4613      	mov	r3, r2
 8004cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf0:	e058      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf2:	4b38      	ldr	r3, [pc, #224]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d02:	623b      	str	r3, [r7, #32]
 8004d04:	2300      	movs	r3, #0
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	464b      	mov	r3, r9
 8004d10:	f04f 0000 	mov.w	r0, #0
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	0159      	lsls	r1, r3, #5
 8004d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1e:	0150      	lsls	r0, r2, #5
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4641      	mov	r1, r8
 8004d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d44:	ebb2 040a 	subs.w	r4, r2, sl
 8004d48:	eb63 050b 	sbc.w	r5, r3, fp
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	00eb      	lsls	r3, r5, #3
 8004d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5a:	00e2      	lsls	r2, r4, #3
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	461d      	mov	r5, r3
 8004d60:	4643      	mov	r3, r8
 8004d62:	18e3      	adds	r3, r4, r3
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	464b      	mov	r3, r9
 8004d68:	eb45 0303 	adc.w	r3, r5, r3
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	028b      	lsls	r3, r1, #10
 8004d7e:	4621      	mov	r1, r4
 8004d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d84:	4621      	mov	r1, r4
 8004d86:	028a      	lsls	r2, r1, #10
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d8e:	2200      	movs	r2, #0
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	61fa      	str	r2, [r7, #28]
 8004d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d98:	f7fb ff0e 	bl	8000bb8 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004da4:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	3301      	adds	r3, #1
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004db4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3750      	adds	r7, #80	@ 0x50
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	007a1200 	.word	0x007a1200

08004de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de4:	4b03      	ldr	r3, [pc, #12]	@ (8004df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000000 	.word	0x20000000

08004df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dfc:	f7ff fff0 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0a9b      	lsrs	r3, r3, #10
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4903      	ldr	r1, [pc, #12]	@ (8004e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	08009cdc 	.word	0x08009cdc

08004e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e24:	f7ff ffdc 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	0b5b      	lsrs	r3, r3, #13
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	4903      	ldr	r1, [pc, #12]	@ (8004e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e36:	5ccb      	ldrb	r3, [r1, r3]
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40023800 	.word	0x40023800
 8004e44:	08009cdc 	.word	0x08009cdc

08004e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e041      	b.n	8004ede <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fd f90a 	bl	8002088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f000 fc64 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d001      	beq.n	8004f00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e03c      	b.n	8004f7a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004f88 <HAL_TIM_Base_Start+0xa0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d018      	beq.n	8004f44 <HAL_TIM_Base_Start+0x5c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1a:	d013      	beq.n	8004f44 <HAL_TIM_Base_Start+0x5c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1a      	ldr	r2, [pc, #104]	@ (8004f8c <HAL_TIM_Base_Start+0xa4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00e      	beq.n	8004f44 <HAL_TIM_Base_Start+0x5c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a19      	ldr	r2, [pc, #100]	@ (8004f90 <HAL_TIM_Base_Start+0xa8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d009      	beq.n	8004f44 <HAL_TIM_Base_Start+0x5c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <HAL_TIM_Base_Start+0xac>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <HAL_TIM_Base_Start+0x5c>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a16      	ldr	r2, [pc, #88]	@ (8004f98 <HAL_TIM_Base_Start+0xb0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d111      	bne.n	8004f68 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b06      	cmp	r3, #6
 8004f54:	d010      	beq.n	8004f78 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	e007      	b.n	8004f78 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40000800 	.word	0x40000800
 8004f94:	40000c00 	.word	0x40000c00
 8004f98:	40014000 	.word	0x40014000

08004f9c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6a1a      	ldr	r2, [r3, #32]
 8004faa:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10f      	bne.n	8004fd4 <HAL_TIM_Base_Stop+0x38>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d107      	bne.n	8004fd4 <HAL_TIM_Base_Stop+0x38>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0201 	bic.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e041      	b.n	8005080 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f839 	bl	8005088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2202      	movs	r2, #2
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f000 fb93 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <HAL_TIM_PWM_Start+0x24>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	bf14      	ite	ne
 80050b8:	2301      	movne	r3, #1
 80050ba:	2300      	moveq	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e022      	b.n	8005106 <HAL_TIM_PWM_Start+0x6a>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d109      	bne.n	80050da <HAL_TIM_PWM_Start+0x3e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	bf14      	ite	ne
 80050d2:	2301      	movne	r3, #1
 80050d4:	2300      	moveq	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	e015      	b.n	8005106 <HAL_TIM_PWM_Start+0x6a>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d109      	bne.n	80050f4 <HAL_TIM_PWM_Start+0x58>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	e008      	b.n	8005106 <HAL_TIM_PWM_Start+0x6a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	bf14      	ite	ne
 8005100:	2301      	movne	r3, #1
 8005102:	2300      	moveq	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e068      	b.n	80051e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <HAL_TIM_PWM_Start+0x82>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800511c:	e013      	b.n	8005146 <HAL_TIM_PWM_Start+0xaa>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b04      	cmp	r3, #4
 8005122:	d104      	bne.n	800512e <HAL_TIM_PWM_Start+0x92>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800512c:	e00b      	b.n	8005146 <HAL_TIM_PWM_Start+0xaa>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d104      	bne.n	800513e <HAL_TIM_PWM_Start+0xa2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800513c:	e003      	b.n	8005146 <HAL_TIM_PWM_Start+0xaa>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2201      	movs	r2, #1
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fdb2 	bl	8005cb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a23      	ldr	r2, [pc, #140]	@ (80051e8 <HAL_TIM_PWM_Start+0x14c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d107      	bne.n	800516e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800516c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1d      	ldr	r2, [pc, #116]	@ (80051e8 <HAL_TIM_PWM_Start+0x14c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d018      	beq.n	80051aa <HAL_TIM_PWM_Start+0x10e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005180:	d013      	beq.n	80051aa <HAL_TIM_PWM_Start+0x10e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a19      	ldr	r2, [pc, #100]	@ (80051ec <HAL_TIM_PWM_Start+0x150>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_TIM_PWM_Start+0x10e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a17      	ldr	r2, [pc, #92]	@ (80051f0 <HAL_TIM_PWM_Start+0x154>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d009      	beq.n	80051aa <HAL_TIM_PWM_Start+0x10e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a16      	ldr	r2, [pc, #88]	@ (80051f4 <HAL_TIM_PWM_Start+0x158>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIM_PWM_Start+0x10e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a14      	ldr	r2, [pc, #80]	@ (80051f8 <HAL_TIM_PWM_Start+0x15c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d111      	bne.n	80051ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b06      	cmp	r3, #6
 80051ba:	d010      	beq.n	80051de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051cc:	e007      	b.n	80051de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0201 	orr.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40014000 	.word	0x40014000

080051fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d020      	beq.n	8005260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01b      	beq.n	8005260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0202 	mvn.w	r2, #2
 8005230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa65 	bl	8005716 <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa57 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fa68 	bl	800572a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d020      	beq.n	80052ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0204 	mvn.w	r2, #4
 800527c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa3f 	bl	8005716 <HAL_TIM_IC_CaptureCallback>
 8005298:	e005      	b.n	80052a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fa31 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fa42 	bl	800572a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d020      	beq.n	80052f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01b      	beq.n	80052f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0208 	mvn.w	r2, #8
 80052c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2204      	movs	r2, #4
 80052ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa19 	bl	8005716 <HAL_TIM_IC_CaptureCallback>
 80052e4:	e005      	b.n	80052f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fa0b 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fa1c 	bl	800572a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d020      	beq.n	8005344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0210 	mvn.w	r2, #16
 8005314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2208      	movs	r2, #8
 800531a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9f3 	bl	8005716 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9e5 	bl	8005702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f9f6 	bl	800572a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00c      	beq.n	8005368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0201 	mvn.w	r2, #1
 8005360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f9c3 	bl	80056ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00c      	beq.n	800538c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fd34 	bl	8005df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9c7 	bl	800573e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00c      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d007      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0220 	mvn.w	r2, #32
 80053cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fd06 	bl	8005de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e0ae      	b.n	8005558 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b0c      	cmp	r3, #12
 8005406:	f200 809f 	bhi.w	8005548 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800540a:	a201      	add	r2, pc, #4	@ (adr r2, 8005410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	08005445 	.word	0x08005445
 8005414:	08005549 	.word	0x08005549
 8005418:	08005549 	.word	0x08005549
 800541c:	08005549 	.word	0x08005549
 8005420:	08005485 	.word	0x08005485
 8005424:	08005549 	.word	0x08005549
 8005428:	08005549 	.word	0x08005549
 800542c:	08005549 	.word	0x08005549
 8005430:	080054c7 	.word	0x080054c7
 8005434:	08005549 	.word	0x08005549
 8005438:	08005549 	.word	0x08005549
 800543c:	08005549 	.word	0x08005549
 8005440:	08005507 	.word	0x08005507
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fa0e 	bl	800586c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0208 	orr.w	r2, r2, #8
 800545e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0204 	bic.w	r2, r2, #4
 800546e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	619a      	str	r2, [r3, #24]
      break;
 8005482:	e064      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fa54 	bl	8005938 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800549e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6999      	ldr	r1, [r3, #24]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	021a      	lsls	r2, r3, #8
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	619a      	str	r2, [r3, #24]
      break;
 80054c4:	e043      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fa9f 	bl	8005a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0208 	orr.w	r2, r2, #8
 80054e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0204 	bic.w	r2, r2, #4
 80054f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	61da      	str	r2, [r3, #28]
      break;
 8005504:	e023      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fae9 	bl	8005ae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69d9      	ldr	r1, [r3, #28]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	021a      	lsls	r2, r3, #8
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	61da      	str	r2, [r3, #28]
      break;
 8005546:	e002      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
      break;
 800554c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005556:	7dfb      	ldrb	r3, [r7, #23]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIM_ConfigClockSource+0x1c>
 8005578:	2302      	movs	r3, #2
 800557a:	e0b4      	b.n	80056e6 <HAL_TIM_ConfigClockSource+0x186>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800559a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055b4:	d03e      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0xd4>
 80055b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ba:	f200 8087 	bhi.w	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055c2:	f000 8086 	beq.w	80056d2 <HAL_TIM_ConfigClockSource+0x172>
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ca:	d87f      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055cc:	2b70      	cmp	r3, #112	@ 0x70
 80055ce:	d01a      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0xa6>
 80055d0:	2b70      	cmp	r3, #112	@ 0x70
 80055d2:	d87b      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055d4:	2b60      	cmp	r3, #96	@ 0x60
 80055d6:	d050      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x11a>
 80055d8:	2b60      	cmp	r3, #96	@ 0x60
 80055da:	d877      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055dc:	2b50      	cmp	r3, #80	@ 0x50
 80055de:	d03c      	beq.n	800565a <HAL_TIM_ConfigClockSource+0xfa>
 80055e0:	2b50      	cmp	r3, #80	@ 0x50
 80055e2:	d873      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055e4:	2b40      	cmp	r3, #64	@ 0x40
 80055e6:	d058      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x13a>
 80055e8:	2b40      	cmp	r3, #64	@ 0x40
 80055ea:	d86f      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	2b30      	cmp	r3, #48	@ 0x30
 80055ee:	d064      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 80055f0:	2b30      	cmp	r3, #48	@ 0x30
 80055f2:	d86b      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d060      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d867      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d05c      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 8005600:	2b10      	cmp	r3, #16
 8005602:	d05a      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 8005604:	e062      	b.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005616:	f000 fb2f 	bl	8005c78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	609a      	str	r2, [r3, #8]
      break;
 8005632:	e04f      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005644:	f000 fb18 	bl	8005c78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005656:	609a      	str	r2, [r3, #8]
      break;
 8005658:	e03c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005666:	461a      	mov	r2, r3
 8005668:	f000 fa8c 	bl	8005b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2150      	movs	r1, #80	@ 0x50
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fae5 	bl	8005c42 <TIM_ITRx_SetConfig>
      break;
 8005678:	e02c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005686:	461a      	mov	r2, r3
 8005688:	f000 faab 	bl	8005be2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2160      	movs	r1, #96	@ 0x60
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fad5 	bl	8005c42 <TIM_ITRx_SetConfig>
      break;
 8005698:	e01c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a6:	461a      	mov	r2, r3
 80056a8:	f000 fa6c 	bl	8005b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2140      	movs	r1, #64	@ 0x40
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fac5 	bl	8005c42 <TIM_ITRx_SetConfig>
      break;
 80056b8:	e00c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f000 fabc 	bl	8005c42 <TIM_ITRx_SetConfig>
      break;
 80056ca:	e003      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      break;
 80056d0:	e000      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a3a      	ldr	r2, [pc, #232]	@ (8005850 <TIM_Base_SetConfig+0xfc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00f      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005772:	d00b      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a37      	ldr	r2, [pc, #220]	@ (8005854 <TIM_Base_SetConfig+0x100>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a36      	ldr	r2, [pc, #216]	@ (8005858 <TIM_Base_SetConfig+0x104>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a35      	ldr	r2, [pc, #212]	@ (800585c <TIM_Base_SetConfig+0x108>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d108      	bne.n	800579e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005850 <TIM_Base_SetConfig+0xfc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01b      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ac:	d017      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a28      	ldr	r2, [pc, #160]	@ (8005854 <TIM_Base_SetConfig+0x100>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a27      	ldr	r2, [pc, #156]	@ (8005858 <TIM_Base_SetConfig+0x104>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00f      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a26      	ldr	r2, [pc, #152]	@ (800585c <TIM_Base_SetConfig+0x108>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00b      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a25      	ldr	r2, [pc, #148]	@ (8005860 <TIM_Base_SetConfig+0x10c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d007      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a24      	ldr	r2, [pc, #144]	@ (8005864 <TIM_Base_SetConfig+0x110>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d003      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a23      	ldr	r2, [pc, #140]	@ (8005868 <TIM_Base_SetConfig+0x114>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d108      	bne.n	80057f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a0e      	ldr	r2, [pc, #56]	@ (8005850 <TIM_Base_SetConfig+0xfc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d103      	bne.n	8005824 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d105      	bne.n	8005842 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f023 0201 	bic.w	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	611a      	str	r2, [r3, #16]
  }
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40010000 	.word	0x40010000
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40000c00 	.word	0x40000c00
 8005860:	40014000 	.word	0x40014000
 8005864:	40014400 	.word	0x40014400
 8005868:	40014800 	.word	0x40014800

0800586c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f023 0201 	bic.w	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f023 0302 	bic.w	r3, r3, #2
 80058b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005934 <TIM_OC1_SetConfig+0xc8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d10c      	bne.n	80058e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f023 0308 	bic.w	r3, r3, #8
 80058ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 0304 	bic.w	r3, r3, #4
 80058e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a13      	ldr	r2, [pc, #76]	@ (8005934 <TIM_OC1_SetConfig+0xc8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d111      	bne.n	800590e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	621a      	str	r2, [r3, #32]
}
 8005928:	bf00      	nop
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	40010000 	.word	0x40010000

08005938 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f023 0210 	bic.w	r2, r3, #16
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800596e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f023 0320 	bic.w	r3, r3, #32
 8005982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a1e      	ldr	r2, [pc, #120]	@ (8005a0c <TIM_OC2_SetConfig+0xd4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d10d      	bne.n	80059b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800599e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a15      	ldr	r2, [pc, #84]	@ (8005a0c <TIM_OC2_SetConfig+0xd4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d113      	bne.n	80059e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40010000 	.word	0x40010000

08005a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0303 	bic.w	r3, r3, #3
 8005a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae0 <TIM_OC3_SetConfig+0xd0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d10d      	bne.n	8005a8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ae0 <TIM_OC3_SetConfig+0xd0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d113      	bne.n	8005aba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	621a      	str	r2, [r3, #32]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	40010000 	.word	0x40010000

08005ae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	031b      	lsls	r3, r3, #12
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a10      	ldr	r2, [pc, #64]	@ (8005b80 <TIM_OC4_SetConfig+0x9c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d109      	bne.n	8005b58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	019b      	lsls	r3, r3, #6
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40010000 	.word	0x40010000

08005b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f023 0201 	bic.w	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f023 030a 	bic.w	r3, r3, #10
 8005bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	621a      	str	r2, [r3, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b087      	sub	sp, #28
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f023 0210 	bic.w	r2, r3, #16
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	031b      	lsls	r3, r3, #12
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f043 0307 	orr.w	r3, r3, #7
 8005c64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	021a      	lsls	r2, r3, #8
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	609a      	str	r2, [r3, #8]
}
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2201      	movs	r2, #1
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	401a      	ands	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e050      	b.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d018      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d68:	d013      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a18      	ldr	r2, [pc, #96]	@ (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00e      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a16      	ldr	r2, [pc, #88]	@ (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a15      	ldr	r2, [pc, #84]	@ (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a13      	ldr	r2, [pc, #76]	@ (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d10c      	bne.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40014000 	.word	0x40014000

08005de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e042      	b.n	8005ea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fc f9de 	bl	80021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2224      	movs	r2, #36	@ 0x24
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fdbd 	bl	80069cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	@ 0x28
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d175      	bne.n	8005fb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_UART_Transmit+0x2c>
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e06e      	b.n	8005fb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2221      	movs	r2, #33	@ 0x21
 8005ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ee6:	f7fc fa63 	bl	80023b0 <HAL_GetTick>
 8005eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	88fa      	ldrh	r2, [r7, #6]
 8005ef0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f00:	d108      	bne.n	8005f14 <HAL_UART_Transmit+0x6c>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	e003      	b.n	8005f1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f1c:	e02e      	b.n	8005f7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	2180      	movs	r1, #128	@ 0x80
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fb1f 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e03a      	b.n	8005fb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	3302      	adds	r3, #2
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e007      	b.n	8005f6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1cb      	bne.n	8005f1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2140      	movs	r1, #64	@ 0x40
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 faeb 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e006      	b.n	8005fb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e000      	b.n	8005fb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005fb4:	2302      	movs	r3, #2
  }
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d112      	bne.n	8005ffe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_UART_Receive_IT+0x26>
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e00b      	b.n	8006000 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fb12 	bl	800661e <UART_Start_Receive_IT>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	e000      	b.n	8006000 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005ffe:	2302      	movs	r3, #2
  }
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b0ba      	sub	sp, #232	@ 0xe8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800602e:	2300      	movs	r3, #0
 8006030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006034:	2300      	movs	r3, #0
 8006036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800603a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10f      	bne.n	800606e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <HAL_UART_IRQHandler+0x66>
 800605a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fbf2 	bl	8006850 <UART_Receive_IT>
      return;
 800606c:	e25b      	b.n	8006526 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800606e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 80de 	beq.w	8006234 <HAL_UART_IRQHandler+0x22c>
 8006078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	d106      	bne.n	8006092 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006088:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80d1 	beq.w	8006234 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <HAL_UART_IRQHandler+0xae>
 800609e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d005      	beq.n	80060b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ae:	f043 0201 	orr.w	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00b      	beq.n	80060da <HAL_UART_IRQHandler+0xd2>
 80060c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d2:	f043 0202 	orr.w	r2, r3, #2
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00b      	beq.n	80060fe <HAL_UART_IRQHandler+0xf6>
 80060e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f6:	f043 0204 	orr.w	r2, r3, #4
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d011      	beq.n	800612e <HAL_UART_IRQHandler+0x126>
 800610a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d105      	bne.n	8006122 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d005      	beq.n	800612e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006126:	f043 0208 	orr.w	r2, r3, #8
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 81f2 	beq.w	800651c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <HAL_UART_IRQHandler+0x14e>
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fb7d 	bl	8006850 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006160:	2b40      	cmp	r3, #64	@ 0x40
 8006162:	bf0c      	ite	eq
 8006164:	2301      	moveq	r3, #1
 8006166:	2300      	movne	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d103      	bne.n	8006182 <HAL_UART_IRQHandler+0x17a>
 800617a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d04f      	beq.n	8006222 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa85 	bl	8006692 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006192:	2b40      	cmp	r3, #64	@ 0x40
 8006194:	d141      	bne.n	800621a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3314      	adds	r3, #20
 800619c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3314      	adds	r3, #20
 80061be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1d9      	bne.n	8006196 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d013      	beq.n	8006212 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ee:	4a7e      	ldr	r2, [pc, #504]	@ (80063e8 <HAL_UART_IRQHandler+0x3e0>)
 80061f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fd f8ae 	bl	8003358 <HAL_DMA_Abort_IT>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d016      	beq.n	8006230 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800620c:	4610      	mov	r0, r2
 800620e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006210:	e00e      	b.n	8006230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f994 	bl	8006540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006218:	e00a      	b.n	8006230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f990 	bl	8006540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006220:	e006      	b.n	8006230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f98c 	bl	8006540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800622e:	e175      	b.n	800651c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	bf00      	nop
    return;
 8006232:	e173      	b.n	800651c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006238:	2b01      	cmp	r3, #1
 800623a:	f040 814f 	bne.w	80064dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 8148 	beq.w	80064dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800624c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8141 	beq.w	80064dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	60bb      	str	r3, [r7, #8]
 800626e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627a:	2b40      	cmp	r3, #64	@ 0x40
 800627c:	f040 80b6 	bne.w	80063ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800628c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 8145 	beq.w	8006520 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800629a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800629e:	429a      	cmp	r2, r3
 80062a0:	f080 813e 	bcs.w	8006520 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062b6:	f000 8088 	beq.w	80063ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	330c      	adds	r3, #12
 80062c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	330c      	adds	r3, #12
 80062e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80062e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80062f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1d9      	bne.n	80062ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3314      	adds	r3, #20
 800630c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006318:	f023 0301 	bic.w	r3, r3, #1
 800631c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3314      	adds	r3, #20
 8006326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800632a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800632e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006332:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800633c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e1      	bne.n	8006306 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3314      	adds	r3, #20
 8006348:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3314      	adds	r3, #20
 8006362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800636c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e3      	bne.n	8006342 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800639a:	f023 0310 	bic.w	r3, r3, #16
 800639e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	330c      	adds	r3, #12
 80063a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80063ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80063ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e3      	bne.n	8006388 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fc ff57 	bl	8003278 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	b29b      	uxth	r3, r3
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f8b7 	bl	8006554 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063e6:	e09b      	b.n	8006520 <HAL_UART_IRQHandler+0x518>
 80063e8:	08006759 	.word	0x08006759
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 808e 	beq.w	8006524 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8089 	beq.w	8006524 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	330c      	adds	r3, #12
 8006418:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006428:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006436:	647a      	str	r2, [r7, #68]	@ 0x44
 8006438:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800643c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e3      	bne.n	8006412 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3314      	adds	r3, #20
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	623b      	str	r3, [r7, #32]
   return(result);
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	f023 0301 	bic.w	r3, r3, #1
 8006460:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3314      	adds	r3, #20
 800646a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800646e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006470:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800647c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1e3      	bne.n	800644a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	60fb      	str	r3, [r7, #12]
   return(result);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0310 	bic.w	r3, r3, #16
 80064a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	330c      	adds	r3, #12
 80064b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80064b4:	61fa      	str	r2, [r7, #28]
 80064b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	69b9      	ldr	r1, [r7, #24]
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	617b      	str	r3, [r7, #20]
   return(result);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e3      	bne.n	8006490 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f83d 	bl	8006554 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064da:	e023      	b.n	8006524 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <HAL_UART_IRQHandler+0x4f4>
 80064e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f943 	bl	8006780 <UART_Transmit_IT>
    return;
 80064fa:	e014      	b.n	8006526 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00e      	beq.n	8006526 <HAL_UART_IRQHandler+0x51e>
 8006508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800650c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d008      	beq.n	8006526 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f983 	bl	8006820 <UART_EndTransmit_IT>
    return;
 800651a:	e004      	b.n	8006526 <HAL_UART_IRQHandler+0x51e>
    return;
 800651c:	bf00      	nop
 800651e:	e002      	b.n	8006526 <HAL_UART_IRQHandler+0x51e>
      return;
 8006520:	bf00      	nop
 8006522:	e000      	b.n	8006526 <HAL_UART_IRQHandler+0x51e>
      return;
 8006524:	bf00      	nop
  }
}
 8006526:	37e8      	adds	r7, #232	@ 0xe8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657c:	e03b      	b.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d037      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006586:	f7fb ff13 	bl	80023b0 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	6a3a      	ldr	r2, [r7, #32]
 8006592:	429a      	cmp	r2, r3
 8006594:	d302      	bcc.n	800659c <UART_WaitOnFlagUntilTimeout+0x30>
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e03a      	b.n	8006616 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d023      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b80      	cmp	r3, #128	@ 0x80
 80065b2:	d020      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b40      	cmp	r3, #64	@ 0x40
 80065b8:	d01d      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0308 	and.w	r3, r3, #8
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d116      	bne.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f857 	bl	8006692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2208      	movs	r2, #8
 80065e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e00f      	b.n	8006616 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4013      	ands	r3, r2
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	429a      	cmp	r2, r3
 8006604:	bf0c      	ite	eq
 8006606:	2301      	moveq	r3, #1
 8006608:	2300      	movne	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	429a      	cmp	r2, r3
 8006612:	d0b4      	beq.n	800657e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800661e:	b480      	push	{r7}
 8006620:	b085      	sub	sp, #20
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	4613      	mov	r3, r2
 800662a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	88fa      	ldrh	r2, [r7, #6]
 8006636:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	88fa      	ldrh	r2, [r7, #6]
 800663c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2222      	movs	r2, #34	@ 0x22
 8006648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006662:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695a      	ldr	r2, [r3, #20]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0220 	orr.w	r2, r2, #32
 8006682:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006692:	b480      	push	{r7}
 8006694:	b095      	sub	sp, #84	@ 0x54
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	330c      	adds	r3, #12
 80066b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80066bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e5      	bne.n	800669a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3314      	adds	r3, #20
 80066d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f023 0301 	bic.w	r3, r3, #1
 80066e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3314      	adds	r3, #20
 80066ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e5      	bne.n	80066ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006706:	2b01      	cmp	r3, #1
 8006708:	d119      	bne.n	800673e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	330c      	adds	r3, #12
 8006710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	60bb      	str	r3, [r7, #8]
   return(result);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f023 0310 	bic.w	r3, r3, #16
 8006720:	647b      	str	r3, [r7, #68]	@ 0x44
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	330c      	adds	r3, #12
 8006728:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800672a:	61ba      	str	r2, [r7, #24]
 800672c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6979      	ldr	r1, [r7, #20]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	613b      	str	r3, [r7, #16]
   return(result);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e5      	bne.n	800670a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800674c:	bf00      	nop
 800674e:	3754      	adds	r7, #84	@ 0x54
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7ff fee4 	bl	8006540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006778:	bf00      	nop
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b21      	cmp	r3, #33	@ 0x21
 8006792:	d13e      	bne.n	8006812 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800679c:	d114      	bne.n	80067c8 <UART_Transmit_IT+0x48>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d110      	bne.n	80067c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	1c9a      	adds	r2, r3, #2
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	621a      	str	r2, [r3, #32]
 80067c6:	e008      	b.n	80067da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	1c59      	adds	r1, r3, #1
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6211      	str	r1, [r2, #32]
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	4619      	mov	r1, r3
 80067e8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10f      	bne.n	800680e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800680c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	e000      	b.n	8006814 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006812:	2302      	movs	r3, #2
  }
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006836:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff fe73 	bl	800652c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08c      	sub	sp, #48	@ 0x30
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b22      	cmp	r3, #34	@ 0x22
 8006862:	f040 80ae 	bne.w	80069c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800686e:	d117      	bne.n	80068a0 <UART_Receive_IT+0x50>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d113      	bne.n	80068a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006878:	2300      	movs	r3, #0
 800687a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006880:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	b29b      	uxth	r3, r3
 800688a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688e:	b29a      	uxth	r2, r3
 8006890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006892:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006898:	1c9a      	adds	r2, r3, #2
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	629a      	str	r2, [r3, #40]	@ 0x28
 800689e:	e026      	b.n	80068ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068b2:	d007      	beq.n	80068c4 <UART_Receive_IT+0x74>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <UART_Receive_IT+0x82>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e008      	b.n	80068e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	4619      	mov	r1, r3
 80068fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d15d      	bne.n	80069be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0220 	bic.w	r2, r2, #32
 8006910:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006920:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006944:	2b01      	cmp	r3, #1
 8006946:	d135      	bne.n	80069b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	613b      	str	r3, [r7, #16]
   return(result);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f023 0310 	bic.w	r3, r3, #16
 8006964:	627b      	str	r3, [r7, #36]	@ 0x24
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	330c      	adds	r3, #12
 800696c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800696e:	623a      	str	r2, [r7, #32]
 8006970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	69f9      	ldr	r1, [r7, #28]
 8006974:	6a3a      	ldr	r2, [r7, #32]
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	61bb      	str	r3, [r7, #24]
   return(result);
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e5      	bne.n	800694e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b10      	cmp	r3, #16
 800698e:	d10a      	bne.n	80069a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff fdd1 	bl	8006554 <HAL_UARTEx_RxEventCallback>
 80069b2:	e002      	b.n	80069ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fa ffa7 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e002      	b.n	80069c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	e000      	b.n	80069c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069c2:	2302      	movs	r3, #2
  }
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3730      	adds	r7, #48	@ 0x30
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d0:	b0c0      	sub	sp, #256	@ 0x100
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e8:	68d9      	ldr	r1, [r3, #12]
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	ea40 0301 	orr.w	r3, r0, r1
 80069f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a24:	f021 010c 	bic.w	r1, r1, #12
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a32:	430b      	orrs	r3, r1
 8006a34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a46:	6999      	ldr	r1, [r3, #24]
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	ea40 0301 	orr.w	r3, r0, r1
 8006a52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b8f      	ldr	r3, [pc, #572]	@ (8006c98 <UART_SetConfig+0x2cc>)
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d005      	beq.n	8006a6c <UART_SetConfig+0xa0>
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	4b8d      	ldr	r3, [pc, #564]	@ (8006c9c <UART_SetConfig+0x2d0>)
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d104      	bne.n	8006a76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a6c:	f7fe f9d8 	bl	8004e20 <HAL_RCC_GetPCLK2Freq>
 8006a70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a74:	e003      	b.n	8006a7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a76:	f7fe f9bf 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 8006a7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a88:	f040 810c 	bne.w	8006ca4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a90:	2200      	movs	r2, #0
 8006a92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	462b      	mov	r3, r5
 8006aa2:	1891      	adds	r1, r2, r2
 8006aa4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006aa6:	415b      	adcs	r3, r3
 8006aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006aae:	4621      	mov	r1, r4
 8006ab0:	eb12 0801 	adds.w	r8, r2, r1
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	eb43 0901 	adc.w	r9, r3, r1
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ace:	4690      	mov	r8, r2
 8006ad0:	4699      	mov	r9, r3
 8006ad2:	4623      	mov	r3, r4
 8006ad4:	eb18 0303 	adds.w	r3, r8, r3
 8006ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006adc:	462b      	mov	r3, r5
 8006ade:	eb49 0303 	adc.w	r3, r9, r3
 8006ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006af2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006af6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006afa:	460b      	mov	r3, r1
 8006afc:	18db      	adds	r3, r3, r3
 8006afe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b00:	4613      	mov	r3, r2
 8006b02:	eb42 0303 	adc.w	r3, r2, r3
 8006b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b10:	f7fa f852 	bl	8000bb8 <__aeabi_uldivmod>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4b61      	ldr	r3, [pc, #388]	@ (8006ca0 <UART_SetConfig+0x2d4>)
 8006b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	011c      	lsls	r4, r3, #4
 8006b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b34:	4642      	mov	r2, r8
 8006b36:	464b      	mov	r3, r9
 8006b38:	1891      	adds	r1, r2, r2
 8006b3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b3c:	415b      	adcs	r3, r3
 8006b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b44:	4641      	mov	r1, r8
 8006b46:	eb12 0a01 	adds.w	sl, r2, r1
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b64:	4692      	mov	sl, r2
 8006b66:	469b      	mov	fp, r3
 8006b68:	4643      	mov	r3, r8
 8006b6a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b72:	464b      	mov	r3, r9
 8006b74:	eb4b 0303 	adc.w	r3, fp, r3
 8006b78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b90:	460b      	mov	r3, r1
 8006b92:	18db      	adds	r3, r3, r3
 8006b94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b96:	4613      	mov	r3, r2
 8006b98:	eb42 0303 	adc.w	r3, r2, r3
 8006b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ba2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ba6:	f7fa f807 	bl	8000bb8 <__aeabi_uldivmod>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4611      	mov	r1, r2
 8006bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca0 <UART_SetConfig+0x2d4>)
 8006bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	2264      	movs	r2, #100	@ 0x64
 8006bba:	fb02 f303 	mul.w	r3, r2, r3
 8006bbe:	1acb      	subs	r3, r1, r3
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006bc6:	4b36      	ldr	r3, [pc, #216]	@ (8006ca0 <UART_SetConfig+0x2d4>)
 8006bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8006bcc:	095b      	lsrs	r3, r3, #5
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bd4:	441c      	add	r4, r3
 8006bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006be0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006be4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006be8:	4642      	mov	r2, r8
 8006bea:	464b      	mov	r3, r9
 8006bec:	1891      	adds	r1, r2, r2
 8006bee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006bf0:	415b      	adcs	r3, r3
 8006bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bf8:	4641      	mov	r1, r8
 8006bfa:	1851      	adds	r1, r2, r1
 8006bfc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bfe:	4649      	mov	r1, r9
 8006c00:	414b      	adcs	r3, r1
 8006c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	f04f 0300 	mov.w	r3, #0
 8006c0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c10:	4659      	mov	r1, fp
 8006c12:	00cb      	lsls	r3, r1, #3
 8006c14:	4651      	mov	r1, sl
 8006c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c1a:	4651      	mov	r1, sl
 8006c1c:	00ca      	lsls	r2, r1, #3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	4619      	mov	r1, r3
 8006c22:	4603      	mov	r3, r0
 8006c24:	4642      	mov	r2, r8
 8006c26:	189b      	adds	r3, r3, r2
 8006c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	460a      	mov	r2, r1
 8006c30:	eb42 0303 	adc.w	r3, r2, r3
 8006c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	18db      	adds	r3, r3, r3
 8006c50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c52:	4613      	mov	r3, r2
 8006c54:	eb42 0303 	adc.w	r3, r2, r3
 8006c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c62:	f7f9 ffa9 	bl	8000bb8 <__aeabi_uldivmod>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <UART_SetConfig+0x2d4>)
 8006c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	2164      	movs	r1, #100	@ 0x64
 8006c74:	fb01 f303 	mul.w	r3, r1, r3
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	3332      	adds	r3, #50	@ 0x32
 8006c7e:	4a08      	ldr	r2, [pc, #32]	@ (8006ca0 <UART_SetConfig+0x2d4>)
 8006c80:	fba2 2303 	umull	r2, r3, r2, r3
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	f003 0207 	and.w	r2, r3, #7
 8006c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4422      	add	r2, r4
 8006c92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c94:	e106      	b.n	8006ea4 <UART_SetConfig+0x4d8>
 8006c96:	bf00      	nop
 8006c98:	40011000 	.word	0x40011000
 8006c9c:	40011400 	.word	0x40011400
 8006ca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006cb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006cb6:	4642      	mov	r2, r8
 8006cb8:	464b      	mov	r3, r9
 8006cba:	1891      	adds	r1, r2, r2
 8006cbc:	6239      	str	r1, [r7, #32]
 8006cbe:	415b      	adcs	r3, r3
 8006cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	1854      	adds	r4, r2, r1
 8006cca:	4649      	mov	r1, r9
 8006ccc:	eb43 0501 	adc.w	r5, r3, r1
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	00eb      	lsls	r3, r5, #3
 8006cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cde:	00e2      	lsls	r2, r4, #3
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	461d      	mov	r5, r3
 8006ce4:	4643      	mov	r3, r8
 8006ce6:	18e3      	adds	r3, r4, r3
 8006ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006cec:	464b      	mov	r3, r9
 8006cee:	eb45 0303 	adc.w	r3, r5, r3
 8006cf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d12:	4629      	mov	r1, r5
 8006d14:	008b      	lsls	r3, r1, #2
 8006d16:	4621      	mov	r1, r4
 8006d18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	008a      	lsls	r2, r1, #2
 8006d20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d24:	f7f9 ff48 	bl	8000bb8 <__aeabi_uldivmod>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4b60      	ldr	r3, [pc, #384]	@ (8006eb0 <UART_SetConfig+0x4e4>)
 8006d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	011c      	lsls	r4, r3, #4
 8006d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d48:	4642      	mov	r2, r8
 8006d4a:	464b      	mov	r3, r9
 8006d4c:	1891      	adds	r1, r2, r2
 8006d4e:	61b9      	str	r1, [r7, #24]
 8006d50:	415b      	adcs	r3, r3
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d58:	4641      	mov	r1, r8
 8006d5a:	1851      	adds	r1, r2, r1
 8006d5c:	6139      	str	r1, [r7, #16]
 8006d5e:	4649      	mov	r1, r9
 8006d60:	414b      	adcs	r3, r1
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d70:	4659      	mov	r1, fp
 8006d72:	00cb      	lsls	r3, r1, #3
 8006d74:	4651      	mov	r1, sl
 8006d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d7a:	4651      	mov	r1, sl
 8006d7c:	00ca      	lsls	r2, r1, #3
 8006d7e:	4610      	mov	r0, r2
 8006d80:	4619      	mov	r1, r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	4642      	mov	r2, r8
 8006d86:	189b      	adds	r3, r3, r2
 8006d88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	460a      	mov	r2, r1
 8006d90:	eb42 0303 	adc.w	r3, r2, r3
 8006d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006da2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006db0:	4649      	mov	r1, r9
 8006db2:	008b      	lsls	r3, r1, #2
 8006db4:	4641      	mov	r1, r8
 8006db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dba:	4641      	mov	r1, r8
 8006dbc:	008a      	lsls	r2, r1, #2
 8006dbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006dc2:	f7f9 fef9 	bl	8000bb8 <__aeabi_uldivmod>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	4b38      	ldr	r3, [pc, #224]	@ (8006eb0 <UART_SetConfig+0x4e4>)
 8006dce:	fba3 2301 	umull	r2, r3, r3, r1
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	2264      	movs	r2, #100	@ 0x64
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	1acb      	subs	r3, r1, r3
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	3332      	adds	r3, #50	@ 0x32
 8006de0:	4a33      	ldr	r2, [pc, #204]	@ (8006eb0 <UART_SetConfig+0x4e4>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dec:	441c      	add	r4, r3
 8006dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006df2:	2200      	movs	r2, #0
 8006df4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006df6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006df8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006dfc:	4642      	mov	r2, r8
 8006dfe:	464b      	mov	r3, r9
 8006e00:	1891      	adds	r1, r2, r2
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	415b      	adcs	r3, r3
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e0c:	4641      	mov	r1, r8
 8006e0e:	1851      	adds	r1, r2, r1
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	4649      	mov	r1, r9
 8006e14:	414b      	adcs	r3, r1
 8006e16:	607b      	str	r3, [r7, #4]
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e24:	4659      	mov	r1, fp
 8006e26:	00cb      	lsls	r3, r1, #3
 8006e28:	4651      	mov	r1, sl
 8006e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e2e:	4651      	mov	r1, sl
 8006e30:	00ca      	lsls	r2, r1, #3
 8006e32:	4610      	mov	r0, r2
 8006e34:	4619      	mov	r1, r3
 8006e36:	4603      	mov	r3, r0
 8006e38:	4642      	mov	r2, r8
 8006e3a:	189b      	adds	r3, r3, r2
 8006e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e3e:	464b      	mov	r3, r9
 8006e40:	460a      	mov	r2, r1
 8006e42:	eb42 0303 	adc.w	r3, r2, r3
 8006e46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e52:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e60:	4649      	mov	r1, r9
 8006e62:	008b      	lsls	r3, r1, #2
 8006e64:	4641      	mov	r1, r8
 8006e66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	008a      	lsls	r2, r1, #2
 8006e6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e72:	f7f9 fea1 	bl	8000bb8 <__aeabi_uldivmod>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb0 <UART_SetConfig+0x4e4>)
 8006e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	2164      	movs	r1, #100	@ 0x64
 8006e84:	fb01 f303 	mul.w	r3, r1, r3
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	3332      	adds	r3, #50	@ 0x32
 8006e8e:	4a08      	ldr	r2, [pc, #32]	@ (8006eb0 <UART_SetConfig+0x4e4>)
 8006e90:	fba2 2303 	umull	r2, r3, r2, r3
 8006e94:	095b      	lsrs	r3, r3, #5
 8006e96:	f003 020f 	and.w	r2, r3, #15
 8006e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4422      	add	r2, r4
 8006ea2:	609a      	str	r2, [r3, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eb0:	51eb851f 	.word	0x51eb851f

08006eb4 <__cvt>:
 8006eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	ec57 6b10 	vmov	r6, r7, d0
 8006ebc:	2f00      	cmp	r7, #0
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	bfbb      	ittet	lt
 8006ec6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006eca:	461f      	movlt	r7, r3
 8006ecc:	2300      	movge	r3, #0
 8006ece:	232d      	movlt	r3, #45	@ 0x2d
 8006ed0:	700b      	strb	r3, [r1, #0]
 8006ed2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ed4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006ed8:	4691      	mov	r9, r2
 8006eda:	f023 0820 	bic.w	r8, r3, #32
 8006ede:	bfbc      	itt	lt
 8006ee0:	4632      	movlt	r2, r6
 8006ee2:	4616      	movlt	r6, r2
 8006ee4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ee8:	d005      	beq.n	8006ef6 <__cvt+0x42>
 8006eea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006eee:	d100      	bne.n	8006ef2 <__cvt+0x3e>
 8006ef0:	3401      	adds	r4, #1
 8006ef2:	2102      	movs	r1, #2
 8006ef4:	e000      	b.n	8006ef8 <__cvt+0x44>
 8006ef6:	2103      	movs	r1, #3
 8006ef8:	ab03      	add	r3, sp, #12
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	ab02      	add	r3, sp, #8
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	ec47 6b10 	vmov	d0, r6, r7
 8006f04:	4653      	mov	r3, sl
 8006f06:	4622      	mov	r2, r4
 8006f08:	f000 ff5e 	bl	8007dc8 <_dtoa_r>
 8006f0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f10:	4605      	mov	r5, r0
 8006f12:	d119      	bne.n	8006f48 <__cvt+0x94>
 8006f14:	f019 0f01 	tst.w	r9, #1
 8006f18:	d00e      	beq.n	8006f38 <__cvt+0x84>
 8006f1a:	eb00 0904 	add.w	r9, r0, r4
 8006f1e:	2200      	movs	r2, #0
 8006f20:	2300      	movs	r3, #0
 8006f22:	4630      	mov	r0, r6
 8006f24:	4639      	mov	r1, r7
 8006f26:	f7f9 fdd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f2a:	b108      	cbz	r0, 8006f30 <__cvt+0x7c>
 8006f2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f30:	2230      	movs	r2, #48	@ 0x30
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	454b      	cmp	r3, r9
 8006f36:	d31e      	bcc.n	8006f76 <__cvt+0xc2>
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f3c:	1b5b      	subs	r3, r3, r5
 8006f3e:	4628      	mov	r0, r5
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	b004      	add	sp, #16
 8006f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f4c:	eb00 0904 	add.w	r9, r0, r4
 8006f50:	d1e5      	bne.n	8006f1e <__cvt+0x6a>
 8006f52:	7803      	ldrb	r3, [r0, #0]
 8006f54:	2b30      	cmp	r3, #48	@ 0x30
 8006f56:	d10a      	bne.n	8006f6e <__cvt+0xba>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	4639      	mov	r1, r7
 8006f60:	f7f9 fdba 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f64:	b918      	cbnz	r0, 8006f6e <__cvt+0xba>
 8006f66:	f1c4 0401 	rsb	r4, r4, #1
 8006f6a:	f8ca 4000 	str.w	r4, [sl]
 8006f6e:	f8da 3000 	ldr.w	r3, [sl]
 8006f72:	4499      	add	r9, r3
 8006f74:	e7d3      	b.n	8006f1e <__cvt+0x6a>
 8006f76:	1c59      	adds	r1, r3, #1
 8006f78:	9103      	str	r1, [sp, #12]
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e7d9      	b.n	8006f32 <__cvt+0x7e>

08006f7e <__exponent>:
 8006f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f80:	2900      	cmp	r1, #0
 8006f82:	bfba      	itte	lt
 8006f84:	4249      	neglt	r1, r1
 8006f86:	232d      	movlt	r3, #45	@ 0x2d
 8006f88:	232b      	movge	r3, #43	@ 0x2b
 8006f8a:	2909      	cmp	r1, #9
 8006f8c:	7002      	strb	r2, [r0, #0]
 8006f8e:	7043      	strb	r3, [r0, #1]
 8006f90:	dd29      	ble.n	8006fe6 <__exponent+0x68>
 8006f92:	f10d 0307 	add.w	r3, sp, #7
 8006f96:	461d      	mov	r5, r3
 8006f98:	270a      	movs	r7, #10
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006fa0:	fb07 1416 	mls	r4, r7, r6, r1
 8006fa4:	3430      	adds	r4, #48	@ 0x30
 8006fa6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006faa:	460c      	mov	r4, r1
 8006fac:	2c63      	cmp	r4, #99	@ 0x63
 8006fae:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	dcf1      	bgt.n	8006f9a <__exponent+0x1c>
 8006fb6:	3130      	adds	r1, #48	@ 0x30
 8006fb8:	1e94      	subs	r4, r2, #2
 8006fba:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006fbe:	1c41      	adds	r1, r0, #1
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	42ab      	cmp	r3, r5
 8006fc4:	d30a      	bcc.n	8006fdc <__exponent+0x5e>
 8006fc6:	f10d 0309 	add.w	r3, sp, #9
 8006fca:	1a9b      	subs	r3, r3, r2
 8006fcc:	42ac      	cmp	r4, r5
 8006fce:	bf88      	it	hi
 8006fd0:	2300      	movhi	r3, #0
 8006fd2:	3302      	adds	r3, #2
 8006fd4:	4403      	add	r3, r0
 8006fd6:	1a18      	subs	r0, r3, r0
 8006fd8:	b003      	add	sp, #12
 8006fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fdc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006fe0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006fe4:	e7ed      	b.n	8006fc2 <__exponent+0x44>
 8006fe6:	2330      	movs	r3, #48	@ 0x30
 8006fe8:	3130      	adds	r1, #48	@ 0x30
 8006fea:	7083      	strb	r3, [r0, #2]
 8006fec:	70c1      	strb	r1, [r0, #3]
 8006fee:	1d03      	adds	r3, r0, #4
 8006ff0:	e7f1      	b.n	8006fd6 <__exponent+0x58>
	...

08006ff4 <_printf_float>:
 8006ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff8:	b08d      	sub	sp, #52	@ 0x34
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007000:	4616      	mov	r6, r2
 8007002:	461f      	mov	r7, r3
 8007004:	4605      	mov	r5, r0
 8007006:	f000 fddf 	bl	8007bc8 <_localeconv_r>
 800700a:	6803      	ldr	r3, [r0, #0]
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	4618      	mov	r0, r3
 8007010:	f7f9 f936 	bl	8000280 <strlen>
 8007014:	2300      	movs	r3, #0
 8007016:	930a      	str	r3, [sp, #40]	@ 0x28
 8007018:	f8d8 3000 	ldr.w	r3, [r8]
 800701c:	9005      	str	r0, [sp, #20]
 800701e:	3307      	adds	r3, #7
 8007020:	f023 0307 	bic.w	r3, r3, #7
 8007024:	f103 0208 	add.w	r2, r3, #8
 8007028:	f894 a018 	ldrb.w	sl, [r4, #24]
 800702c:	f8d4 b000 	ldr.w	fp, [r4]
 8007030:	f8c8 2000 	str.w	r2, [r8]
 8007034:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007038:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800703c:	9307      	str	r3, [sp, #28]
 800703e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007042:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800704a:	4b9c      	ldr	r3, [pc, #624]	@ (80072bc <_printf_float+0x2c8>)
 800704c:	f04f 32ff 	mov.w	r2, #4294967295
 8007050:	f7f9 fd74 	bl	8000b3c <__aeabi_dcmpun>
 8007054:	bb70      	cbnz	r0, 80070b4 <_printf_float+0xc0>
 8007056:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800705a:	4b98      	ldr	r3, [pc, #608]	@ (80072bc <_printf_float+0x2c8>)
 800705c:	f04f 32ff 	mov.w	r2, #4294967295
 8007060:	f7f9 fd4e 	bl	8000b00 <__aeabi_dcmple>
 8007064:	bb30      	cbnz	r0, 80070b4 <_printf_float+0xc0>
 8007066:	2200      	movs	r2, #0
 8007068:	2300      	movs	r3, #0
 800706a:	4640      	mov	r0, r8
 800706c:	4649      	mov	r1, r9
 800706e:	f7f9 fd3d 	bl	8000aec <__aeabi_dcmplt>
 8007072:	b110      	cbz	r0, 800707a <_printf_float+0x86>
 8007074:	232d      	movs	r3, #45	@ 0x2d
 8007076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800707a:	4a91      	ldr	r2, [pc, #580]	@ (80072c0 <_printf_float+0x2cc>)
 800707c:	4b91      	ldr	r3, [pc, #580]	@ (80072c4 <_printf_float+0x2d0>)
 800707e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007082:	bf94      	ite	ls
 8007084:	4690      	movls	r8, r2
 8007086:	4698      	movhi	r8, r3
 8007088:	2303      	movs	r3, #3
 800708a:	6123      	str	r3, [r4, #16]
 800708c:	f02b 0304 	bic.w	r3, fp, #4
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	f04f 0900 	mov.w	r9, #0
 8007096:	9700      	str	r7, [sp, #0]
 8007098:	4633      	mov	r3, r6
 800709a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800709c:	4621      	mov	r1, r4
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 f9d2 	bl	8007448 <_printf_common>
 80070a4:	3001      	adds	r0, #1
 80070a6:	f040 808d 	bne.w	80071c4 <_printf_float+0x1d0>
 80070aa:	f04f 30ff 	mov.w	r0, #4294967295
 80070ae:	b00d      	add	sp, #52	@ 0x34
 80070b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b4:	4642      	mov	r2, r8
 80070b6:	464b      	mov	r3, r9
 80070b8:	4640      	mov	r0, r8
 80070ba:	4649      	mov	r1, r9
 80070bc:	f7f9 fd3e 	bl	8000b3c <__aeabi_dcmpun>
 80070c0:	b140      	cbz	r0, 80070d4 <_printf_float+0xe0>
 80070c2:	464b      	mov	r3, r9
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bfbc      	itt	lt
 80070c8:	232d      	movlt	r3, #45	@ 0x2d
 80070ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80070ce:	4a7e      	ldr	r2, [pc, #504]	@ (80072c8 <_printf_float+0x2d4>)
 80070d0:	4b7e      	ldr	r3, [pc, #504]	@ (80072cc <_printf_float+0x2d8>)
 80070d2:	e7d4      	b.n	800707e <_printf_float+0x8a>
 80070d4:	6863      	ldr	r3, [r4, #4]
 80070d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80070da:	9206      	str	r2, [sp, #24]
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	d13b      	bne.n	8007158 <_printf_float+0x164>
 80070e0:	2306      	movs	r3, #6
 80070e2:	6063      	str	r3, [r4, #4]
 80070e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80070e8:	2300      	movs	r3, #0
 80070ea:	6022      	str	r2, [r4, #0]
 80070ec:	9303      	str	r3, [sp, #12]
 80070ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80070f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80070f4:	ab09      	add	r3, sp, #36	@ 0x24
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	6861      	ldr	r1, [r4, #4]
 80070fa:	ec49 8b10 	vmov	d0, r8, r9
 80070fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007102:	4628      	mov	r0, r5
 8007104:	f7ff fed6 	bl	8006eb4 <__cvt>
 8007108:	9b06      	ldr	r3, [sp, #24]
 800710a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800710c:	2b47      	cmp	r3, #71	@ 0x47
 800710e:	4680      	mov	r8, r0
 8007110:	d129      	bne.n	8007166 <_printf_float+0x172>
 8007112:	1cc8      	adds	r0, r1, #3
 8007114:	db02      	blt.n	800711c <_printf_float+0x128>
 8007116:	6863      	ldr	r3, [r4, #4]
 8007118:	4299      	cmp	r1, r3
 800711a:	dd41      	ble.n	80071a0 <_printf_float+0x1ac>
 800711c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007120:	fa5f fa8a 	uxtb.w	sl, sl
 8007124:	3901      	subs	r1, #1
 8007126:	4652      	mov	r2, sl
 8007128:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800712c:	9109      	str	r1, [sp, #36]	@ 0x24
 800712e:	f7ff ff26 	bl	8006f7e <__exponent>
 8007132:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007134:	1813      	adds	r3, r2, r0
 8007136:	2a01      	cmp	r2, #1
 8007138:	4681      	mov	r9, r0
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	dc02      	bgt.n	8007144 <_printf_float+0x150>
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	07d2      	lsls	r2, r2, #31
 8007142:	d501      	bpl.n	8007148 <_printf_float+0x154>
 8007144:	3301      	adds	r3, #1
 8007146:	6123      	str	r3, [r4, #16]
 8007148:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0a2      	beq.n	8007096 <_printf_float+0xa2>
 8007150:	232d      	movs	r3, #45	@ 0x2d
 8007152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007156:	e79e      	b.n	8007096 <_printf_float+0xa2>
 8007158:	9a06      	ldr	r2, [sp, #24]
 800715a:	2a47      	cmp	r2, #71	@ 0x47
 800715c:	d1c2      	bne.n	80070e4 <_printf_float+0xf0>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1c0      	bne.n	80070e4 <_printf_float+0xf0>
 8007162:	2301      	movs	r3, #1
 8007164:	e7bd      	b.n	80070e2 <_printf_float+0xee>
 8007166:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800716a:	d9db      	bls.n	8007124 <_printf_float+0x130>
 800716c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007170:	d118      	bne.n	80071a4 <_printf_float+0x1b0>
 8007172:	2900      	cmp	r1, #0
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	dd0b      	ble.n	8007190 <_printf_float+0x19c>
 8007178:	6121      	str	r1, [r4, #16]
 800717a:	b913      	cbnz	r3, 8007182 <_printf_float+0x18e>
 800717c:	6822      	ldr	r2, [r4, #0]
 800717e:	07d0      	lsls	r0, r2, #31
 8007180:	d502      	bpl.n	8007188 <_printf_float+0x194>
 8007182:	3301      	adds	r3, #1
 8007184:	440b      	add	r3, r1
 8007186:	6123      	str	r3, [r4, #16]
 8007188:	65a1      	str	r1, [r4, #88]	@ 0x58
 800718a:	f04f 0900 	mov.w	r9, #0
 800718e:	e7db      	b.n	8007148 <_printf_float+0x154>
 8007190:	b913      	cbnz	r3, 8007198 <_printf_float+0x1a4>
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	07d2      	lsls	r2, r2, #31
 8007196:	d501      	bpl.n	800719c <_printf_float+0x1a8>
 8007198:	3302      	adds	r3, #2
 800719a:	e7f4      	b.n	8007186 <_printf_float+0x192>
 800719c:	2301      	movs	r3, #1
 800719e:	e7f2      	b.n	8007186 <_printf_float+0x192>
 80071a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80071a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071a6:	4299      	cmp	r1, r3
 80071a8:	db05      	blt.n	80071b6 <_printf_float+0x1c2>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	6121      	str	r1, [r4, #16]
 80071ae:	07d8      	lsls	r0, r3, #31
 80071b0:	d5ea      	bpl.n	8007188 <_printf_float+0x194>
 80071b2:	1c4b      	adds	r3, r1, #1
 80071b4:	e7e7      	b.n	8007186 <_printf_float+0x192>
 80071b6:	2900      	cmp	r1, #0
 80071b8:	bfd4      	ite	le
 80071ba:	f1c1 0202 	rsble	r2, r1, #2
 80071be:	2201      	movgt	r2, #1
 80071c0:	4413      	add	r3, r2
 80071c2:	e7e0      	b.n	8007186 <_printf_float+0x192>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	055a      	lsls	r2, r3, #21
 80071c8:	d407      	bmi.n	80071da <_printf_float+0x1e6>
 80071ca:	6923      	ldr	r3, [r4, #16]
 80071cc:	4642      	mov	r2, r8
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	d12b      	bne.n	8007230 <_printf_float+0x23c>
 80071d8:	e767      	b.n	80070aa <_printf_float+0xb6>
 80071da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071de:	f240 80dd 	bls.w	800739c <_printf_float+0x3a8>
 80071e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80071e6:	2200      	movs	r2, #0
 80071e8:	2300      	movs	r3, #0
 80071ea:	f7f9 fc75 	bl	8000ad8 <__aeabi_dcmpeq>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d033      	beq.n	800725a <_printf_float+0x266>
 80071f2:	4a37      	ldr	r2, [pc, #220]	@ (80072d0 <_printf_float+0x2dc>)
 80071f4:	2301      	movs	r3, #1
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	47b8      	blx	r7
 80071fc:	3001      	adds	r0, #1
 80071fe:	f43f af54 	beq.w	80070aa <_printf_float+0xb6>
 8007202:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007206:	4543      	cmp	r3, r8
 8007208:	db02      	blt.n	8007210 <_printf_float+0x21c>
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	07d8      	lsls	r0, r3, #31
 800720e:	d50f      	bpl.n	8007230 <_printf_float+0x23c>
 8007210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	f43f af45 	beq.w	80070aa <_printf_float+0xb6>
 8007220:	f04f 0900 	mov.w	r9, #0
 8007224:	f108 38ff 	add.w	r8, r8, #4294967295
 8007228:	f104 0a1a 	add.w	sl, r4, #26
 800722c:	45c8      	cmp	r8, r9
 800722e:	dc09      	bgt.n	8007244 <_printf_float+0x250>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	079b      	lsls	r3, r3, #30
 8007234:	f100 8103 	bmi.w	800743e <_printf_float+0x44a>
 8007238:	68e0      	ldr	r0, [r4, #12]
 800723a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800723c:	4298      	cmp	r0, r3
 800723e:	bfb8      	it	lt
 8007240:	4618      	movlt	r0, r3
 8007242:	e734      	b.n	80070ae <_printf_float+0xba>
 8007244:	2301      	movs	r3, #1
 8007246:	4652      	mov	r2, sl
 8007248:	4631      	mov	r1, r6
 800724a:	4628      	mov	r0, r5
 800724c:	47b8      	blx	r7
 800724e:	3001      	adds	r0, #1
 8007250:	f43f af2b 	beq.w	80070aa <_printf_float+0xb6>
 8007254:	f109 0901 	add.w	r9, r9, #1
 8007258:	e7e8      	b.n	800722c <_printf_float+0x238>
 800725a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	dc39      	bgt.n	80072d4 <_printf_float+0x2e0>
 8007260:	4a1b      	ldr	r2, [pc, #108]	@ (80072d0 <_printf_float+0x2dc>)
 8007262:	2301      	movs	r3, #1
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	f43f af1d 	beq.w	80070aa <_printf_float+0xb6>
 8007270:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007274:	ea59 0303 	orrs.w	r3, r9, r3
 8007278:	d102      	bne.n	8007280 <_printf_float+0x28c>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	07d9      	lsls	r1, r3, #31
 800727e:	d5d7      	bpl.n	8007230 <_printf_float+0x23c>
 8007280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	47b8      	blx	r7
 800728a:	3001      	adds	r0, #1
 800728c:	f43f af0d 	beq.w	80070aa <_printf_float+0xb6>
 8007290:	f04f 0a00 	mov.w	sl, #0
 8007294:	f104 0b1a 	add.w	fp, r4, #26
 8007298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800729a:	425b      	negs	r3, r3
 800729c:	4553      	cmp	r3, sl
 800729e:	dc01      	bgt.n	80072a4 <_printf_float+0x2b0>
 80072a0:	464b      	mov	r3, r9
 80072a2:	e793      	b.n	80071cc <_printf_float+0x1d8>
 80072a4:	2301      	movs	r3, #1
 80072a6:	465a      	mov	r2, fp
 80072a8:	4631      	mov	r1, r6
 80072aa:	4628      	mov	r0, r5
 80072ac:	47b8      	blx	r7
 80072ae:	3001      	adds	r0, #1
 80072b0:	f43f aefb 	beq.w	80070aa <_printf_float+0xb6>
 80072b4:	f10a 0a01 	add.w	sl, sl, #1
 80072b8:	e7ee      	b.n	8007298 <_printf_float+0x2a4>
 80072ba:	bf00      	nop
 80072bc:	7fefffff 	.word	0x7fefffff
 80072c0:	08009cec 	.word	0x08009cec
 80072c4:	08009cf0 	.word	0x08009cf0
 80072c8:	08009cf4 	.word	0x08009cf4
 80072cc:	08009cf8 	.word	0x08009cf8
 80072d0:	08009cfc 	.word	0x08009cfc
 80072d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072da:	4553      	cmp	r3, sl
 80072dc:	bfa8      	it	ge
 80072de:	4653      	movge	r3, sl
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	4699      	mov	r9, r3
 80072e4:	dc36      	bgt.n	8007354 <_printf_float+0x360>
 80072e6:	f04f 0b00 	mov.w	fp, #0
 80072ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072ee:	f104 021a 	add.w	r2, r4, #26
 80072f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072f4:	9306      	str	r3, [sp, #24]
 80072f6:	eba3 0309 	sub.w	r3, r3, r9
 80072fa:	455b      	cmp	r3, fp
 80072fc:	dc31      	bgt.n	8007362 <_printf_float+0x36e>
 80072fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007300:	459a      	cmp	sl, r3
 8007302:	dc3a      	bgt.n	800737a <_printf_float+0x386>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	07da      	lsls	r2, r3, #31
 8007308:	d437      	bmi.n	800737a <_printf_float+0x386>
 800730a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730c:	ebaa 0903 	sub.w	r9, sl, r3
 8007310:	9b06      	ldr	r3, [sp, #24]
 8007312:	ebaa 0303 	sub.w	r3, sl, r3
 8007316:	4599      	cmp	r9, r3
 8007318:	bfa8      	it	ge
 800731a:	4699      	movge	r9, r3
 800731c:	f1b9 0f00 	cmp.w	r9, #0
 8007320:	dc33      	bgt.n	800738a <_printf_float+0x396>
 8007322:	f04f 0800 	mov.w	r8, #0
 8007326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800732a:	f104 0b1a 	add.w	fp, r4, #26
 800732e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007330:	ebaa 0303 	sub.w	r3, sl, r3
 8007334:	eba3 0309 	sub.w	r3, r3, r9
 8007338:	4543      	cmp	r3, r8
 800733a:	f77f af79 	ble.w	8007230 <_printf_float+0x23c>
 800733e:	2301      	movs	r3, #1
 8007340:	465a      	mov	r2, fp
 8007342:	4631      	mov	r1, r6
 8007344:	4628      	mov	r0, r5
 8007346:	47b8      	blx	r7
 8007348:	3001      	adds	r0, #1
 800734a:	f43f aeae 	beq.w	80070aa <_printf_float+0xb6>
 800734e:	f108 0801 	add.w	r8, r8, #1
 8007352:	e7ec      	b.n	800732e <_printf_float+0x33a>
 8007354:	4642      	mov	r2, r8
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	47b8      	blx	r7
 800735c:	3001      	adds	r0, #1
 800735e:	d1c2      	bne.n	80072e6 <_printf_float+0x2f2>
 8007360:	e6a3      	b.n	80070aa <_printf_float+0xb6>
 8007362:	2301      	movs	r3, #1
 8007364:	4631      	mov	r1, r6
 8007366:	4628      	mov	r0, r5
 8007368:	9206      	str	r2, [sp, #24]
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	f43f ae9c 	beq.w	80070aa <_printf_float+0xb6>
 8007372:	9a06      	ldr	r2, [sp, #24]
 8007374:	f10b 0b01 	add.w	fp, fp, #1
 8007378:	e7bb      	b.n	80072f2 <_printf_float+0x2fe>
 800737a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800737e:	4631      	mov	r1, r6
 8007380:	4628      	mov	r0, r5
 8007382:	47b8      	blx	r7
 8007384:	3001      	adds	r0, #1
 8007386:	d1c0      	bne.n	800730a <_printf_float+0x316>
 8007388:	e68f      	b.n	80070aa <_printf_float+0xb6>
 800738a:	9a06      	ldr	r2, [sp, #24]
 800738c:	464b      	mov	r3, r9
 800738e:	4442      	add	r2, r8
 8007390:	4631      	mov	r1, r6
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	d1c3      	bne.n	8007322 <_printf_float+0x32e>
 800739a:	e686      	b.n	80070aa <_printf_float+0xb6>
 800739c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073a0:	f1ba 0f01 	cmp.w	sl, #1
 80073a4:	dc01      	bgt.n	80073aa <_printf_float+0x3b6>
 80073a6:	07db      	lsls	r3, r3, #31
 80073a8:	d536      	bpl.n	8007418 <_printf_float+0x424>
 80073aa:	2301      	movs	r3, #1
 80073ac:	4642      	mov	r2, r8
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b8      	blx	r7
 80073b4:	3001      	adds	r0, #1
 80073b6:	f43f ae78 	beq.w	80070aa <_printf_float+0xb6>
 80073ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073be:	4631      	mov	r1, r6
 80073c0:	4628      	mov	r0, r5
 80073c2:	47b8      	blx	r7
 80073c4:	3001      	adds	r0, #1
 80073c6:	f43f ae70 	beq.w	80070aa <_printf_float+0xb6>
 80073ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073ce:	2200      	movs	r2, #0
 80073d0:	2300      	movs	r3, #0
 80073d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073d6:	f7f9 fb7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80073da:	b9c0      	cbnz	r0, 800740e <_printf_float+0x41a>
 80073dc:	4653      	mov	r3, sl
 80073de:	f108 0201 	add.w	r2, r8, #1
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	d10c      	bne.n	8007406 <_printf_float+0x412>
 80073ec:	e65d      	b.n	80070aa <_printf_float+0xb6>
 80073ee:	2301      	movs	r3, #1
 80073f0:	465a      	mov	r2, fp
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b8      	blx	r7
 80073f8:	3001      	adds	r0, #1
 80073fa:	f43f ae56 	beq.w	80070aa <_printf_float+0xb6>
 80073fe:	f108 0801 	add.w	r8, r8, #1
 8007402:	45d0      	cmp	r8, sl
 8007404:	dbf3      	blt.n	80073ee <_printf_float+0x3fa>
 8007406:	464b      	mov	r3, r9
 8007408:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800740c:	e6df      	b.n	80071ce <_printf_float+0x1da>
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	f104 0b1a 	add.w	fp, r4, #26
 8007416:	e7f4      	b.n	8007402 <_printf_float+0x40e>
 8007418:	2301      	movs	r3, #1
 800741a:	4642      	mov	r2, r8
 800741c:	e7e1      	b.n	80073e2 <_printf_float+0x3ee>
 800741e:	2301      	movs	r3, #1
 8007420:	464a      	mov	r2, r9
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	47b8      	blx	r7
 8007428:	3001      	adds	r0, #1
 800742a:	f43f ae3e 	beq.w	80070aa <_printf_float+0xb6>
 800742e:	f108 0801 	add.w	r8, r8, #1
 8007432:	68e3      	ldr	r3, [r4, #12]
 8007434:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007436:	1a5b      	subs	r3, r3, r1
 8007438:	4543      	cmp	r3, r8
 800743a:	dcf0      	bgt.n	800741e <_printf_float+0x42a>
 800743c:	e6fc      	b.n	8007238 <_printf_float+0x244>
 800743e:	f04f 0800 	mov.w	r8, #0
 8007442:	f104 0919 	add.w	r9, r4, #25
 8007446:	e7f4      	b.n	8007432 <_printf_float+0x43e>

08007448 <_printf_common>:
 8007448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800744c:	4616      	mov	r6, r2
 800744e:	4698      	mov	r8, r3
 8007450:	688a      	ldr	r2, [r1, #8]
 8007452:	690b      	ldr	r3, [r1, #16]
 8007454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007458:	4293      	cmp	r3, r2
 800745a:	bfb8      	it	lt
 800745c:	4613      	movlt	r3, r2
 800745e:	6033      	str	r3, [r6, #0]
 8007460:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007464:	4607      	mov	r7, r0
 8007466:	460c      	mov	r4, r1
 8007468:	b10a      	cbz	r2, 800746e <_printf_common+0x26>
 800746a:	3301      	adds	r3, #1
 800746c:	6033      	str	r3, [r6, #0]
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	0699      	lsls	r1, r3, #26
 8007472:	bf42      	ittt	mi
 8007474:	6833      	ldrmi	r3, [r6, #0]
 8007476:	3302      	addmi	r3, #2
 8007478:	6033      	strmi	r3, [r6, #0]
 800747a:	6825      	ldr	r5, [r4, #0]
 800747c:	f015 0506 	ands.w	r5, r5, #6
 8007480:	d106      	bne.n	8007490 <_printf_common+0x48>
 8007482:	f104 0a19 	add.w	sl, r4, #25
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	6832      	ldr	r2, [r6, #0]
 800748a:	1a9b      	subs	r3, r3, r2
 800748c:	42ab      	cmp	r3, r5
 800748e:	dc26      	bgt.n	80074de <_printf_common+0x96>
 8007490:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	3b00      	subs	r3, #0
 8007498:	bf18      	it	ne
 800749a:	2301      	movne	r3, #1
 800749c:	0692      	lsls	r2, r2, #26
 800749e:	d42b      	bmi.n	80074f8 <_printf_common+0xb0>
 80074a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074a4:	4641      	mov	r1, r8
 80074a6:	4638      	mov	r0, r7
 80074a8:	47c8      	blx	r9
 80074aa:	3001      	adds	r0, #1
 80074ac:	d01e      	beq.n	80074ec <_printf_common+0xa4>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	6922      	ldr	r2, [r4, #16]
 80074b2:	f003 0306 	and.w	r3, r3, #6
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	bf02      	ittt	eq
 80074ba:	68e5      	ldreq	r5, [r4, #12]
 80074bc:	6833      	ldreq	r3, [r6, #0]
 80074be:	1aed      	subeq	r5, r5, r3
 80074c0:	68a3      	ldr	r3, [r4, #8]
 80074c2:	bf0c      	ite	eq
 80074c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c8:	2500      	movne	r5, #0
 80074ca:	4293      	cmp	r3, r2
 80074cc:	bfc4      	itt	gt
 80074ce:	1a9b      	subgt	r3, r3, r2
 80074d0:	18ed      	addgt	r5, r5, r3
 80074d2:	2600      	movs	r6, #0
 80074d4:	341a      	adds	r4, #26
 80074d6:	42b5      	cmp	r5, r6
 80074d8:	d11a      	bne.n	8007510 <_printf_common+0xc8>
 80074da:	2000      	movs	r0, #0
 80074dc:	e008      	b.n	80074f0 <_printf_common+0xa8>
 80074de:	2301      	movs	r3, #1
 80074e0:	4652      	mov	r2, sl
 80074e2:	4641      	mov	r1, r8
 80074e4:	4638      	mov	r0, r7
 80074e6:	47c8      	blx	r9
 80074e8:	3001      	adds	r0, #1
 80074ea:	d103      	bne.n	80074f4 <_printf_common+0xac>
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295
 80074f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f4:	3501      	adds	r5, #1
 80074f6:	e7c6      	b.n	8007486 <_printf_common+0x3e>
 80074f8:	18e1      	adds	r1, r4, r3
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	2030      	movs	r0, #48	@ 0x30
 80074fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007502:	4422      	add	r2, r4
 8007504:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007508:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800750c:	3302      	adds	r3, #2
 800750e:	e7c7      	b.n	80074a0 <_printf_common+0x58>
 8007510:	2301      	movs	r3, #1
 8007512:	4622      	mov	r2, r4
 8007514:	4641      	mov	r1, r8
 8007516:	4638      	mov	r0, r7
 8007518:	47c8      	blx	r9
 800751a:	3001      	adds	r0, #1
 800751c:	d0e6      	beq.n	80074ec <_printf_common+0xa4>
 800751e:	3601      	adds	r6, #1
 8007520:	e7d9      	b.n	80074d6 <_printf_common+0x8e>
	...

08007524 <_printf_i>:
 8007524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007528:	7e0f      	ldrb	r7, [r1, #24]
 800752a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800752c:	2f78      	cmp	r7, #120	@ 0x78
 800752e:	4691      	mov	r9, r2
 8007530:	4680      	mov	r8, r0
 8007532:	460c      	mov	r4, r1
 8007534:	469a      	mov	sl, r3
 8007536:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800753a:	d807      	bhi.n	800754c <_printf_i+0x28>
 800753c:	2f62      	cmp	r7, #98	@ 0x62
 800753e:	d80a      	bhi.n	8007556 <_printf_i+0x32>
 8007540:	2f00      	cmp	r7, #0
 8007542:	f000 80d2 	beq.w	80076ea <_printf_i+0x1c6>
 8007546:	2f58      	cmp	r7, #88	@ 0x58
 8007548:	f000 80b9 	beq.w	80076be <_printf_i+0x19a>
 800754c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007550:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007554:	e03a      	b.n	80075cc <_printf_i+0xa8>
 8007556:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800755a:	2b15      	cmp	r3, #21
 800755c:	d8f6      	bhi.n	800754c <_printf_i+0x28>
 800755e:	a101      	add	r1, pc, #4	@ (adr r1, 8007564 <_printf_i+0x40>)
 8007560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007564:	080075bd 	.word	0x080075bd
 8007568:	080075d1 	.word	0x080075d1
 800756c:	0800754d 	.word	0x0800754d
 8007570:	0800754d 	.word	0x0800754d
 8007574:	0800754d 	.word	0x0800754d
 8007578:	0800754d 	.word	0x0800754d
 800757c:	080075d1 	.word	0x080075d1
 8007580:	0800754d 	.word	0x0800754d
 8007584:	0800754d 	.word	0x0800754d
 8007588:	0800754d 	.word	0x0800754d
 800758c:	0800754d 	.word	0x0800754d
 8007590:	080076d1 	.word	0x080076d1
 8007594:	080075fb 	.word	0x080075fb
 8007598:	0800768b 	.word	0x0800768b
 800759c:	0800754d 	.word	0x0800754d
 80075a0:	0800754d 	.word	0x0800754d
 80075a4:	080076f3 	.word	0x080076f3
 80075a8:	0800754d 	.word	0x0800754d
 80075ac:	080075fb 	.word	0x080075fb
 80075b0:	0800754d 	.word	0x0800754d
 80075b4:	0800754d 	.word	0x0800754d
 80075b8:	08007693 	.word	0x08007693
 80075bc:	6833      	ldr	r3, [r6, #0]
 80075be:	1d1a      	adds	r2, r3, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6032      	str	r2, [r6, #0]
 80075c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075cc:	2301      	movs	r3, #1
 80075ce:	e09d      	b.n	800770c <_printf_i+0x1e8>
 80075d0:	6833      	ldr	r3, [r6, #0]
 80075d2:	6820      	ldr	r0, [r4, #0]
 80075d4:	1d19      	adds	r1, r3, #4
 80075d6:	6031      	str	r1, [r6, #0]
 80075d8:	0606      	lsls	r6, r0, #24
 80075da:	d501      	bpl.n	80075e0 <_printf_i+0xbc>
 80075dc:	681d      	ldr	r5, [r3, #0]
 80075de:	e003      	b.n	80075e8 <_printf_i+0xc4>
 80075e0:	0645      	lsls	r5, r0, #25
 80075e2:	d5fb      	bpl.n	80075dc <_printf_i+0xb8>
 80075e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075e8:	2d00      	cmp	r5, #0
 80075ea:	da03      	bge.n	80075f4 <_printf_i+0xd0>
 80075ec:	232d      	movs	r3, #45	@ 0x2d
 80075ee:	426d      	negs	r5, r5
 80075f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075f4:	4859      	ldr	r0, [pc, #356]	@ (800775c <_printf_i+0x238>)
 80075f6:	230a      	movs	r3, #10
 80075f8:	e011      	b.n	800761e <_printf_i+0xfa>
 80075fa:	6821      	ldr	r1, [r4, #0]
 80075fc:	6833      	ldr	r3, [r6, #0]
 80075fe:	0608      	lsls	r0, r1, #24
 8007600:	f853 5b04 	ldr.w	r5, [r3], #4
 8007604:	d402      	bmi.n	800760c <_printf_i+0xe8>
 8007606:	0649      	lsls	r1, r1, #25
 8007608:	bf48      	it	mi
 800760a:	b2ad      	uxthmi	r5, r5
 800760c:	2f6f      	cmp	r7, #111	@ 0x6f
 800760e:	4853      	ldr	r0, [pc, #332]	@ (800775c <_printf_i+0x238>)
 8007610:	6033      	str	r3, [r6, #0]
 8007612:	bf14      	ite	ne
 8007614:	230a      	movne	r3, #10
 8007616:	2308      	moveq	r3, #8
 8007618:	2100      	movs	r1, #0
 800761a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800761e:	6866      	ldr	r6, [r4, #4]
 8007620:	60a6      	str	r6, [r4, #8]
 8007622:	2e00      	cmp	r6, #0
 8007624:	bfa2      	ittt	ge
 8007626:	6821      	ldrge	r1, [r4, #0]
 8007628:	f021 0104 	bicge.w	r1, r1, #4
 800762c:	6021      	strge	r1, [r4, #0]
 800762e:	b90d      	cbnz	r5, 8007634 <_printf_i+0x110>
 8007630:	2e00      	cmp	r6, #0
 8007632:	d04b      	beq.n	80076cc <_printf_i+0x1a8>
 8007634:	4616      	mov	r6, r2
 8007636:	fbb5 f1f3 	udiv	r1, r5, r3
 800763a:	fb03 5711 	mls	r7, r3, r1, r5
 800763e:	5dc7      	ldrb	r7, [r0, r7]
 8007640:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007644:	462f      	mov	r7, r5
 8007646:	42bb      	cmp	r3, r7
 8007648:	460d      	mov	r5, r1
 800764a:	d9f4      	bls.n	8007636 <_printf_i+0x112>
 800764c:	2b08      	cmp	r3, #8
 800764e:	d10b      	bne.n	8007668 <_printf_i+0x144>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	07df      	lsls	r7, r3, #31
 8007654:	d508      	bpl.n	8007668 <_printf_i+0x144>
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	6861      	ldr	r1, [r4, #4]
 800765a:	4299      	cmp	r1, r3
 800765c:	bfde      	ittt	le
 800765e:	2330      	movle	r3, #48	@ 0x30
 8007660:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007664:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007668:	1b92      	subs	r2, r2, r6
 800766a:	6122      	str	r2, [r4, #16]
 800766c:	f8cd a000 	str.w	sl, [sp]
 8007670:	464b      	mov	r3, r9
 8007672:	aa03      	add	r2, sp, #12
 8007674:	4621      	mov	r1, r4
 8007676:	4640      	mov	r0, r8
 8007678:	f7ff fee6 	bl	8007448 <_printf_common>
 800767c:	3001      	adds	r0, #1
 800767e:	d14a      	bne.n	8007716 <_printf_i+0x1f2>
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	b004      	add	sp, #16
 8007686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	f043 0320 	orr.w	r3, r3, #32
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	4833      	ldr	r0, [pc, #204]	@ (8007760 <_printf_i+0x23c>)
 8007694:	2778      	movs	r7, #120	@ 0x78
 8007696:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	6831      	ldr	r1, [r6, #0]
 800769e:	061f      	lsls	r7, r3, #24
 80076a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80076a4:	d402      	bmi.n	80076ac <_printf_i+0x188>
 80076a6:	065f      	lsls	r7, r3, #25
 80076a8:	bf48      	it	mi
 80076aa:	b2ad      	uxthmi	r5, r5
 80076ac:	6031      	str	r1, [r6, #0]
 80076ae:	07d9      	lsls	r1, r3, #31
 80076b0:	bf44      	itt	mi
 80076b2:	f043 0320 	orrmi.w	r3, r3, #32
 80076b6:	6023      	strmi	r3, [r4, #0]
 80076b8:	b11d      	cbz	r5, 80076c2 <_printf_i+0x19e>
 80076ba:	2310      	movs	r3, #16
 80076bc:	e7ac      	b.n	8007618 <_printf_i+0xf4>
 80076be:	4827      	ldr	r0, [pc, #156]	@ (800775c <_printf_i+0x238>)
 80076c0:	e7e9      	b.n	8007696 <_printf_i+0x172>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	f023 0320 	bic.w	r3, r3, #32
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	e7f6      	b.n	80076ba <_printf_i+0x196>
 80076cc:	4616      	mov	r6, r2
 80076ce:	e7bd      	b.n	800764c <_printf_i+0x128>
 80076d0:	6833      	ldr	r3, [r6, #0]
 80076d2:	6825      	ldr	r5, [r4, #0]
 80076d4:	6961      	ldr	r1, [r4, #20]
 80076d6:	1d18      	adds	r0, r3, #4
 80076d8:	6030      	str	r0, [r6, #0]
 80076da:	062e      	lsls	r6, r5, #24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	d501      	bpl.n	80076e4 <_printf_i+0x1c0>
 80076e0:	6019      	str	r1, [r3, #0]
 80076e2:	e002      	b.n	80076ea <_printf_i+0x1c6>
 80076e4:	0668      	lsls	r0, r5, #25
 80076e6:	d5fb      	bpl.n	80076e0 <_printf_i+0x1bc>
 80076e8:	8019      	strh	r1, [r3, #0]
 80076ea:	2300      	movs	r3, #0
 80076ec:	6123      	str	r3, [r4, #16]
 80076ee:	4616      	mov	r6, r2
 80076f0:	e7bc      	b.n	800766c <_printf_i+0x148>
 80076f2:	6833      	ldr	r3, [r6, #0]
 80076f4:	1d1a      	adds	r2, r3, #4
 80076f6:	6032      	str	r2, [r6, #0]
 80076f8:	681e      	ldr	r6, [r3, #0]
 80076fa:	6862      	ldr	r2, [r4, #4]
 80076fc:	2100      	movs	r1, #0
 80076fe:	4630      	mov	r0, r6
 8007700:	f7f8 fd6e 	bl	80001e0 <memchr>
 8007704:	b108      	cbz	r0, 800770a <_printf_i+0x1e6>
 8007706:	1b80      	subs	r0, r0, r6
 8007708:	6060      	str	r0, [r4, #4]
 800770a:	6863      	ldr	r3, [r4, #4]
 800770c:	6123      	str	r3, [r4, #16]
 800770e:	2300      	movs	r3, #0
 8007710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007714:	e7aa      	b.n	800766c <_printf_i+0x148>
 8007716:	6923      	ldr	r3, [r4, #16]
 8007718:	4632      	mov	r2, r6
 800771a:	4649      	mov	r1, r9
 800771c:	4640      	mov	r0, r8
 800771e:	47d0      	blx	sl
 8007720:	3001      	adds	r0, #1
 8007722:	d0ad      	beq.n	8007680 <_printf_i+0x15c>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	079b      	lsls	r3, r3, #30
 8007728:	d413      	bmi.n	8007752 <_printf_i+0x22e>
 800772a:	68e0      	ldr	r0, [r4, #12]
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	4298      	cmp	r0, r3
 8007730:	bfb8      	it	lt
 8007732:	4618      	movlt	r0, r3
 8007734:	e7a6      	b.n	8007684 <_printf_i+0x160>
 8007736:	2301      	movs	r3, #1
 8007738:	4632      	mov	r2, r6
 800773a:	4649      	mov	r1, r9
 800773c:	4640      	mov	r0, r8
 800773e:	47d0      	blx	sl
 8007740:	3001      	adds	r0, #1
 8007742:	d09d      	beq.n	8007680 <_printf_i+0x15c>
 8007744:	3501      	adds	r5, #1
 8007746:	68e3      	ldr	r3, [r4, #12]
 8007748:	9903      	ldr	r1, [sp, #12]
 800774a:	1a5b      	subs	r3, r3, r1
 800774c:	42ab      	cmp	r3, r5
 800774e:	dcf2      	bgt.n	8007736 <_printf_i+0x212>
 8007750:	e7eb      	b.n	800772a <_printf_i+0x206>
 8007752:	2500      	movs	r5, #0
 8007754:	f104 0619 	add.w	r6, r4, #25
 8007758:	e7f5      	b.n	8007746 <_printf_i+0x222>
 800775a:	bf00      	nop
 800775c:	08009cfe 	.word	0x08009cfe
 8007760:	08009d0f 	.word	0x08009d0f

08007764 <std>:
 8007764:	2300      	movs	r3, #0
 8007766:	b510      	push	{r4, lr}
 8007768:	4604      	mov	r4, r0
 800776a:	e9c0 3300 	strd	r3, r3, [r0]
 800776e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007772:	6083      	str	r3, [r0, #8]
 8007774:	8181      	strh	r1, [r0, #12]
 8007776:	6643      	str	r3, [r0, #100]	@ 0x64
 8007778:	81c2      	strh	r2, [r0, #14]
 800777a:	6183      	str	r3, [r0, #24]
 800777c:	4619      	mov	r1, r3
 800777e:	2208      	movs	r2, #8
 8007780:	305c      	adds	r0, #92	@ 0x5c
 8007782:	f000 fa19 	bl	8007bb8 <memset>
 8007786:	4b0d      	ldr	r3, [pc, #52]	@ (80077bc <std+0x58>)
 8007788:	6263      	str	r3, [r4, #36]	@ 0x24
 800778a:	4b0d      	ldr	r3, [pc, #52]	@ (80077c0 <std+0x5c>)
 800778c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800778e:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <std+0x60>)
 8007790:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007792:	4b0d      	ldr	r3, [pc, #52]	@ (80077c8 <std+0x64>)
 8007794:	6323      	str	r3, [r4, #48]	@ 0x30
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <std+0x68>)
 8007798:	6224      	str	r4, [r4, #32]
 800779a:	429c      	cmp	r4, r3
 800779c:	d006      	beq.n	80077ac <std+0x48>
 800779e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077a2:	4294      	cmp	r4, r2
 80077a4:	d002      	beq.n	80077ac <std+0x48>
 80077a6:	33d0      	adds	r3, #208	@ 0xd0
 80077a8:	429c      	cmp	r4, r3
 80077aa:	d105      	bne.n	80077b8 <std+0x54>
 80077ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b4:	f000 ba7c 	b.w	8007cb0 <__retarget_lock_init_recursive>
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	bf00      	nop
 80077bc:	08007a09 	.word	0x08007a09
 80077c0:	08007a2b 	.word	0x08007a2b
 80077c4:	08007a63 	.word	0x08007a63
 80077c8:	08007a87 	.word	0x08007a87
 80077cc:	20000434 	.word	0x20000434

080077d0 <stdio_exit_handler>:
 80077d0:	4a02      	ldr	r2, [pc, #8]	@ (80077dc <stdio_exit_handler+0xc>)
 80077d2:	4903      	ldr	r1, [pc, #12]	@ (80077e0 <stdio_exit_handler+0x10>)
 80077d4:	4803      	ldr	r0, [pc, #12]	@ (80077e4 <stdio_exit_handler+0x14>)
 80077d6:	f000 b869 	b.w	80078ac <_fwalk_sglue>
 80077da:	bf00      	nop
 80077dc:	2000000c 	.word	0x2000000c
 80077e0:	08009891 	.word	0x08009891
 80077e4:	2000001c 	.word	0x2000001c

080077e8 <cleanup_stdio>:
 80077e8:	6841      	ldr	r1, [r0, #4]
 80077ea:	4b0c      	ldr	r3, [pc, #48]	@ (800781c <cleanup_stdio+0x34>)
 80077ec:	4299      	cmp	r1, r3
 80077ee:	b510      	push	{r4, lr}
 80077f0:	4604      	mov	r4, r0
 80077f2:	d001      	beq.n	80077f8 <cleanup_stdio+0x10>
 80077f4:	f002 f84c 	bl	8009890 <_fflush_r>
 80077f8:	68a1      	ldr	r1, [r4, #8]
 80077fa:	4b09      	ldr	r3, [pc, #36]	@ (8007820 <cleanup_stdio+0x38>)
 80077fc:	4299      	cmp	r1, r3
 80077fe:	d002      	beq.n	8007806 <cleanup_stdio+0x1e>
 8007800:	4620      	mov	r0, r4
 8007802:	f002 f845 	bl	8009890 <_fflush_r>
 8007806:	68e1      	ldr	r1, [r4, #12]
 8007808:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <cleanup_stdio+0x3c>)
 800780a:	4299      	cmp	r1, r3
 800780c:	d004      	beq.n	8007818 <cleanup_stdio+0x30>
 800780e:	4620      	mov	r0, r4
 8007810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007814:	f002 b83c 	b.w	8009890 <_fflush_r>
 8007818:	bd10      	pop	{r4, pc}
 800781a:	bf00      	nop
 800781c:	20000434 	.word	0x20000434
 8007820:	2000049c 	.word	0x2000049c
 8007824:	20000504 	.word	0x20000504

08007828 <global_stdio_init.part.0>:
 8007828:	b510      	push	{r4, lr}
 800782a:	4b0b      	ldr	r3, [pc, #44]	@ (8007858 <global_stdio_init.part.0+0x30>)
 800782c:	4c0b      	ldr	r4, [pc, #44]	@ (800785c <global_stdio_init.part.0+0x34>)
 800782e:	4a0c      	ldr	r2, [pc, #48]	@ (8007860 <global_stdio_init.part.0+0x38>)
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	4620      	mov	r0, r4
 8007834:	2200      	movs	r2, #0
 8007836:	2104      	movs	r1, #4
 8007838:	f7ff ff94 	bl	8007764 <std>
 800783c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007840:	2201      	movs	r2, #1
 8007842:	2109      	movs	r1, #9
 8007844:	f7ff ff8e 	bl	8007764 <std>
 8007848:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800784c:	2202      	movs	r2, #2
 800784e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007852:	2112      	movs	r1, #18
 8007854:	f7ff bf86 	b.w	8007764 <std>
 8007858:	2000056c 	.word	0x2000056c
 800785c:	20000434 	.word	0x20000434
 8007860:	080077d1 	.word	0x080077d1

08007864 <__sfp_lock_acquire>:
 8007864:	4801      	ldr	r0, [pc, #4]	@ (800786c <__sfp_lock_acquire+0x8>)
 8007866:	f000 ba24 	b.w	8007cb2 <__retarget_lock_acquire_recursive>
 800786a:	bf00      	nop
 800786c:	20000575 	.word	0x20000575

08007870 <__sfp_lock_release>:
 8007870:	4801      	ldr	r0, [pc, #4]	@ (8007878 <__sfp_lock_release+0x8>)
 8007872:	f000 ba1f 	b.w	8007cb4 <__retarget_lock_release_recursive>
 8007876:	bf00      	nop
 8007878:	20000575 	.word	0x20000575

0800787c <__sinit>:
 800787c:	b510      	push	{r4, lr}
 800787e:	4604      	mov	r4, r0
 8007880:	f7ff fff0 	bl	8007864 <__sfp_lock_acquire>
 8007884:	6a23      	ldr	r3, [r4, #32]
 8007886:	b11b      	cbz	r3, 8007890 <__sinit+0x14>
 8007888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800788c:	f7ff bff0 	b.w	8007870 <__sfp_lock_release>
 8007890:	4b04      	ldr	r3, [pc, #16]	@ (80078a4 <__sinit+0x28>)
 8007892:	6223      	str	r3, [r4, #32]
 8007894:	4b04      	ldr	r3, [pc, #16]	@ (80078a8 <__sinit+0x2c>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1f5      	bne.n	8007888 <__sinit+0xc>
 800789c:	f7ff ffc4 	bl	8007828 <global_stdio_init.part.0>
 80078a0:	e7f2      	b.n	8007888 <__sinit+0xc>
 80078a2:	bf00      	nop
 80078a4:	080077e9 	.word	0x080077e9
 80078a8:	2000056c 	.word	0x2000056c

080078ac <_fwalk_sglue>:
 80078ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b0:	4607      	mov	r7, r0
 80078b2:	4688      	mov	r8, r1
 80078b4:	4614      	mov	r4, r2
 80078b6:	2600      	movs	r6, #0
 80078b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078bc:	f1b9 0901 	subs.w	r9, r9, #1
 80078c0:	d505      	bpl.n	80078ce <_fwalk_sglue+0x22>
 80078c2:	6824      	ldr	r4, [r4, #0]
 80078c4:	2c00      	cmp	r4, #0
 80078c6:	d1f7      	bne.n	80078b8 <_fwalk_sglue+0xc>
 80078c8:	4630      	mov	r0, r6
 80078ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ce:	89ab      	ldrh	r3, [r5, #12]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d907      	bls.n	80078e4 <_fwalk_sglue+0x38>
 80078d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078d8:	3301      	adds	r3, #1
 80078da:	d003      	beq.n	80078e4 <_fwalk_sglue+0x38>
 80078dc:	4629      	mov	r1, r5
 80078de:	4638      	mov	r0, r7
 80078e0:	47c0      	blx	r8
 80078e2:	4306      	orrs	r6, r0
 80078e4:	3568      	adds	r5, #104	@ 0x68
 80078e6:	e7e9      	b.n	80078bc <_fwalk_sglue+0x10>

080078e8 <iprintf>:
 80078e8:	b40f      	push	{r0, r1, r2, r3}
 80078ea:	b507      	push	{r0, r1, r2, lr}
 80078ec:	4906      	ldr	r1, [pc, #24]	@ (8007908 <iprintf+0x20>)
 80078ee:	ab04      	add	r3, sp, #16
 80078f0:	6808      	ldr	r0, [r1, #0]
 80078f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f6:	6881      	ldr	r1, [r0, #8]
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	f001 fe2d 	bl	8009558 <_vfiprintf_r>
 80078fe:	b003      	add	sp, #12
 8007900:	f85d eb04 	ldr.w	lr, [sp], #4
 8007904:	b004      	add	sp, #16
 8007906:	4770      	bx	lr
 8007908:	20000018 	.word	0x20000018

0800790c <_puts_r>:
 800790c:	6a03      	ldr	r3, [r0, #32]
 800790e:	b570      	push	{r4, r5, r6, lr}
 8007910:	6884      	ldr	r4, [r0, #8]
 8007912:	4605      	mov	r5, r0
 8007914:	460e      	mov	r6, r1
 8007916:	b90b      	cbnz	r3, 800791c <_puts_r+0x10>
 8007918:	f7ff ffb0 	bl	800787c <__sinit>
 800791c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800791e:	07db      	lsls	r3, r3, #31
 8007920:	d405      	bmi.n	800792e <_puts_r+0x22>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	0598      	lsls	r0, r3, #22
 8007926:	d402      	bmi.n	800792e <_puts_r+0x22>
 8007928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800792a:	f000 f9c2 	bl	8007cb2 <__retarget_lock_acquire_recursive>
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	0719      	lsls	r1, r3, #28
 8007932:	d502      	bpl.n	800793a <_puts_r+0x2e>
 8007934:	6923      	ldr	r3, [r4, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d135      	bne.n	80079a6 <_puts_r+0x9a>
 800793a:	4621      	mov	r1, r4
 800793c:	4628      	mov	r0, r5
 800793e:	f000 f8e5 	bl	8007b0c <__swsetup_r>
 8007942:	b380      	cbz	r0, 80079a6 <_puts_r+0x9a>
 8007944:	f04f 35ff 	mov.w	r5, #4294967295
 8007948:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800794a:	07da      	lsls	r2, r3, #31
 800794c:	d405      	bmi.n	800795a <_puts_r+0x4e>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	059b      	lsls	r3, r3, #22
 8007952:	d402      	bmi.n	800795a <_puts_r+0x4e>
 8007954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007956:	f000 f9ad 	bl	8007cb4 <__retarget_lock_release_recursive>
 800795a:	4628      	mov	r0, r5
 800795c:	bd70      	pop	{r4, r5, r6, pc}
 800795e:	2b00      	cmp	r3, #0
 8007960:	da04      	bge.n	800796c <_puts_r+0x60>
 8007962:	69a2      	ldr	r2, [r4, #24]
 8007964:	429a      	cmp	r2, r3
 8007966:	dc17      	bgt.n	8007998 <_puts_r+0x8c>
 8007968:	290a      	cmp	r1, #10
 800796a:	d015      	beq.n	8007998 <_puts_r+0x8c>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	6022      	str	r2, [r4, #0]
 8007972:	7019      	strb	r1, [r3, #0]
 8007974:	68a3      	ldr	r3, [r4, #8]
 8007976:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800797a:	3b01      	subs	r3, #1
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	2900      	cmp	r1, #0
 8007980:	d1ed      	bne.n	800795e <_puts_r+0x52>
 8007982:	2b00      	cmp	r3, #0
 8007984:	da11      	bge.n	80079aa <_puts_r+0x9e>
 8007986:	4622      	mov	r2, r4
 8007988:	210a      	movs	r1, #10
 800798a:	4628      	mov	r0, r5
 800798c:	f000 f87f 	bl	8007a8e <__swbuf_r>
 8007990:	3001      	adds	r0, #1
 8007992:	d0d7      	beq.n	8007944 <_puts_r+0x38>
 8007994:	250a      	movs	r5, #10
 8007996:	e7d7      	b.n	8007948 <_puts_r+0x3c>
 8007998:	4622      	mov	r2, r4
 800799a:	4628      	mov	r0, r5
 800799c:	f000 f877 	bl	8007a8e <__swbuf_r>
 80079a0:	3001      	adds	r0, #1
 80079a2:	d1e7      	bne.n	8007974 <_puts_r+0x68>
 80079a4:	e7ce      	b.n	8007944 <_puts_r+0x38>
 80079a6:	3e01      	subs	r6, #1
 80079a8:	e7e4      	b.n	8007974 <_puts_r+0x68>
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	6022      	str	r2, [r4, #0]
 80079b0:	220a      	movs	r2, #10
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	e7ee      	b.n	8007994 <_puts_r+0x88>
	...

080079b8 <puts>:
 80079b8:	4b02      	ldr	r3, [pc, #8]	@ (80079c4 <puts+0xc>)
 80079ba:	4601      	mov	r1, r0
 80079bc:	6818      	ldr	r0, [r3, #0]
 80079be:	f7ff bfa5 	b.w	800790c <_puts_r>
 80079c2:	bf00      	nop
 80079c4:	20000018 	.word	0x20000018

080079c8 <siprintf>:
 80079c8:	b40e      	push	{r1, r2, r3}
 80079ca:	b500      	push	{lr}
 80079cc:	b09c      	sub	sp, #112	@ 0x70
 80079ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80079d0:	9002      	str	r0, [sp, #8]
 80079d2:	9006      	str	r0, [sp, #24]
 80079d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079d8:	4809      	ldr	r0, [pc, #36]	@ (8007a00 <siprintf+0x38>)
 80079da:	9107      	str	r1, [sp, #28]
 80079dc:	9104      	str	r1, [sp, #16]
 80079de:	4909      	ldr	r1, [pc, #36]	@ (8007a04 <siprintf+0x3c>)
 80079e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e4:	9105      	str	r1, [sp, #20]
 80079e6:	6800      	ldr	r0, [r0, #0]
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	a902      	add	r1, sp, #8
 80079ec:	f001 fc8e 	bl	800930c <_svfiprintf_r>
 80079f0:	9b02      	ldr	r3, [sp, #8]
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	b01c      	add	sp, #112	@ 0x70
 80079f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079fc:	b003      	add	sp, #12
 80079fe:	4770      	bx	lr
 8007a00:	20000018 	.word	0x20000018
 8007a04:	ffff0208 	.word	0xffff0208

08007a08 <__sread>:
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a10:	f000 f900 	bl	8007c14 <_read_r>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	bfab      	itete	ge
 8007a18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a1c:	181b      	addge	r3, r3, r0
 8007a1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a22:	bfac      	ite	ge
 8007a24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a26:	81a3      	strhlt	r3, [r4, #12]
 8007a28:	bd10      	pop	{r4, pc}

08007a2a <__swrite>:
 8007a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2e:	461f      	mov	r7, r3
 8007a30:	898b      	ldrh	r3, [r1, #12]
 8007a32:	05db      	lsls	r3, r3, #23
 8007a34:	4605      	mov	r5, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	4616      	mov	r6, r2
 8007a3a:	d505      	bpl.n	8007a48 <__swrite+0x1e>
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	2302      	movs	r3, #2
 8007a42:	2200      	movs	r2, #0
 8007a44:	f000 f8d4 	bl	8007bf0 <_lseek_r>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	4632      	mov	r2, r6
 8007a56:	463b      	mov	r3, r7
 8007a58:	4628      	mov	r0, r5
 8007a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5e:	f000 b8eb 	b.w	8007c38 <_write_r>

08007a62 <__sseek>:
 8007a62:	b510      	push	{r4, lr}
 8007a64:	460c      	mov	r4, r1
 8007a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6a:	f000 f8c1 	bl	8007bf0 <_lseek_r>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	89a3      	ldrh	r3, [r4, #12]
 8007a72:	bf15      	itete	ne
 8007a74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a7e:	81a3      	strheq	r3, [r4, #12]
 8007a80:	bf18      	it	ne
 8007a82:	81a3      	strhne	r3, [r4, #12]
 8007a84:	bd10      	pop	{r4, pc}

08007a86 <__sclose>:
 8007a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8a:	f000 b8a1 	b.w	8007bd0 <_close_r>

08007a8e <__swbuf_r>:
 8007a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a90:	460e      	mov	r6, r1
 8007a92:	4614      	mov	r4, r2
 8007a94:	4605      	mov	r5, r0
 8007a96:	b118      	cbz	r0, 8007aa0 <__swbuf_r+0x12>
 8007a98:	6a03      	ldr	r3, [r0, #32]
 8007a9a:	b90b      	cbnz	r3, 8007aa0 <__swbuf_r+0x12>
 8007a9c:	f7ff feee 	bl	800787c <__sinit>
 8007aa0:	69a3      	ldr	r3, [r4, #24]
 8007aa2:	60a3      	str	r3, [r4, #8]
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	071a      	lsls	r2, r3, #28
 8007aa8:	d501      	bpl.n	8007aae <__swbuf_r+0x20>
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	b943      	cbnz	r3, 8007ac0 <__swbuf_r+0x32>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f000 f82b 	bl	8007b0c <__swsetup_r>
 8007ab6:	b118      	cbz	r0, 8007ac0 <__swbuf_r+0x32>
 8007ab8:	f04f 37ff 	mov.w	r7, #4294967295
 8007abc:	4638      	mov	r0, r7
 8007abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	6922      	ldr	r2, [r4, #16]
 8007ac4:	1a98      	subs	r0, r3, r2
 8007ac6:	6963      	ldr	r3, [r4, #20]
 8007ac8:	b2f6      	uxtb	r6, r6
 8007aca:	4283      	cmp	r3, r0
 8007acc:	4637      	mov	r7, r6
 8007ace:	dc05      	bgt.n	8007adc <__swbuf_r+0x4e>
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f001 fedc 	bl	8009890 <_fflush_r>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d1ed      	bne.n	8007ab8 <__swbuf_r+0x2a>
 8007adc:	68a3      	ldr	r3, [r4, #8]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	60a3      	str	r3, [r4, #8]
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	6022      	str	r2, [r4, #0]
 8007ae8:	701e      	strb	r6, [r3, #0]
 8007aea:	6962      	ldr	r2, [r4, #20]
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d004      	beq.n	8007afc <__swbuf_r+0x6e>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	07db      	lsls	r3, r3, #31
 8007af6:	d5e1      	bpl.n	8007abc <__swbuf_r+0x2e>
 8007af8:	2e0a      	cmp	r6, #10
 8007afa:	d1df      	bne.n	8007abc <__swbuf_r+0x2e>
 8007afc:	4621      	mov	r1, r4
 8007afe:	4628      	mov	r0, r5
 8007b00:	f001 fec6 	bl	8009890 <_fflush_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d0d9      	beq.n	8007abc <__swbuf_r+0x2e>
 8007b08:	e7d6      	b.n	8007ab8 <__swbuf_r+0x2a>
	...

08007b0c <__swsetup_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4b29      	ldr	r3, [pc, #164]	@ (8007bb4 <__swsetup_r+0xa8>)
 8007b10:	4605      	mov	r5, r0
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	460c      	mov	r4, r1
 8007b16:	b118      	cbz	r0, 8007b20 <__swsetup_r+0x14>
 8007b18:	6a03      	ldr	r3, [r0, #32]
 8007b1a:	b90b      	cbnz	r3, 8007b20 <__swsetup_r+0x14>
 8007b1c:	f7ff feae 	bl	800787c <__sinit>
 8007b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b24:	0719      	lsls	r1, r3, #28
 8007b26:	d422      	bmi.n	8007b6e <__swsetup_r+0x62>
 8007b28:	06da      	lsls	r2, r3, #27
 8007b2a:	d407      	bmi.n	8007b3c <__swsetup_r+0x30>
 8007b2c:	2209      	movs	r2, #9
 8007b2e:	602a      	str	r2, [r5, #0]
 8007b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b34:	81a3      	strh	r3, [r4, #12]
 8007b36:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3a:	e033      	b.n	8007ba4 <__swsetup_r+0x98>
 8007b3c:	0758      	lsls	r0, r3, #29
 8007b3e:	d512      	bpl.n	8007b66 <__swsetup_r+0x5a>
 8007b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b42:	b141      	cbz	r1, 8007b56 <__swsetup_r+0x4a>
 8007b44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b48:	4299      	cmp	r1, r3
 8007b4a:	d002      	beq.n	8007b52 <__swsetup_r+0x46>
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	f000 feff 	bl	8008950 <_free_r>
 8007b52:	2300      	movs	r3, #0
 8007b54:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6063      	str	r3, [r4, #4]
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	f043 0308 	orr.w	r3, r3, #8
 8007b6c:	81a3      	strh	r3, [r4, #12]
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	b94b      	cbnz	r3, 8007b86 <__swsetup_r+0x7a>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b7c:	d003      	beq.n	8007b86 <__swsetup_r+0x7a>
 8007b7e:	4621      	mov	r1, r4
 8007b80:	4628      	mov	r0, r5
 8007b82:	f001 fed3 	bl	800992c <__smakebuf_r>
 8007b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b8a:	f013 0201 	ands.w	r2, r3, #1
 8007b8e:	d00a      	beq.n	8007ba6 <__swsetup_r+0x9a>
 8007b90:	2200      	movs	r2, #0
 8007b92:	60a2      	str	r2, [r4, #8]
 8007b94:	6962      	ldr	r2, [r4, #20]
 8007b96:	4252      	negs	r2, r2
 8007b98:	61a2      	str	r2, [r4, #24]
 8007b9a:	6922      	ldr	r2, [r4, #16]
 8007b9c:	b942      	cbnz	r2, 8007bb0 <__swsetup_r+0xa4>
 8007b9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ba2:	d1c5      	bne.n	8007b30 <__swsetup_r+0x24>
 8007ba4:	bd38      	pop	{r3, r4, r5, pc}
 8007ba6:	0799      	lsls	r1, r3, #30
 8007ba8:	bf58      	it	pl
 8007baa:	6962      	ldrpl	r2, [r4, #20]
 8007bac:	60a2      	str	r2, [r4, #8]
 8007bae:	e7f4      	b.n	8007b9a <__swsetup_r+0x8e>
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	e7f7      	b.n	8007ba4 <__swsetup_r+0x98>
 8007bb4:	20000018 	.word	0x20000018

08007bb8 <memset>:
 8007bb8:	4402      	add	r2, r0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d100      	bne.n	8007bc2 <memset+0xa>
 8007bc0:	4770      	bx	lr
 8007bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bc6:	e7f9      	b.n	8007bbc <memset+0x4>

08007bc8 <_localeconv_r>:
 8007bc8:	4800      	ldr	r0, [pc, #0]	@ (8007bcc <_localeconv_r+0x4>)
 8007bca:	4770      	bx	lr
 8007bcc:	20000158 	.word	0x20000158

08007bd0 <_close_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d06      	ldr	r5, [pc, #24]	@ (8007bec <_close_r+0x1c>)
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	4608      	mov	r0, r1
 8007bda:	602b      	str	r3, [r5, #0]
 8007bdc:	f7fa f8f0 	bl	8001dc0 <_close>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_close_r+0x1a>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_close_r+0x1a>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	20000570 	.word	0x20000570

08007bf0 <_lseek_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4d07      	ldr	r5, [pc, #28]	@ (8007c10 <_lseek_r+0x20>)
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	602a      	str	r2, [r5, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f7fa f905 	bl	8001e0e <_lseek>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_lseek_r+0x1e>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_lseek_r+0x1e>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	20000570 	.word	0x20000570

08007c14 <_read_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d07      	ldr	r5, [pc, #28]	@ (8007c34 <_read_r+0x20>)
 8007c18:	4604      	mov	r4, r0
 8007c1a:	4608      	mov	r0, r1
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	602a      	str	r2, [r5, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f7fa f893 	bl	8001d4e <_read>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_read_r+0x1e>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_read_r+0x1e>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	20000570 	.word	0x20000570

08007c38 <_write_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d07      	ldr	r5, [pc, #28]	@ (8007c58 <_write_r+0x20>)
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	4608      	mov	r0, r1
 8007c40:	4611      	mov	r1, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	602a      	str	r2, [r5, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	f7fa f89e 	bl	8001d88 <_write>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_write_r+0x1e>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_write_r+0x1e>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	20000570 	.word	0x20000570

08007c5c <__errno>:
 8007c5c:	4b01      	ldr	r3, [pc, #4]	@ (8007c64 <__errno+0x8>)
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20000018 	.word	0x20000018

08007c68 <__libc_init_array>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007ca0 <__libc_init_array+0x38>)
 8007c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007ca4 <__libc_init_array+0x3c>)
 8007c6e:	1b64      	subs	r4, r4, r5
 8007c70:	10a4      	asrs	r4, r4, #2
 8007c72:	2600      	movs	r6, #0
 8007c74:	42a6      	cmp	r6, r4
 8007c76:	d109      	bne.n	8007c8c <__libc_init_array+0x24>
 8007c78:	4d0b      	ldr	r5, [pc, #44]	@ (8007ca8 <__libc_init_array+0x40>)
 8007c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007cac <__libc_init_array+0x44>)
 8007c7c:	f001 ffd2 	bl	8009c24 <_init>
 8007c80:	1b64      	subs	r4, r4, r5
 8007c82:	10a4      	asrs	r4, r4, #2
 8007c84:	2600      	movs	r6, #0
 8007c86:	42a6      	cmp	r6, r4
 8007c88:	d105      	bne.n	8007c96 <__libc_init_array+0x2e>
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c90:	4798      	blx	r3
 8007c92:	3601      	adds	r6, #1
 8007c94:	e7ee      	b.n	8007c74 <__libc_init_array+0xc>
 8007c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9a:	4798      	blx	r3
 8007c9c:	3601      	adds	r6, #1
 8007c9e:	e7f2      	b.n	8007c86 <__libc_init_array+0x1e>
 8007ca0:	0800a068 	.word	0x0800a068
 8007ca4:	0800a068 	.word	0x0800a068
 8007ca8:	0800a068 	.word	0x0800a068
 8007cac:	0800a06c 	.word	0x0800a06c

08007cb0 <__retarget_lock_init_recursive>:
 8007cb0:	4770      	bx	lr

08007cb2 <__retarget_lock_acquire_recursive>:
 8007cb2:	4770      	bx	lr

08007cb4 <__retarget_lock_release_recursive>:
 8007cb4:	4770      	bx	lr

08007cb6 <quorem>:
 8007cb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cba:	6903      	ldr	r3, [r0, #16]
 8007cbc:	690c      	ldr	r4, [r1, #16]
 8007cbe:	42a3      	cmp	r3, r4
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	db7e      	blt.n	8007dc2 <quorem+0x10c>
 8007cc4:	3c01      	subs	r4, #1
 8007cc6:	f101 0814 	add.w	r8, r1, #20
 8007cca:	00a3      	lsls	r3, r4, #2
 8007ccc:	f100 0514 	add.w	r5, r0, #20
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ce8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cec:	d32e      	bcc.n	8007d4c <quorem+0x96>
 8007cee:	f04f 0a00 	mov.w	sl, #0
 8007cf2:	46c4      	mov	ip, r8
 8007cf4:	46ae      	mov	lr, r5
 8007cf6:	46d3      	mov	fp, sl
 8007cf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cfc:	b298      	uxth	r0, r3
 8007cfe:	fb06 a000 	mla	r0, r6, r0, sl
 8007d02:	0c02      	lsrs	r2, r0, #16
 8007d04:	0c1b      	lsrs	r3, r3, #16
 8007d06:	fb06 2303 	mla	r3, r6, r3, r2
 8007d0a:	f8de 2000 	ldr.w	r2, [lr]
 8007d0e:	b280      	uxth	r0, r0
 8007d10:	b292      	uxth	r2, r2
 8007d12:	1a12      	subs	r2, r2, r0
 8007d14:	445a      	add	r2, fp
 8007d16:	f8de 0000 	ldr.w	r0, [lr]
 8007d1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d28:	b292      	uxth	r2, r2
 8007d2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d2e:	45e1      	cmp	r9, ip
 8007d30:	f84e 2b04 	str.w	r2, [lr], #4
 8007d34:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d38:	d2de      	bcs.n	8007cf8 <quorem+0x42>
 8007d3a:	9b00      	ldr	r3, [sp, #0]
 8007d3c:	58eb      	ldr	r3, [r5, r3]
 8007d3e:	b92b      	cbnz	r3, 8007d4c <quorem+0x96>
 8007d40:	9b01      	ldr	r3, [sp, #4]
 8007d42:	3b04      	subs	r3, #4
 8007d44:	429d      	cmp	r5, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	d32f      	bcc.n	8007daa <quorem+0xf4>
 8007d4a:	613c      	str	r4, [r7, #16]
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f001 f979 	bl	8009044 <__mcmp>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	db25      	blt.n	8007da2 <quorem+0xec>
 8007d56:	4629      	mov	r1, r5
 8007d58:	2000      	movs	r0, #0
 8007d5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d5e:	f8d1 c000 	ldr.w	ip, [r1]
 8007d62:	fa1f fe82 	uxth.w	lr, r2
 8007d66:	fa1f f38c 	uxth.w	r3, ip
 8007d6a:	eba3 030e 	sub.w	r3, r3, lr
 8007d6e:	4403      	add	r3, r0
 8007d70:	0c12      	lsrs	r2, r2, #16
 8007d72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d80:	45c1      	cmp	r9, r8
 8007d82:	f841 3b04 	str.w	r3, [r1], #4
 8007d86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d8a:	d2e6      	bcs.n	8007d5a <quorem+0xa4>
 8007d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d94:	b922      	cbnz	r2, 8007da0 <quorem+0xea>
 8007d96:	3b04      	subs	r3, #4
 8007d98:	429d      	cmp	r5, r3
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	d30b      	bcc.n	8007db6 <quorem+0x100>
 8007d9e:	613c      	str	r4, [r7, #16]
 8007da0:	3601      	adds	r6, #1
 8007da2:	4630      	mov	r0, r6
 8007da4:	b003      	add	sp, #12
 8007da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	3b04      	subs	r3, #4
 8007dae:	2a00      	cmp	r2, #0
 8007db0:	d1cb      	bne.n	8007d4a <quorem+0x94>
 8007db2:	3c01      	subs	r4, #1
 8007db4:	e7c6      	b.n	8007d44 <quorem+0x8e>
 8007db6:	6812      	ldr	r2, [r2, #0]
 8007db8:	3b04      	subs	r3, #4
 8007dba:	2a00      	cmp	r2, #0
 8007dbc:	d1ef      	bne.n	8007d9e <quorem+0xe8>
 8007dbe:	3c01      	subs	r4, #1
 8007dc0:	e7ea      	b.n	8007d98 <quorem+0xe2>
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	e7ee      	b.n	8007da4 <quorem+0xee>
	...

08007dc8 <_dtoa_r>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	69c7      	ldr	r7, [r0, #28]
 8007dce:	b099      	sub	sp, #100	@ 0x64
 8007dd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007dd4:	ec55 4b10 	vmov	r4, r5, d0
 8007dd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007dda:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ddc:	4683      	mov	fp, r0
 8007dde:	920e      	str	r2, [sp, #56]	@ 0x38
 8007de0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007de2:	b97f      	cbnz	r7, 8007e04 <_dtoa_r+0x3c>
 8007de4:	2010      	movs	r0, #16
 8007de6:	f000 fdfd 	bl	80089e4 <malloc>
 8007dea:	4602      	mov	r2, r0
 8007dec:	f8cb 001c 	str.w	r0, [fp, #28]
 8007df0:	b920      	cbnz	r0, 8007dfc <_dtoa_r+0x34>
 8007df2:	4ba7      	ldr	r3, [pc, #668]	@ (8008090 <_dtoa_r+0x2c8>)
 8007df4:	21ef      	movs	r1, #239	@ 0xef
 8007df6:	48a7      	ldr	r0, [pc, #668]	@ (8008094 <_dtoa_r+0x2cc>)
 8007df8:	f001 fe2e 	bl	8009a58 <__assert_func>
 8007dfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e00:	6007      	str	r7, [r0, #0]
 8007e02:	60c7      	str	r7, [r0, #12]
 8007e04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	b159      	cbz	r1, 8007e24 <_dtoa_r+0x5c>
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	604a      	str	r2, [r1, #4]
 8007e10:	2301      	movs	r3, #1
 8007e12:	4093      	lsls	r3, r2
 8007e14:	608b      	str	r3, [r1, #8]
 8007e16:	4658      	mov	r0, fp
 8007e18:	f000 feda 	bl	8008bd0 <_Bfree>
 8007e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	1e2b      	subs	r3, r5, #0
 8007e26:	bfb9      	ittee	lt
 8007e28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e2c:	9303      	strlt	r3, [sp, #12]
 8007e2e:	2300      	movge	r3, #0
 8007e30:	6033      	strge	r3, [r6, #0]
 8007e32:	9f03      	ldr	r7, [sp, #12]
 8007e34:	4b98      	ldr	r3, [pc, #608]	@ (8008098 <_dtoa_r+0x2d0>)
 8007e36:	bfbc      	itt	lt
 8007e38:	2201      	movlt	r2, #1
 8007e3a:	6032      	strlt	r2, [r6, #0]
 8007e3c:	43bb      	bics	r3, r7
 8007e3e:	d112      	bne.n	8007e66 <_dtoa_r+0x9e>
 8007e40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007e42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e4c:	4323      	orrs	r3, r4
 8007e4e:	f000 854d 	beq.w	80088ec <_dtoa_r+0xb24>
 8007e52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80080ac <_dtoa_r+0x2e4>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 854f 	beq.w	80088fc <_dtoa_r+0xb34>
 8007e5e:	f10a 0303 	add.w	r3, sl, #3
 8007e62:	f000 bd49 	b.w	80088f8 <_dtoa_r+0xb30>
 8007e66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	ec51 0b17 	vmov	r0, r1, d7
 8007e70:	2300      	movs	r3, #0
 8007e72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007e76:	f7f8 fe2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e7a:	4680      	mov	r8, r0
 8007e7c:	b158      	cbz	r0, 8007e96 <_dtoa_r+0xce>
 8007e7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007e80:	2301      	movs	r3, #1
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e86:	b113      	cbz	r3, 8007e8e <_dtoa_r+0xc6>
 8007e88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e8a:	4b84      	ldr	r3, [pc, #528]	@ (800809c <_dtoa_r+0x2d4>)
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80080b0 <_dtoa_r+0x2e8>
 8007e92:	f000 bd33 	b.w	80088fc <_dtoa_r+0xb34>
 8007e96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007e9a:	aa16      	add	r2, sp, #88	@ 0x58
 8007e9c:	a917      	add	r1, sp, #92	@ 0x5c
 8007e9e:	4658      	mov	r0, fp
 8007ea0:	f001 f980 	bl	80091a4 <__d2b>
 8007ea4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ea8:	4681      	mov	r9, r0
 8007eaa:	2e00      	cmp	r6, #0
 8007eac:	d077      	beq.n	8007f9e <_dtoa_r+0x1d6>
 8007eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007eb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ebc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ec0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ec4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ec8:	4619      	mov	r1, r3
 8007eca:	2200      	movs	r2, #0
 8007ecc:	4b74      	ldr	r3, [pc, #464]	@ (80080a0 <_dtoa_r+0x2d8>)
 8007ece:	f7f8 f9e3 	bl	8000298 <__aeabi_dsub>
 8007ed2:	a369      	add	r3, pc, #420	@ (adr r3, 8008078 <_dtoa_r+0x2b0>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f7f8 fb96 	bl	8000608 <__aeabi_dmul>
 8007edc:	a368      	add	r3, pc, #416	@ (adr r3, 8008080 <_dtoa_r+0x2b8>)
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f7f8 f9db 	bl	800029c <__adddf3>
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	4630      	mov	r0, r6
 8007eea:	460d      	mov	r5, r1
 8007eec:	f7f8 fb22 	bl	8000534 <__aeabi_i2d>
 8007ef0:	a365      	add	r3, pc, #404	@ (adr r3, 8008088 <_dtoa_r+0x2c0>)
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	f7f8 fb87 	bl	8000608 <__aeabi_dmul>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4620      	mov	r0, r4
 8007f00:	4629      	mov	r1, r5
 8007f02:	f7f8 f9cb 	bl	800029c <__adddf3>
 8007f06:	4604      	mov	r4, r0
 8007f08:	460d      	mov	r5, r1
 8007f0a:	f7f8 fe2d 	bl	8000b68 <__aeabi_d2iz>
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4607      	mov	r7, r0
 8007f12:	2300      	movs	r3, #0
 8007f14:	4620      	mov	r0, r4
 8007f16:	4629      	mov	r1, r5
 8007f18:	f7f8 fde8 	bl	8000aec <__aeabi_dcmplt>
 8007f1c:	b140      	cbz	r0, 8007f30 <_dtoa_r+0x168>
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f7f8 fb08 	bl	8000534 <__aeabi_i2d>
 8007f24:	4622      	mov	r2, r4
 8007f26:	462b      	mov	r3, r5
 8007f28:	f7f8 fdd6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f2c:	b900      	cbnz	r0, 8007f30 <_dtoa_r+0x168>
 8007f2e:	3f01      	subs	r7, #1
 8007f30:	2f16      	cmp	r7, #22
 8007f32:	d851      	bhi.n	8007fd8 <_dtoa_r+0x210>
 8007f34:	4b5b      	ldr	r3, [pc, #364]	@ (80080a4 <_dtoa_r+0x2dc>)
 8007f36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f42:	f7f8 fdd3 	bl	8000aec <__aeabi_dcmplt>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d048      	beq.n	8007fdc <_dtoa_r+0x214>
 8007f4a:	3f01      	subs	r7, #1
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f52:	1b9b      	subs	r3, r3, r6
 8007f54:	1e5a      	subs	r2, r3, #1
 8007f56:	bf44      	itt	mi
 8007f58:	f1c3 0801 	rsbmi	r8, r3, #1
 8007f5c:	2300      	movmi	r3, #0
 8007f5e:	9208      	str	r2, [sp, #32]
 8007f60:	bf54      	ite	pl
 8007f62:	f04f 0800 	movpl.w	r8, #0
 8007f66:	9308      	strmi	r3, [sp, #32]
 8007f68:	2f00      	cmp	r7, #0
 8007f6a:	db39      	blt.n	8007fe0 <_dtoa_r+0x218>
 8007f6c:	9b08      	ldr	r3, [sp, #32]
 8007f6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007f70:	443b      	add	r3, r7
 8007f72:	9308      	str	r3, [sp, #32]
 8007f74:	2300      	movs	r3, #0
 8007f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7a:	2b09      	cmp	r3, #9
 8007f7c:	d864      	bhi.n	8008048 <_dtoa_r+0x280>
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	bfc4      	itt	gt
 8007f82:	3b04      	subgt	r3, #4
 8007f84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f88:	f1a3 0302 	sub.w	r3, r3, #2
 8007f8c:	bfcc      	ite	gt
 8007f8e:	2400      	movgt	r4, #0
 8007f90:	2401      	movle	r4, #1
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d863      	bhi.n	800805e <_dtoa_r+0x296>
 8007f96:	e8df f003 	tbb	[pc, r3]
 8007f9a:	372a      	.short	0x372a
 8007f9c:	5535      	.short	0x5535
 8007f9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007fa2:	441e      	add	r6, r3
 8007fa4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	bfc1      	itttt	gt
 8007fac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007fb0:	409f      	lslgt	r7, r3
 8007fb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007fb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007fba:	bfd6      	itet	le
 8007fbc:	f1c3 0320 	rsble	r3, r3, #32
 8007fc0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007fc4:	fa04 f003 	lslle.w	r0, r4, r3
 8007fc8:	f7f8 faa4 	bl	8000514 <__aeabi_ui2d>
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007fd2:	3e01      	subs	r6, #1
 8007fd4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007fd6:	e777      	b.n	8007ec8 <_dtoa_r+0x100>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e7b8      	b.n	8007f4e <_dtoa_r+0x186>
 8007fdc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007fde:	e7b7      	b.n	8007f50 <_dtoa_r+0x188>
 8007fe0:	427b      	negs	r3, r7
 8007fe2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	eba8 0807 	sub.w	r8, r8, r7
 8007fea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fec:	e7c4      	b.n	8007f78 <_dtoa_r+0x1b0>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dc35      	bgt.n	8008064 <_dtoa_r+0x29c>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	9307      	str	r3, [sp, #28]
 8007ffe:	461a      	mov	r2, r3
 8008000:	920e      	str	r2, [sp, #56]	@ 0x38
 8008002:	e00b      	b.n	800801c <_dtoa_r+0x254>
 8008004:	2301      	movs	r3, #1
 8008006:	e7f3      	b.n	8007ff0 <_dtoa_r+0x228>
 8008008:	2300      	movs	r3, #0
 800800a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800800c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800800e:	18fb      	adds	r3, r7, r3
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	3301      	adds	r3, #1
 8008014:	2b01      	cmp	r3, #1
 8008016:	9307      	str	r3, [sp, #28]
 8008018:	bfb8      	it	lt
 800801a:	2301      	movlt	r3, #1
 800801c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008020:	2100      	movs	r1, #0
 8008022:	2204      	movs	r2, #4
 8008024:	f102 0514 	add.w	r5, r2, #20
 8008028:	429d      	cmp	r5, r3
 800802a:	d91f      	bls.n	800806c <_dtoa_r+0x2a4>
 800802c:	6041      	str	r1, [r0, #4]
 800802e:	4658      	mov	r0, fp
 8008030:	f000 fd8e 	bl	8008b50 <_Balloc>
 8008034:	4682      	mov	sl, r0
 8008036:	2800      	cmp	r0, #0
 8008038:	d13c      	bne.n	80080b4 <_dtoa_r+0x2ec>
 800803a:	4b1b      	ldr	r3, [pc, #108]	@ (80080a8 <_dtoa_r+0x2e0>)
 800803c:	4602      	mov	r2, r0
 800803e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008042:	e6d8      	b.n	8007df6 <_dtoa_r+0x2e>
 8008044:	2301      	movs	r3, #1
 8008046:	e7e0      	b.n	800800a <_dtoa_r+0x242>
 8008048:	2401      	movs	r4, #1
 800804a:	2300      	movs	r3, #0
 800804c:	9309      	str	r3, [sp, #36]	@ 0x24
 800804e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008050:	f04f 33ff 	mov.w	r3, #4294967295
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	9307      	str	r3, [sp, #28]
 8008058:	2200      	movs	r2, #0
 800805a:	2312      	movs	r3, #18
 800805c:	e7d0      	b.n	8008000 <_dtoa_r+0x238>
 800805e:	2301      	movs	r3, #1
 8008060:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008062:	e7f5      	b.n	8008050 <_dtoa_r+0x288>
 8008064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	9307      	str	r3, [sp, #28]
 800806a:	e7d7      	b.n	800801c <_dtoa_r+0x254>
 800806c:	3101      	adds	r1, #1
 800806e:	0052      	lsls	r2, r2, #1
 8008070:	e7d8      	b.n	8008024 <_dtoa_r+0x25c>
 8008072:	bf00      	nop
 8008074:	f3af 8000 	nop.w
 8008078:	636f4361 	.word	0x636f4361
 800807c:	3fd287a7 	.word	0x3fd287a7
 8008080:	8b60c8b3 	.word	0x8b60c8b3
 8008084:	3fc68a28 	.word	0x3fc68a28
 8008088:	509f79fb 	.word	0x509f79fb
 800808c:	3fd34413 	.word	0x3fd34413
 8008090:	08009d2d 	.word	0x08009d2d
 8008094:	08009d44 	.word	0x08009d44
 8008098:	7ff00000 	.word	0x7ff00000
 800809c:	08009cfd 	.word	0x08009cfd
 80080a0:	3ff80000 	.word	0x3ff80000
 80080a4:	08009e40 	.word	0x08009e40
 80080a8:	08009d9c 	.word	0x08009d9c
 80080ac:	08009d29 	.word	0x08009d29
 80080b0:	08009cfc 	.word	0x08009cfc
 80080b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080b8:	6018      	str	r0, [r3, #0]
 80080ba:	9b07      	ldr	r3, [sp, #28]
 80080bc:	2b0e      	cmp	r3, #14
 80080be:	f200 80a4 	bhi.w	800820a <_dtoa_r+0x442>
 80080c2:	2c00      	cmp	r4, #0
 80080c4:	f000 80a1 	beq.w	800820a <_dtoa_r+0x442>
 80080c8:	2f00      	cmp	r7, #0
 80080ca:	dd33      	ble.n	8008134 <_dtoa_r+0x36c>
 80080cc:	4bad      	ldr	r3, [pc, #692]	@ (8008384 <_dtoa_r+0x5bc>)
 80080ce:	f007 020f 	and.w	r2, r7, #15
 80080d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080d6:	ed93 7b00 	vldr	d7, [r3]
 80080da:	05f8      	lsls	r0, r7, #23
 80080dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80080e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80080e4:	d516      	bpl.n	8008114 <_dtoa_r+0x34c>
 80080e6:	4ba8      	ldr	r3, [pc, #672]	@ (8008388 <_dtoa_r+0x5c0>)
 80080e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080f0:	f7f8 fbb4 	bl	800085c <__aeabi_ddiv>
 80080f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080f8:	f004 040f 	and.w	r4, r4, #15
 80080fc:	2603      	movs	r6, #3
 80080fe:	4da2      	ldr	r5, [pc, #648]	@ (8008388 <_dtoa_r+0x5c0>)
 8008100:	b954      	cbnz	r4, 8008118 <_dtoa_r+0x350>
 8008102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800810a:	f7f8 fba7 	bl	800085c <__aeabi_ddiv>
 800810e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008112:	e028      	b.n	8008166 <_dtoa_r+0x39e>
 8008114:	2602      	movs	r6, #2
 8008116:	e7f2      	b.n	80080fe <_dtoa_r+0x336>
 8008118:	07e1      	lsls	r1, r4, #31
 800811a:	d508      	bpl.n	800812e <_dtoa_r+0x366>
 800811c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008120:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008124:	f7f8 fa70 	bl	8000608 <__aeabi_dmul>
 8008128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800812c:	3601      	adds	r6, #1
 800812e:	1064      	asrs	r4, r4, #1
 8008130:	3508      	adds	r5, #8
 8008132:	e7e5      	b.n	8008100 <_dtoa_r+0x338>
 8008134:	f000 80d2 	beq.w	80082dc <_dtoa_r+0x514>
 8008138:	427c      	negs	r4, r7
 800813a:	4b92      	ldr	r3, [pc, #584]	@ (8008384 <_dtoa_r+0x5bc>)
 800813c:	4d92      	ldr	r5, [pc, #584]	@ (8008388 <_dtoa_r+0x5c0>)
 800813e:	f004 020f 	and.w	r2, r4, #15
 8008142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800814e:	f7f8 fa5b 	bl	8000608 <__aeabi_dmul>
 8008152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008156:	1124      	asrs	r4, r4, #4
 8008158:	2300      	movs	r3, #0
 800815a:	2602      	movs	r6, #2
 800815c:	2c00      	cmp	r4, #0
 800815e:	f040 80b2 	bne.w	80082c6 <_dtoa_r+0x4fe>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1d3      	bne.n	800810e <_dtoa_r+0x346>
 8008166:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008168:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 80b7 	beq.w	80082e0 <_dtoa_r+0x518>
 8008172:	4b86      	ldr	r3, [pc, #536]	@ (800838c <_dtoa_r+0x5c4>)
 8008174:	2200      	movs	r2, #0
 8008176:	4620      	mov	r0, r4
 8008178:	4629      	mov	r1, r5
 800817a:	f7f8 fcb7 	bl	8000aec <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	f000 80ae 	beq.w	80082e0 <_dtoa_r+0x518>
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 80aa 	beq.w	80082e0 <_dtoa_r+0x518>
 800818c:	9b00      	ldr	r3, [sp, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	dd37      	ble.n	8008202 <_dtoa_r+0x43a>
 8008192:	1e7b      	subs	r3, r7, #1
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	4620      	mov	r0, r4
 8008198:	4b7d      	ldr	r3, [pc, #500]	@ (8008390 <_dtoa_r+0x5c8>)
 800819a:	2200      	movs	r2, #0
 800819c:	4629      	mov	r1, r5
 800819e:	f7f8 fa33 	bl	8000608 <__aeabi_dmul>
 80081a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081a6:	9c00      	ldr	r4, [sp, #0]
 80081a8:	3601      	adds	r6, #1
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7f8 f9c2 	bl	8000534 <__aeabi_i2d>
 80081b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081b4:	f7f8 fa28 	bl	8000608 <__aeabi_dmul>
 80081b8:	4b76      	ldr	r3, [pc, #472]	@ (8008394 <_dtoa_r+0x5cc>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	f7f8 f86e 	bl	800029c <__adddf3>
 80081c0:	4605      	mov	r5, r0
 80081c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80081c6:	2c00      	cmp	r4, #0
 80081c8:	f040 808d 	bne.w	80082e6 <_dtoa_r+0x51e>
 80081cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081d0:	4b71      	ldr	r3, [pc, #452]	@ (8008398 <_dtoa_r+0x5d0>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	f7f8 f860 	bl	8000298 <__aeabi_dsub>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081e0:	462a      	mov	r2, r5
 80081e2:	4633      	mov	r3, r6
 80081e4:	f7f8 fca0 	bl	8000b28 <__aeabi_dcmpgt>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f040 828b 	bne.w	8008704 <_dtoa_r+0x93c>
 80081ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f2:	462a      	mov	r2, r5
 80081f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80081f8:	f7f8 fc78 	bl	8000aec <__aeabi_dcmplt>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	f040 8128 	bne.w	8008452 <_dtoa_r+0x68a>
 8008202:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008206:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800820a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800820c:	2b00      	cmp	r3, #0
 800820e:	f2c0 815a 	blt.w	80084c6 <_dtoa_r+0x6fe>
 8008212:	2f0e      	cmp	r7, #14
 8008214:	f300 8157 	bgt.w	80084c6 <_dtoa_r+0x6fe>
 8008218:	4b5a      	ldr	r3, [pc, #360]	@ (8008384 <_dtoa_r+0x5bc>)
 800821a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800821e:	ed93 7b00 	vldr	d7, [r3]
 8008222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008224:	2b00      	cmp	r3, #0
 8008226:	ed8d 7b00 	vstr	d7, [sp]
 800822a:	da03      	bge.n	8008234 <_dtoa_r+0x46c>
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	2b00      	cmp	r3, #0
 8008230:	f340 8101 	ble.w	8008436 <_dtoa_r+0x66e>
 8008234:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008238:	4656      	mov	r6, sl
 800823a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800823e:	4620      	mov	r0, r4
 8008240:	4629      	mov	r1, r5
 8008242:	f7f8 fb0b 	bl	800085c <__aeabi_ddiv>
 8008246:	f7f8 fc8f 	bl	8000b68 <__aeabi_d2iz>
 800824a:	4680      	mov	r8, r0
 800824c:	f7f8 f972 	bl	8000534 <__aeabi_i2d>
 8008250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008254:	f7f8 f9d8 	bl	8000608 <__aeabi_dmul>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4620      	mov	r0, r4
 800825e:	4629      	mov	r1, r5
 8008260:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008264:	f7f8 f818 	bl	8000298 <__aeabi_dsub>
 8008268:	f806 4b01 	strb.w	r4, [r6], #1
 800826c:	9d07      	ldr	r5, [sp, #28]
 800826e:	eba6 040a 	sub.w	r4, r6, sl
 8008272:	42a5      	cmp	r5, r4
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	f040 8117 	bne.w	80084aa <_dtoa_r+0x6e2>
 800827c:	f7f8 f80e 	bl	800029c <__adddf3>
 8008280:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	f7f8 fc4e 	bl	8000b28 <__aeabi_dcmpgt>
 800828c:	2800      	cmp	r0, #0
 800828e:	f040 80f9 	bne.w	8008484 <_dtoa_r+0x6bc>
 8008292:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008296:	4620      	mov	r0, r4
 8008298:	4629      	mov	r1, r5
 800829a:	f7f8 fc1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800829e:	b118      	cbz	r0, 80082a8 <_dtoa_r+0x4e0>
 80082a0:	f018 0f01 	tst.w	r8, #1
 80082a4:	f040 80ee 	bne.w	8008484 <_dtoa_r+0x6bc>
 80082a8:	4649      	mov	r1, r9
 80082aa:	4658      	mov	r0, fp
 80082ac:	f000 fc90 	bl	8008bd0 <_Bfree>
 80082b0:	2300      	movs	r3, #0
 80082b2:	7033      	strb	r3, [r6, #0]
 80082b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082b6:	3701      	adds	r7, #1
 80082b8:	601f      	str	r7, [r3, #0]
 80082ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 831d 	beq.w	80088fc <_dtoa_r+0xb34>
 80082c2:	601e      	str	r6, [r3, #0]
 80082c4:	e31a      	b.n	80088fc <_dtoa_r+0xb34>
 80082c6:	07e2      	lsls	r2, r4, #31
 80082c8:	d505      	bpl.n	80082d6 <_dtoa_r+0x50e>
 80082ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082ce:	f7f8 f99b 	bl	8000608 <__aeabi_dmul>
 80082d2:	3601      	adds	r6, #1
 80082d4:	2301      	movs	r3, #1
 80082d6:	1064      	asrs	r4, r4, #1
 80082d8:	3508      	adds	r5, #8
 80082da:	e73f      	b.n	800815c <_dtoa_r+0x394>
 80082dc:	2602      	movs	r6, #2
 80082de:	e742      	b.n	8008166 <_dtoa_r+0x39e>
 80082e0:	9c07      	ldr	r4, [sp, #28]
 80082e2:	9704      	str	r7, [sp, #16]
 80082e4:	e761      	b.n	80081aa <_dtoa_r+0x3e2>
 80082e6:	4b27      	ldr	r3, [pc, #156]	@ (8008384 <_dtoa_r+0x5bc>)
 80082e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082f2:	4454      	add	r4, sl
 80082f4:	2900      	cmp	r1, #0
 80082f6:	d053      	beq.n	80083a0 <_dtoa_r+0x5d8>
 80082f8:	4928      	ldr	r1, [pc, #160]	@ (800839c <_dtoa_r+0x5d4>)
 80082fa:	2000      	movs	r0, #0
 80082fc:	f7f8 faae 	bl	800085c <__aeabi_ddiv>
 8008300:	4633      	mov	r3, r6
 8008302:	462a      	mov	r2, r5
 8008304:	f7f7 ffc8 	bl	8000298 <__aeabi_dsub>
 8008308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800830c:	4656      	mov	r6, sl
 800830e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008312:	f7f8 fc29 	bl	8000b68 <__aeabi_d2iz>
 8008316:	4605      	mov	r5, r0
 8008318:	f7f8 f90c 	bl	8000534 <__aeabi_i2d>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008324:	f7f7 ffb8 	bl	8000298 <__aeabi_dsub>
 8008328:	3530      	adds	r5, #48	@ 0x30
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008332:	f806 5b01 	strb.w	r5, [r6], #1
 8008336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800833a:	f7f8 fbd7 	bl	8000aec <__aeabi_dcmplt>
 800833e:	2800      	cmp	r0, #0
 8008340:	d171      	bne.n	8008426 <_dtoa_r+0x65e>
 8008342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008346:	4911      	ldr	r1, [pc, #68]	@ (800838c <_dtoa_r+0x5c4>)
 8008348:	2000      	movs	r0, #0
 800834a:	f7f7 ffa5 	bl	8000298 <__aeabi_dsub>
 800834e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008352:	f7f8 fbcb 	bl	8000aec <__aeabi_dcmplt>
 8008356:	2800      	cmp	r0, #0
 8008358:	f040 8095 	bne.w	8008486 <_dtoa_r+0x6be>
 800835c:	42a6      	cmp	r6, r4
 800835e:	f43f af50 	beq.w	8008202 <_dtoa_r+0x43a>
 8008362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008366:	4b0a      	ldr	r3, [pc, #40]	@ (8008390 <_dtoa_r+0x5c8>)
 8008368:	2200      	movs	r2, #0
 800836a:	f7f8 f94d 	bl	8000608 <__aeabi_dmul>
 800836e:	4b08      	ldr	r3, [pc, #32]	@ (8008390 <_dtoa_r+0x5c8>)
 8008370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008374:	2200      	movs	r2, #0
 8008376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800837a:	f7f8 f945 	bl	8000608 <__aeabi_dmul>
 800837e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008382:	e7c4      	b.n	800830e <_dtoa_r+0x546>
 8008384:	08009e40 	.word	0x08009e40
 8008388:	08009e18 	.word	0x08009e18
 800838c:	3ff00000 	.word	0x3ff00000
 8008390:	40240000 	.word	0x40240000
 8008394:	401c0000 	.word	0x401c0000
 8008398:	40140000 	.word	0x40140000
 800839c:	3fe00000 	.word	0x3fe00000
 80083a0:	4631      	mov	r1, r6
 80083a2:	4628      	mov	r0, r5
 80083a4:	f7f8 f930 	bl	8000608 <__aeabi_dmul>
 80083a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80083ae:	4656      	mov	r6, sl
 80083b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083b4:	f7f8 fbd8 	bl	8000b68 <__aeabi_d2iz>
 80083b8:	4605      	mov	r5, r0
 80083ba:	f7f8 f8bb 	bl	8000534 <__aeabi_i2d>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083c6:	f7f7 ff67 	bl	8000298 <__aeabi_dsub>
 80083ca:	3530      	adds	r5, #48	@ 0x30
 80083cc:	f806 5b01 	strb.w	r5, [r6], #1
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	42a6      	cmp	r6, r4
 80083d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083da:	f04f 0200 	mov.w	r2, #0
 80083de:	d124      	bne.n	800842a <_dtoa_r+0x662>
 80083e0:	4bac      	ldr	r3, [pc, #688]	@ (8008694 <_dtoa_r+0x8cc>)
 80083e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083e6:	f7f7 ff59 	bl	800029c <__adddf3>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083f2:	f7f8 fb99 	bl	8000b28 <__aeabi_dcmpgt>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d145      	bne.n	8008486 <_dtoa_r+0x6be>
 80083fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083fe:	49a5      	ldr	r1, [pc, #660]	@ (8008694 <_dtoa_r+0x8cc>)
 8008400:	2000      	movs	r0, #0
 8008402:	f7f7 ff49 	bl	8000298 <__aeabi_dsub>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800840e:	f7f8 fb6d 	bl	8000aec <__aeabi_dcmplt>
 8008412:	2800      	cmp	r0, #0
 8008414:	f43f aef5 	beq.w	8008202 <_dtoa_r+0x43a>
 8008418:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800841a:	1e73      	subs	r3, r6, #1
 800841c:	9315      	str	r3, [sp, #84]	@ 0x54
 800841e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008422:	2b30      	cmp	r3, #48	@ 0x30
 8008424:	d0f8      	beq.n	8008418 <_dtoa_r+0x650>
 8008426:	9f04      	ldr	r7, [sp, #16]
 8008428:	e73e      	b.n	80082a8 <_dtoa_r+0x4e0>
 800842a:	4b9b      	ldr	r3, [pc, #620]	@ (8008698 <_dtoa_r+0x8d0>)
 800842c:	f7f8 f8ec 	bl	8000608 <__aeabi_dmul>
 8008430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008434:	e7bc      	b.n	80083b0 <_dtoa_r+0x5e8>
 8008436:	d10c      	bne.n	8008452 <_dtoa_r+0x68a>
 8008438:	4b98      	ldr	r3, [pc, #608]	@ (800869c <_dtoa_r+0x8d4>)
 800843a:	2200      	movs	r2, #0
 800843c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008440:	f7f8 f8e2 	bl	8000608 <__aeabi_dmul>
 8008444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008448:	f7f8 fb64 	bl	8000b14 <__aeabi_dcmpge>
 800844c:	2800      	cmp	r0, #0
 800844e:	f000 8157 	beq.w	8008700 <_dtoa_r+0x938>
 8008452:	2400      	movs	r4, #0
 8008454:	4625      	mov	r5, r4
 8008456:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008458:	43db      	mvns	r3, r3
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	4656      	mov	r6, sl
 800845e:	2700      	movs	r7, #0
 8008460:	4621      	mov	r1, r4
 8008462:	4658      	mov	r0, fp
 8008464:	f000 fbb4 	bl	8008bd0 <_Bfree>
 8008468:	2d00      	cmp	r5, #0
 800846a:	d0dc      	beq.n	8008426 <_dtoa_r+0x65e>
 800846c:	b12f      	cbz	r7, 800847a <_dtoa_r+0x6b2>
 800846e:	42af      	cmp	r7, r5
 8008470:	d003      	beq.n	800847a <_dtoa_r+0x6b2>
 8008472:	4639      	mov	r1, r7
 8008474:	4658      	mov	r0, fp
 8008476:	f000 fbab 	bl	8008bd0 <_Bfree>
 800847a:	4629      	mov	r1, r5
 800847c:	4658      	mov	r0, fp
 800847e:	f000 fba7 	bl	8008bd0 <_Bfree>
 8008482:	e7d0      	b.n	8008426 <_dtoa_r+0x65e>
 8008484:	9704      	str	r7, [sp, #16]
 8008486:	4633      	mov	r3, r6
 8008488:	461e      	mov	r6, r3
 800848a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800848e:	2a39      	cmp	r2, #57	@ 0x39
 8008490:	d107      	bne.n	80084a2 <_dtoa_r+0x6da>
 8008492:	459a      	cmp	sl, r3
 8008494:	d1f8      	bne.n	8008488 <_dtoa_r+0x6c0>
 8008496:	9a04      	ldr	r2, [sp, #16]
 8008498:	3201      	adds	r2, #1
 800849a:	9204      	str	r2, [sp, #16]
 800849c:	2230      	movs	r2, #48	@ 0x30
 800849e:	f88a 2000 	strb.w	r2, [sl]
 80084a2:	781a      	ldrb	r2, [r3, #0]
 80084a4:	3201      	adds	r2, #1
 80084a6:	701a      	strb	r2, [r3, #0]
 80084a8:	e7bd      	b.n	8008426 <_dtoa_r+0x65e>
 80084aa:	4b7b      	ldr	r3, [pc, #492]	@ (8008698 <_dtoa_r+0x8d0>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	f7f8 f8ab 	bl	8000608 <__aeabi_dmul>
 80084b2:	2200      	movs	r2, #0
 80084b4:	2300      	movs	r3, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	460d      	mov	r5, r1
 80084ba:	f7f8 fb0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80084be:	2800      	cmp	r0, #0
 80084c0:	f43f aebb 	beq.w	800823a <_dtoa_r+0x472>
 80084c4:	e6f0      	b.n	80082a8 <_dtoa_r+0x4e0>
 80084c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80084c8:	2a00      	cmp	r2, #0
 80084ca:	f000 80db 	beq.w	8008684 <_dtoa_r+0x8bc>
 80084ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084d0:	2a01      	cmp	r2, #1
 80084d2:	f300 80bf 	bgt.w	8008654 <_dtoa_r+0x88c>
 80084d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80084d8:	2a00      	cmp	r2, #0
 80084da:	f000 80b7 	beq.w	800864c <_dtoa_r+0x884>
 80084de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80084e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80084e4:	4646      	mov	r6, r8
 80084e6:	9a08      	ldr	r2, [sp, #32]
 80084e8:	2101      	movs	r1, #1
 80084ea:	441a      	add	r2, r3
 80084ec:	4658      	mov	r0, fp
 80084ee:	4498      	add	r8, r3
 80084f0:	9208      	str	r2, [sp, #32]
 80084f2:	f000 fc21 	bl	8008d38 <__i2b>
 80084f6:	4605      	mov	r5, r0
 80084f8:	b15e      	cbz	r6, 8008512 <_dtoa_r+0x74a>
 80084fa:	9b08      	ldr	r3, [sp, #32]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	dd08      	ble.n	8008512 <_dtoa_r+0x74a>
 8008500:	42b3      	cmp	r3, r6
 8008502:	9a08      	ldr	r2, [sp, #32]
 8008504:	bfa8      	it	ge
 8008506:	4633      	movge	r3, r6
 8008508:	eba8 0803 	sub.w	r8, r8, r3
 800850c:	1af6      	subs	r6, r6, r3
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	9308      	str	r3, [sp, #32]
 8008512:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008514:	b1f3      	cbz	r3, 8008554 <_dtoa_r+0x78c>
 8008516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 80b7 	beq.w	800868c <_dtoa_r+0x8c4>
 800851e:	b18c      	cbz	r4, 8008544 <_dtoa_r+0x77c>
 8008520:	4629      	mov	r1, r5
 8008522:	4622      	mov	r2, r4
 8008524:	4658      	mov	r0, fp
 8008526:	f000 fcc7 	bl	8008eb8 <__pow5mult>
 800852a:	464a      	mov	r2, r9
 800852c:	4601      	mov	r1, r0
 800852e:	4605      	mov	r5, r0
 8008530:	4658      	mov	r0, fp
 8008532:	f000 fc17 	bl	8008d64 <__multiply>
 8008536:	4649      	mov	r1, r9
 8008538:	9004      	str	r0, [sp, #16]
 800853a:	4658      	mov	r0, fp
 800853c:	f000 fb48 	bl	8008bd0 <_Bfree>
 8008540:	9b04      	ldr	r3, [sp, #16]
 8008542:	4699      	mov	r9, r3
 8008544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008546:	1b1a      	subs	r2, r3, r4
 8008548:	d004      	beq.n	8008554 <_dtoa_r+0x78c>
 800854a:	4649      	mov	r1, r9
 800854c:	4658      	mov	r0, fp
 800854e:	f000 fcb3 	bl	8008eb8 <__pow5mult>
 8008552:	4681      	mov	r9, r0
 8008554:	2101      	movs	r1, #1
 8008556:	4658      	mov	r0, fp
 8008558:	f000 fbee 	bl	8008d38 <__i2b>
 800855c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800855e:	4604      	mov	r4, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 81cf 	beq.w	8008904 <_dtoa_r+0xb3c>
 8008566:	461a      	mov	r2, r3
 8008568:	4601      	mov	r1, r0
 800856a:	4658      	mov	r0, fp
 800856c:	f000 fca4 	bl	8008eb8 <__pow5mult>
 8008570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008572:	2b01      	cmp	r3, #1
 8008574:	4604      	mov	r4, r0
 8008576:	f300 8095 	bgt.w	80086a4 <_dtoa_r+0x8dc>
 800857a:	9b02      	ldr	r3, [sp, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	f040 8087 	bne.w	8008690 <_dtoa_r+0x8c8>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008588:	2b00      	cmp	r3, #0
 800858a:	f040 8089 	bne.w	80086a0 <_dtoa_r+0x8d8>
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008594:	0d1b      	lsrs	r3, r3, #20
 8008596:	051b      	lsls	r3, r3, #20
 8008598:	b12b      	cbz	r3, 80085a6 <_dtoa_r+0x7de>
 800859a:	9b08      	ldr	r3, [sp, #32]
 800859c:	3301      	adds	r3, #1
 800859e:	9308      	str	r3, [sp, #32]
 80085a0:	f108 0801 	add.w	r8, r8, #1
 80085a4:	2301      	movs	r3, #1
 80085a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80085a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 81b0 	beq.w	8008910 <_dtoa_r+0xb48>
 80085b0:	6923      	ldr	r3, [r4, #16]
 80085b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085b6:	6918      	ldr	r0, [r3, #16]
 80085b8:	f000 fb72 	bl	8008ca0 <__hi0bits>
 80085bc:	f1c0 0020 	rsb	r0, r0, #32
 80085c0:	9b08      	ldr	r3, [sp, #32]
 80085c2:	4418      	add	r0, r3
 80085c4:	f010 001f 	ands.w	r0, r0, #31
 80085c8:	d077      	beq.n	80086ba <_dtoa_r+0x8f2>
 80085ca:	f1c0 0320 	rsb	r3, r0, #32
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	dd6b      	ble.n	80086aa <_dtoa_r+0x8e2>
 80085d2:	9b08      	ldr	r3, [sp, #32]
 80085d4:	f1c0 001c 	rsb	r0, r0, #28
 80085d8:	4403      	add	r3, r0
 80085da:	4480      	add	r8, r0
 80085dc:	4406      	add	r6, r0
 80085de:	9308      	str	r3, [sp, #32]
 80085e0:	f1b8 0f00 	cmp.w	r8, #0
 80085e4:	dd05      	ble.n	80085f2 <_dtoa_r+0x82a>
 80085e6:	4649      	mov	r1, r9
 80085e8:	4642      	mov	r2, r8
 80085ea:	4658      	mov	r0, fp
 80085ec:	f000 fcbe 	bl	8008f6c <__lshift>
 80085f0:	4681      	mov	r9, r0
 80085f2:	9b08      	ldr	r3, [sp, #32]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	dd05      	ble.n	8008604 <_dtoa_r+0x83c>
 80085f8:	4621      	mov	r1, r4
 80085fa:	461a      	mov	r2, r3
 80085fc:	4658      	mov	r0, fp
 80085fe:	f000 fcb5 	bl	8008f6c <__lshift>
 8008602:	4604      	mov	r4, r0
 8008604:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008606:	2b00      	cmp	r3, #0
 8008608:	d059      	beq.n	80086be <_dtoa_r+0x8f6>
 800860a:	4621      	mov	r1, r4
 800860c:	4648      	mov	r0, r9
 800860e:	f000 fd19 	bl	8009044 <__mcmp>
 8008612:	2800      	cmp	r0, #0
 8008614:	da53      	bge.n	80086be <_dtoa_r+0x8f6>
 8008616:	1e7b      	subs	r3, r7, #1
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	4649      	mov	r1, r9
 800861c:	2300      	movs	r3, #0
 800861e:	220a      	movs	r2, #10
 8008620:	4658      	mov	r0, fp
 8008622:	f000 faf7 	bl	8008c14 <__multadd>
 8008626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008628:	4681      	mov	r9, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 8172 	beq.w	8008914 <_dtoa_r+0xb4c>
 8008630:	2300      	movs	r3, #0
 8008632:	4629      	mov	r1, r5
 8008634:	220a      	movs	r2, #10
 8008636:	4658      	mov	r0, fp
 8008638:	f000 faec 	bl	8008c14 <__multadd>
 800863c:	9b00      	ldr	r3, [sp, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	4605      	mov	r5, r0
 8008642:	dc67      	bgt.n	8008714 <_dtoa_r+0x94c>
 8008644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008646:	2b02      	cmp	r3, #2
 8008648:	dc41      	bgt.n	80086ce <_dtoa_r+0x906>
 800864a:	e063      	b.n	8008714 <_dtoa_r+0x94c>
 800864c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800864e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008652:	e746      	b.n	80084e2 <_dtoa_r+0x71a>
 8008654:	9b07      	ldr	r3, [sp, #28]
 8008656:	1e5c      	subs	r4, r3, #1
 8008658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800865a:	42a3      	cmp	r3, r4
 800865c:	bfbf      	itttt	lt
 800865e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008660:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008662:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008664:	1ae3      	sublt	r3, r4, r3
 8008666:	bfb4      	ite	lt
 8008668:	18d2      	addlt	r2, r2, r3
 800866a:	1b1c      	subge	r4, r3, r4
 800866c:	9b07      	ldr	r3, [sp, #28]
 800866e:	bfbc      	itt	lt
 8008670:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008672:	2400      	movlt	r4, #0
 8008674:	2b00      	cmp	r3, #0
 8008676:	bfb5      	itete	lt
 8008678:	eba8 0603 	sublt.w	r6, r8, r3
 800867c:	9b07      	ldrge	r3, [sp, #28]
 800867e:	2300      	movlt	r3, #0
 8008680:	4646      	movge	r6, r8
 8008682:	e730      	b.n	80084e6 <_dtoa_r+0x71e>
 8008684:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008686:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008688:	4646      	mov	r6, r8
 800868a:	e735      	b.n	80084f8 <_dtoa_r+0x730>
 800868c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800868e:	e75c      	b.n	800854a <_dtoa_r+0x782>
 8008690:	2300      	movs	r3, #0
 8008692:	e788      	b.n	80085a6 <_dtoa_r+0x7de>
 8008694:	3fe00000 	.word	0x3fe00000
 8008698:	40240000 	.word	0x40240000
 800869c:	40140000 	.word	0x40140000
 80086a0:	9b02      	ldr	r3, [sp, #8]
 80086a2:	e780      	b.n	80085a6 <_dtoa_r+0x7de>
 80086a4:	2300      	movs	r3, #0
 80086a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80086a8:	e782      	b.n	80085b0 <_dtoa_r+0x7e8>
 80086aa:	d099      	beq.n	80085e0 <_dtoa_r+0x818>
 80086ac:	9a08      	ldr	r2, [sp, #32]
 80086ae:	331c      	adds	r3, #28
 80086b0:	441a      	add	r2, r3
 80086b2:	4498      	add	r8, r3
 80086b4:	441e      	add	r6, r3
 80086b6:	9208      	str	r2, [sp, #32]
 80086b8:	e792      	b.n	80085e0 <_dtoa_r+0x818>
 80086ba:	4603      	mov	r3, r0
 80086bc:	e7f6      	b.n	80086ac <_dtoa_r+0x8e4>
 80086be:	9b07      	ldr	r3, [sp, #28]
 80086c0:	9704      	str	r7, [sp, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dc20      	bgt.n	8008708 <_dtoa_r+0x940>
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	dd1e      	ble.n	800870c <_dtoa_r+0x944>
 80086ce:	9b00      	ldr	r3, [sp, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f47f aec0 	bne.w	8008456 <_dtoa_r+0x68e>
 80086d6:	4621      	mov	r1, r4
 80086d8:	2205      	movs	r2, #5
 80086da:	4658      	mov	r0, fp
 80086dc:	f000 fa9a 	bl	8008c14 <__multadd>
 80086e0:	4601      	mov	r1, r0
 80086e2:	4604      	mov	r4, r0
 80086e4:	4648      	mov	r0, r9
 80086e6:	f000 fcad 	bl	8009044 <__mcmp>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	f77f aeb3 	ble.w	8008456 <_dtoa_r+0x68e>
 80086f0:	4656      	mov	r6, sl
 80086f2:	2331      	movs	r3, #49	@ 0x31
 80086f4:	f806 3b01 	strb.w	r3, [r6], #1
 80086f8:	9b04      	ldr	r3, [sp, #16]
 80086fa:	3301      	adds	r3, #1
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	e6ae      	b.n	800845e <_dtoa_r+0x696>
 8008700:	9c07      	ldr	r4, [sp, #28]
 8008702:	9704      	str	r7, [sp, #16]
 8008704:	4625      	mov	r5, r4
 8008706:	e7f3      	b.n	80086f0 <_dtoa_r+0x928>
 8008708:	9b07      	ldr	r3, [sp, #28]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 8104 	beq.w	800891c <_dtoa_r+0xb54>
 8008714:	2e00      	cmp	r6, #0
 8008716:	dd05      	ble.n	8008724 <_dtoa_r+0x95c>
 8008718:	4629      	mov	r1, r5
 800871a:	4632      	mov	r2, r6
 800871c:	4658      	mov	r0, fp
 800871e:	f000 fc25 	bl	8008f6c <__lshift>
 8008722:	4605      	mov	r5, r0
 8008724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008726:	2b00      	cmp	r3, #0
 8008728:	d05a      	beq.n	80087e0 <_dtoa_r+0xa18>
 800872a:	6869      	ldr	r1, [r5, #4]
 800872c:	4658      	mov	r0, fp
 800872e:	f000 fa0f 	bl	8008b50 <_Balloc>
 8008732:	4606      	mov	r6, r0
 8008734:	b928      	cbnz	r0, 8008742 <_dtoa_r+0x97a>
 8008736:	4b84      	ldr	r3, [pc, #528]	@ (8008948 <_dtoa_r+0xb80>)
 8008738:	4602      	mov	r2, r0
 800873a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800873e:	f7ff bb5a 	b.w	8007df6 <_dtoa_r+0x2e>
 8008742:	692a      	ldr	r2, [r5, #16]
 8008744:	3202      	adds	r2, #2
 8008746:	0092      	lsls	r2, r2, #2
 8008748:	f105 010c 	add.w	r1, r5, #12
 800874c:	300c      	adds	r0, #12
 800874e:	f001 f975 	bl	8009a3c <memcpy>
 8008752:	2201      	movs	r2, #1
 8008754:	4631      	mov	r1, r6
 8008756:	4658      	mov	r0, fp
 8008758:	f000 fc08 	bl	8008f6c <__lshift>
 800875c:	f10a 0301 	add.w	r3, sl, #1
 8008760:	9307      	str	r3, [sp, #28]
 8008762:	9b00      	ldr	r3, [sp, #0]
 8008764:	4453      	add	r3, sl
 8008766:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	462f      	mov	r7, r5
 8008770:	930a      	str	r3, [sp, #40]	@ 0x28
 8008772:	4605      	mov	r5, r0
 8008774:	9b07      	ldr	r3, [sp, #28]
 8008776:	4621      	mov	r1, r4
 8008778:	3b01      	subs	r3, #1
 800877a:	4648      	mov	r0, r9
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	f7ff fa9a 	bl	8007cb6 <quorem>
 8008782:	4639      	mov	r1, r7
 8008784:	9002      	str	r0, [sp, #8]
 8008786:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800878a:	4648      	mov	r0, r9
 800878c:	f000 fc5a 	bl	8009044 <__mcmp>
 8008790:	462a      	mov	r2, r5
 8008792:	9008      	str	r0, [sp, #32]
 8008794:	4621      	mov	r1, r4
 8008796:	4658      	mov	r0, fp
 8008798:	f000 fc70 	bl	800907c <__mdiff>
 800879c:	68c2      	ldr	r2, [r0, #12]
 800879e:	4606      	mov	r6, r0
 80087a0:	bb02      	cbnz	r2, 80087e4 <_dtoa_r+0xa1c>
 80087a2:	4601      	mov	r1, r0
 80087a4:	4648      	mov	r0, r9
 80087a6:	f000 fc4d 	bl	8009044 <__mcmp>
 80087aa:	4602      	mov	r2, r0
 80087ac:	4631      	mov	r1, r6
 80087ae:	4658      	mov	r0, fp
 80087b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80087b2:	f000 fa0d 	bl	8008bd0 <_Bfree>
 80087b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ba:	9e07      	ldr	r6, [sp, #28]
 80087bc:	ea43 0102 	orr.w	r1, r3, r2
 80087c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087c2:	4319      	orrs	r1, r3
 80087c4:	d110      	bne.n	80087e8 <_dtoa_r+0xa20>
 80087c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80087ca:	d029      	beq.n	8008820 <_dtoa_r+0xa58>
 80087cc:	9b08      	ldr	r3, [sp, #32]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dd02      	ble.n	80087d8 <_dtoa_r+0xa10>
 80087d2:	9b02      	ldr	r3, [sp, #8]
 80087d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80087d8:	9b00      	ldr	r3, [sp, #0]
 80087da:	f883 8000 	strb.w	r8, [r3]
 80087de:	e63f      	b.n	8008460 <_dtoa_r+0x698>
 80087e0:	4628      	mov	r0, r5
 80087e2:	e7bb      	b.n	800875c <_dtoa_r+0x994>
 80087e4:	2201      	movs	r2, #1
 80087e6:	e7e1      	b.n	80087ac <_dtoa_r+0x9e4>
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	db04      	blt.n	80087f8 <_dtoa_r+0xa30>
 80087ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087f0:	430b      	orrs	r3, r1
 80087f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80087f4:	430b      	orrs	r3, r1
 80087f6:	d120      	bne.n	800883a <_dtoa_r+0xa72>
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	dded      	ble.n	80087d8 <_dtoa_r+0xa10>
 80087fc:	4649      	mov	r1, r9
 80087fe:	2201      	movs	r2, #1
 8008800:	4658      	mov	r0, fp
 8008802:	f000 fbb3 	bl	8008f6c <__lshift>
 8008806:	4621      	mov	r1, r4
 8008808:	4681      	mov	r9, r0
 800880a:	f000 fc1b 	bl	8009044 <__mcmp>
 800880e:	2800      	cmp	r0, #0
 8008810:	dc03      	bgt.n	800881a <_dtoa_r+0xa52>
 8008812:	d1e1      	bne.n	80087d8 <_dtoa_r+0xa10>
 8008814:	f018 0f01 	tst.w	r8, #1
 8008818:	d0de      	beq.n	80087d8 <_dtoa_r+0xa10>
 800881a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800881e:	d1d8      	bne.n	80087d2 <_dtoa_r+0xa0a>
 8008820:	9a00      	ldr	r2, [sp, #0]
 8008822:	2339      	movs	r3, #57	@ 0x39
 8008824:	7013      	strb	r3, [r2, #0]
 8008826:	4633      	mov	r3, r6
 8008828:	461e      	mov	r6, r3
 800882a:	3b01      	subs	r3, #1
 800882c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008830:	2a39      	cmp	r2, #57	@ 0x39
 8008832:	d052      	beq.n	80088da <_dtoa_r+0xb12>
 8008834:	3201      	adds	r2, #1
 8008836:	701a      	strb	r2, [r3, #0]
 8008838:	e612      	b.n	8008460 <_dtoa_r+0x698>
 800883a:	2a00      	cmp	r2, #0
 800883c:	dd07      	ble.n	800884e <_dtoa_r+0xa86>
 800883e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008842:	d0ed      	beq.n	8008820 <_dtoa_r+0xa58>
 8008844:	9a00      	ldr	r2, [sp, #0]
 8008846:	f108 0301 	add.w	r3, r8, #1
 800884a:	7013      	strb	r3, [r2, #0]
 800884c:	e608      	b.n	8008460 <_dtoa_r+0x698>
 800884e:	9b07      	ldr	r3, [sp, #28]
 8008850:	9a07      	ldr	r2, [sp, #28]
 8008852:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008858:	4293      	cmp	r3, r2
 800885a:	d028      	beq.n	80088ae <_dtoa_r+0xae6>
 800885c:	4649      	mov	r1, r9
 800885e:	2300      	movs	r3, #0
 8008860:	220a      	movs	r2, #10
 8008862:	4658      	mov	r0, fp
 8008864:	f000 f9d6 	bl	8008c14 <__multadd>
 8008868:	42af      	cmp	r7, r5
 800886a:	4681      	mov	r9, r0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	f04f 020a 	mov.w	r2, #10
 8008874:	4639      	mov	r1, r7
 8008876:	4658      	mov	r0, fp
 8008878:	d107      	bne.n	800888a <_dtoa_r+0xac2>
 800887a:	f000 f9cb 	bl	8008c14 <__multadd>
 800887e:	4607      	mov	r7, r0
 8008880:	4605      	mov	r5, r0
 8008882:	9b07      	ldr	r3, [sp, #28]
 8008884:	3301      	adds	r3, #1
 8008886:	9307      	str	r3, [sp, #28]
 8008888:	e774      	b.n	8008774 <_dtoa_r+0x9ac>
 800888a:	f000 f9c3 	bl	8008c14 <__multadd>
 800888e:	4629      	mov	r1, r5
 8008890:	4607      	mov	r7, r0
 8008892:	2300      	movs	r3, #0
 8008894:	220a      	movs	r2, #10
 8008896:	4658      	mov	r0, fp
 8008898:	f000 f9bc 	bl	8008c14 <__multadd>
 800889c:	4605      	mov	r5, r0
 800889e:	e7f0      	b.n	8008882 <_dtoa_r+0xaba>
 80088a0:	9b00      	ldr	r3, [sp, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bfcc      	ite	gt
 80088a6:	461e      	movgt	r6, r3
 80088a8:	2601      	movle	r6, #1
 80088aa:	4456      	add	r6, sl
 80088ac:	2700      	movs	r7, #0
 80088ae:	4649      	mov	r1, r9
 80088b0:	2201      	movs	r2, #1
 80088b2:	4658      	mov	r0, fp
 80088b4:	f000 fb5a 	bl	8008f6c <__lshift>
 80088b8:	4621      	mov	r1, r4
 80088ba:	4681      	mov	r9, r0
 80088bc:	f000 fbc2 	bl	8009044 <__mcmp>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	dcb0      	bgt.n	8008826 <_dtoa_r+0xa5e>
 80088c4:	d102      	bne.n	80088cc <_dtoa_r+0xb04>
 80088c6:	f018 0f01 	tst.w	r8, #1
 80088ca:	d1ac      	bne.n	8008826 <_dtoa_r+0xa5e>
 80088cc:	4633      	mov	r3, r6
 80088ce:	461e      	mov	r6, r3
 80088d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088d4:	2a30      	cmp	r2, #48	@ 0x30
 80088d6:	d0fa      	beq.n	80088ce <_dtoa_r+0xb06>
 80088d8:	e5c2      	b.n	8008460 <_dtoa_r+0x698>
 80088da:	459a      	cmp	sl, r3
 80088dc:	d1a4      	bne.n	8008828 <_dtoa_r+0xa60>
 80088de:	9b04      	ldr	r3, [sp, #16]
 80088e0:	3301      	adds	r3, #1
 80088e2:	9304      	str	r3, [sp, #16]
 80088e4:	2331      	movs	r3, #49	@ 0x31
 80088e6:	f88a 3000 	strb.w	r3, [sl]
 80088ea:	e5b9      	b.n	8008460 <_dtoa_r+0x698>
 80088ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800894c <_dtoa_r+0xb84>
 80088f2:	b11b      	cbz	r3, 80088fc <_dtoa_r+0xb34>
 80088f4:	f10a 0308 	add.w	r3, sl, #8
 80088f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	4650      	mov	r0, sl
 80088fe:	b019      	add	sp, #100	@ 0x64
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008906:	2b01      	cmp	r3, #1
 8008908:	f77f ae37 	ble.w	800857a <_dtoa_r+0x7b2>
 800890c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800890e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008910:	2001      	movs	r0, #1
 8008912:	e655      	b.n	80085c0 <_dtoa_r+0x7f8>
 8008914:	9b00      	ldr	r3, [sp, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	f77f aed6 	ble.w	80086c8 <_dtoa_r+0x900>
 800891c:	4656      	mov	r6, sl
 800891e:	4621      	mov	r1, r4
 8008920:	4648      	mov	r0, r9
 8008922:	f7ff f9c8 	bl	8007cb6 <quorem>
 8008926:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800892a:	f806 8b01 	strb.w	r8, [r6], #1
 800892e:	9b00      	ldr	r3, [sp, #0]
 8008930:	eba6 020a 	sub.w	r2, r6, sl
 8008934:	4293      	cmp	r3, r2
 8008936:	ddb3      	ble.n	80088a0 <_dtoa_r+0xad8>
 8008938:	4649      	mov	r1, r9
 800893a:	2300      	movs	r3, #0
 800893c:	220a      	movs	r2, #10
 800893e:	4658      	mov	r0, fp
 8008940:	f000 f968 	bl	8008c14 <__multadd>
 8008944:	4681      	mov	r9, r0
 8008946:	e7ea      	b.n	800891e <_dtoa_r+0xb56>
 8008948:	08009d9c 	.word	0x08009d9c
 800894c:	08009d20 	.word	0x08009d20

08008950 <_free_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4605      	mov	r5, r0
 8008954:	2900      	cmp	r1, #0
 8008956:	d041      	beq.n	80089dc <_free_r+0x8c>
 8008958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800895c:	1f0c      	subs	r4, r1, #4
 800895e:	2b00      	cmp	r3, #0
 8008960:	bfb8      	it	lt
 8008962:	18e4      	addlt	r4, r4, r3
 8008964:	f000 f8e8 	bl	8008b38 <__malloc_lock>
 8008968:	4a1d      	ldr	r2, [pc, #116]	@ (80089e0 <_free_r+0x90>)
 800896a:	6813      	ldr	r3, [r2, #0]
 800896c:	b933      	cbnz	r3, 800897c <_free_r+0x2c>
 800896e:	6063      	str	r3, [r4, #4]
 8008970:	6014      	str	r4, [r2, #0]
 8008972:	4628      	mov	r0, r5
 8008974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008978:	f000 b8e4 	b.w	8008b44 <__malloc_unlock>
 800897c:	42a3      	cmp	r3, r4
 800897e:	d908      	bls.n	8008992 <_free_r+0x42>
 8008980:	6820      	ldr	r0, [r4, #0]
 8008982:	1821      	adds	r1, r4, r0
 8008984:	428b      	cmp	r3, r1
 8008986:	bf01      	itttt	eq
 8008988:	6819      	ldreq	r1, [r3, #0]
 800898a:	685b      	ldreq	r3, [r3, #4]
 800898c:	1809      	addeq	r1, r1, r0
 800898e:	6021      	streq	r1, [r4, #0]
 8008990:	e7ed      	b.n	800896e <_free_r+0x1e>
 8008992:	461a      	mov	r2, r3
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	b10b      	cbz	r3, 800899c <_free_r+0x4c>
 8008998:	42a3      	cmp	r3, r4
 800899a:	d9fa      	bls.n	8008992 <_free_r+0x42>
 800899c:	6811      	ldr	r1, [r2, #0]
 800899e:	1850      	adds	r0, r2, r1
 80089a0:	42a0      	cmp	r0, r4
 80089a2:	d10b      	bne.n	80089bc <_free_r+0x6c>
 80089a4:	6820      	ldr	r0, [r4, #0]
 80089a6:	4401      	add	r1, r0
 80089a8:	1850      	adds	r0, r2, r1
 80089aa:	4283      	cmp	r3, r0
 80089ac:	6011      	str	r1, [r2, #0]
 80089ae:	d1e0      	bne.n	8008972 <_free_r+0x22>
 80089b0:	6818      	ldr	r0, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	6053      	str	r3, [r2, #4]
 80089b6:	4408      	add	r0, r1
 80089b8:	6010      	str	r0, [r2, #0]
 80089ba:	e7da      	b.n	8008972 <_free_r+0x22>
 80089bc:	d902      	bls.n	80089c4 <_free_r+0x74>
 80089be:	230c      	movs	r3, #12
 80089c0:	602b      	str	r3, [r5, #0]
 80089c2:	e7d6      	b.n	8008972 <_free_r+0x22>
 80089c4:	6820      	ldr	r0, [r4, #0]
 80089c6:	1821      	adds	r1, r4, r0
 80089c8:	428b      	cmp	r3, r1
 80089ca:	bf04      	itt	eq
 80089cc:	6819      	ldreq	r1, [r3, #0]
 80089ce:	685b      	ldreq	r3, [r3, #4]
 80089d0:	6063      	str	r3, [r4, #4]
 80089d2:	bf04      	itt	eq
 80089d4:	1809      	addeq	r1, r1, r0
 80089d6:	6021      	streq	r1, [r4, #0]
 80089d8:	6054      	str	r4, [r2, #4]
 80089da:	e7ca      	b.n	8008972 <_free_r+0x22>
 80089dc:	bd38      	pop	{r3, r4, r5, pc}
 80089de:	bf00      	nop
 80089e0:	2000057c 	.word	0x2000057c

080089e4 <malloc>:
 80089e4:	4b02      	ldr	r3, [pc, #8]	@ (80089f0 <malloc+0xc>)
 80089e6:	4601      	mov	r1, r0
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	f000 b825 	b.w	8008a38 <_malloc_r>
 80089ee:	bf00      	nop
 80089f0:	20000018 	.word	0x20000018

080089f4 <sbrk_aligned>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	4e0f      	ldr	r6, [pc, #60]	@ (8008a34 <sbrk_aligned+0x40>)
 80089f8:	460c      	mov	r4, r1
 80089fa:	6831      	ldr	r1, [r6, #0]
 80089fc:	4605      	mov	r5, r0
 80089fe:	b911      	cbnz	r1, 8008a06 <sbrk_aligned+0x12>
 8008a00:	f001 f80c 	bl	8009a1c <_sbrk_r>
 8008a04:	6030      	str	r0, [r6, #0]
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f001 f807 	bl	8009a1c <_sbrk_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	d103      	bne.n	8008a1a <sbrk_aligned+0x26>
 8008a12:	f04f 34ff 	mov.w	r4, #4294967295
 8008a16:	4620      	mov	r0, r4
 8008a18:	bd70      	pop	{r4, r5, r6, pc}
 8008a1a:	1cc4      	adds	r4, r0, #3
 8008a1c:	f024 0403 	bic.w	r4, r4, #3
 8008a20:	42a0      	cmp	r0, r4
 8008a22:	d0f8      	beq.n	8008a16 <sbrk_aligned+0x22>
 8008a24:	1a21      	subs	r1, r4, r0
 8008a26:	4628      	mov	r0, r5
 8008a28:	f000 fff8 	bl	8009a1c <_sbrk_r>
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d1f2      	bne.n	8008a16 <sbrk_aligned+0x22>
 8008a30:	e7ef      	b.n	8008a12 <sbrk_aligned+0x1e>
 8008a32:	bf00      	nop
 8008a34:	20000578 	.word	0x20000578

08008a38 <_malloc_r>:
 8008a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	1ccd      	adds	r5, r1, #3
 8008a3e:	f025 0503 	bic.w	r5, r5, #3
 8008a42:	3508      	adds	r5, #8
 8008a44:	2d0c      	cmp	r5, #12
 8008a46:	bf38      	it	cc
 8008a48:	250c      	movcc	r5, #12
 8008a4a:	2d00      	cmp	r5, #0
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	db01      	blt.n	8008a54 <_malloc_r+0x1c>
 8008a50:	42a9      	cmp	r1, r5
 8008a52:	d904      	bls.n	8008a5e <_malloc_r+0x26>
 8008a54:	230c      	movs	r3, #12
 8008a56:	6033      	str	r3, [r6, #0]
 8008a58:	2000      	movs	r0, #0
 8008a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b34 <_malloc_r+0xfc>
 8008a62:	f000 f869 	bl	8008b38 <__malloc_lock>
 8008a66:	f8d8 3000 	ldr.w	r3, [r8]
 8008a6a:	461c      	mov	r4, r3
 8008a6c:	bb44      	cbnz	r4, 8008ac0 <_malloc_r+0x88>
 8008a6e:	4629      	mov	r1, r5
 8008a70:	4630      	mov	r0, r6
 8008a72:	f7ff ffbf 	bl	80089f4 <sbrk_aligned>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	4604      	mov	r4, r0
 8008a7a:	d158      	bne.n	8008b2e <_malloc_r+0xf6>
 8008a7c:	f8d8 4000 	ldr.w	r4, [r8]
 8008a80:	4627      	mov	r7, r4
 8008a82:	2f00      	cmp	r7, #0
 8008a84:	d143      	bne.n	8008b0e <_malloc_r+0xd6>
 8008a86:	2c00      	cmp	r4, #0
 8008a88:	d04b      	beq.n	8008b22 <_malloc_r+0xea>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	4630      	mov	r0, r6
 8008a90:	eb04 0903 	add.w	r9, r4, r3
 8008a94:	f000 ffc2 	bl	8009a1c <_sbrk_r>
 8008a98:	4581      	cmp	r9, r0
 8008a9a:	d142      	bne.n	8008b22 <_malloc_r+0xea>
 8008a9c:	6821      	ldr	r1, [r4, #0]
 8008a9e:	1a6d      	subs	r5, r5, r1
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff ffa6 	bl	80089f4 <sbrk_aligned>
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d03a      	beq.n	8008b22 <_malloc_r+0xea>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	442b      	add	r3, r5
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	bb62      	cbnz	r2, 8008b14 <_malloc_r+0xdc>
 8008aba:	f8c8 7000 	str.w	r7, [r8]
 8008abe:	e00f      	b.n	8008ae0 <_malloc_r+0xa8>
 8008ac0:	6822      	ldr	r2, [r4, #0]
 8008ac2:	1b52      	subs	r2, r2, r5
 8008ac4:	d420      	bmi.n	8008b08 <_malloc_r+0xd0>
 8008ac6:	2a0b      	cmp	r2, #11
 8008ac8:	d917      	bls.n	8008afa <_malloc_r+0xc2>
 8008aca:	1961      	adds	r1, r4, r5
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	6025      	str	r5, [r4, #0]
 8008ad0:	bf18      	it	ne
 8008ad2:	6059      	strne	r1, [r3, #4]
 8008ad4:	6863      	ldr	r3, [r4, #4]
 8008ad6:	bf08      	it	eq
 8008ad8:	f8c8 1000 	streq.w	r1, [r8]
 8008adc:	5162      	str	r2, [r4, r5]
 8008ade:	604b      	str	r3, [r1, #4]
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f000 f82f 	bl	8008b44 <__malloc_unlock>
 8008ae6:	f104 000b 	add.w	r0, r4, #11
 8008aea:	1d23      	adds	r3, r4, #4
 8008aec:	f020 0007 	bic.w	r0, r0, #7
 8008af0:	1ac2      	subs	r2, r0, r3
 8008af2:	bf1c      	itt	ne
 8008af4:	1a1b      	subne	r3, r3, r0
 8008af6:	50a3      	strne	r3, [r4, r2]
 8008af8:	e7af      	b.n	8008a5a <_malloc_r+0x22>
 8008afa:	6862      	ldr	r2, [r4, #4]
 8008afc:	42a3      	cmp	r3, r4
 8008afe:	bf0c      	ite	eq
 8008b00:	f8c8 2000 	streq.w	r2, [r8]
 8008b04:	605a      	strne	r2, [r3, #4]
 8008b06:	e7eb      	b.n	8008ae0 <_malloc_r+0xa8>
 8008b08:	4623      	mov	r3, r4
 8008b0a:	6864      	ldr	r4, [r4, #4]
 8008b0c:	e7ae      	b.n	8008a6c <_malloc_r+0x34>
 8008b0e:	463c      	mov	r4, r7
 8008b10:	687f      	ldr	r7, [r7, #4]
 8008b12:	e7b6      	b.n	8008a82 <_malloc_r+0x4a>
 8008b14:	461a      	mov	r2, r3
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	d1fb      	bne.n	8008b14 <_malloc_r+0xdc>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	6053      	str	r3, [r2, #4]
 8008b20:	e7de      	b.n	8008ae0 <_malloc_r+0xa8>
 8008b22:	230c      	movs	r3, #12
 8008b24:	6033      	str	r3, [r6, #0]
 8008b26:	4630      	mov	r0, r6
 8008b28:	f000 f80c 	bl	8008b44 <__malloc_unlock>
 8008b2c:	e794      	b.n	8008a58 <_malloc_r+0x20>
 8008b2e:	6005      	str	r5, [r0, #0]
 8008b30:	e7d6      	b.n	8008ae0 <_malloc_r+0xa8>
 8008b32:	bf00      	nop
 8008b34:	2000057c 	.word	0x2000057c

08008b38 <__malloc_lock>:
 8008b38:	4801      	ldr	r0, [pc, #4]	@ (8008b40 <__malloc_lock+0x8>)
 8008b3a:	f7ff b8ba 	b.w	8007cb2 <__retarget_lock_acquire_recursive>
 8008b3e:	bf00      	nop
 8008b40:	20000574 	.word	0x20000574

08008b44 <__malloc_unlock>:
 8008b44:	4801      	ldr	r0, [pc, #4]	@ (8008b4c <__malloc_unlock+0x8>)
 8008b46:	f7ff b8b5 	b.w	8007cb4 <__retarget_lock_release_recursive>
 8008b4a:	bf00      	nop
 8008b4c:	20000574 	.word	0x20000574

08008b50 <_Balloc>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	69c6      	ldr	r6, [r0, #28]
 8008b54:	4604      	mov	r4, r0
 8008b56:	460d      	mov	r5, r1
 8008b58:	b976      	cbnz	r6, 8008b78 <_Balloc+0x28>
 8008b5a:	2010      	movs	r0, #16
 8008b5c:	f7ff ff42 	bl	80089e4 <malloc>
 8008b60:	4602      	mov	r2, r0
 8008b62:	61e0      	str	r0, [r4, #28]
 8008b64:	b920      	cbnz	r0, 8008b70 <_Balloc+0x20>
 8008b66:	4b18      	ldr	r3, [pc, #96]	@ (8008bc8 <_Balloc+0x78>)
 8008b68:	4818      	ldr	r0, [pc, #96]	@ (8008bcc <_Balloc+0x7c>)
 8008b6a:	216b      	movs	r1, #107	@ 0x6b
 8008b6c:	f000 ff74 	bl	8009a58 <__assert_func>
 8008b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b74:	6006      	str	r6, [r0, #0]
 8008b76:	60c6      	str	r6, [r0, #12]
 8008b78:	69e6      	ldr	r6, [r4, #28]
 8008b7a:	68f3      	ldr	r3, [r6, #12]
 8008b7c:	b183      	cbz	r3, 8008ba0 <_Balloc+0x50>
 8008b7e:	69e3      	ldr	r3, [r4, #28]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b86:	b9b8      	cbnz	r0, 8008bb8 <_Balloc+0x68>
 8008b88:	2101      	movs	r1, #1
 8008b8a:	fa01 f605 	lsl.w	r6, r1, r5
 8008b8e:	1d72      	adds	r2, r6, #5
 8008b90:	0092      	lsls	r2, r2, #2
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 ff7e 	bl	8009a94 <_calloc_r>
 8008b98:	b160      	cbz	r0, 8008bb4 <_Balloc+0x64>
 8008b9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b9e:	e00e      	b.n	8008bbe <_Balloc+0x6e>
 8008ba0:	2221      	movs	r2, #33	@ 0x21
 8008ba2:	2104      	movs	r1, #4
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f000 ff75 	bl	8009a94 <_calloc_r>
 8008baa:	69e3      	ldr	r3, [r4, #28]
 8008bac:	60f0      	str	r0, [r6, #12]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1e4      	bne.n	8008b7e <_Balloc+0x2e>
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	6802      	ldr	r2, [r0, #0]
 8008bba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bc4:	e7f7      	b.n	8008bb6 <_Balloc+0x66>
 8008bc6:	bf00      	nop
 8008bc8:	08009d2d 	.word	0x08009d2d
 8008bcc:	08009dad 	.word	0x08009dad

08008bd0 <_Bfree>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	69c6      	ldr	r6, [r0, #28]
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	b976      	cbnz	r6, 8008bf8 <_Bfree+0x28>
 8008bda:	2010      	movs	r0, #16
 8008bdc:	f7ff ff02 	bl	80089e4 <malloc>
 8008be0:	4602      	mov	r2, r0
 8008be2:	61e8      	str	r0, [r5, #28]
 8008be4:	b920      	cbnz	r0, 8008bf0 <_Bfree+0x20>
 8008be6:	4b09      	ldr	r3, [pc, #36]	@ (8008c0c <_Bfree+0x3c>)
 8008be8:	4809      	ldr	r0, [pc, #36]	@ (8008c10 <_Bfree+0x40>)
 8008bea:	218f      	movs	r1, #143	@ 0x8f
 8008bec:	f000 ff34 	bl	8009a58 <__assert_func>
 8008bf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bf4:	6006      	str	r6, [r0, #0]
 8008bf6:	60c6      	str	r6, [r0, #12]
 8008bf8:	b13c      	cbz	r4, 8008c0a <_Bfree+0x3a>
 8008bfa:	69eb      	ldr	r3, [r5, #28]
 8008bfc:	6862      	ldr	r2, [r4, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c04:	6021      	str	r1, [r4, #0]
 8008c06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}
 8008c0c:	08009d2d 	.word	0x08009d2d
 8008c10:	08009dad 	.word	0x08009dad

08008c14 <__multadd>:
 8008c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c18:	690d      	ldr	r5, [r1, #16]
 8008c1a:	4607      	mov	r7, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	461e      	mov	r6, r3
 8008c20:	f101 0c14 	add.w	ip, r1, #20
 8008c24:	2000      	movs	r0, #0
 8008c26:	f8dc 3000 	ldr.w	r3, [ip]
 8008c2a:	b299      	uxth	r1, r3
 8008c2c:	fb02 6101 	mla	r1, r2, r1, r6
 8008c30:	0c1e      	lsrs	r6, r3, #16
 8008c32:	0c0b      	lsrs	r3, r1, #16
 8008c34:	fb02 3306 	mla	r3, r2, r6, r3
 8008c38:	b289      	uxth	r1, r1
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c40:	4285      	cmp	r5, r0
 8008c42:	f84c 1b04 	str.w	r1, [ip], #4
 8008c46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c4a:	dcec      	bgt.n	8008c26 <__multadd+0x12>
 8008c4c:	b30e      	cbz	r6, 8008c92 <__multadd+0x7e>
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	42ab      	cmp	r3, r5
 8008c52:	dc19      	bgt.n	8008c88 <__multadd+0x74>
 8008c54:	6861      	ldr	r1, [r4, #4]
 8008c56:	4638      	mov	r0, r7
 8008c58:	3101      	adds	r1, #1
 8008c5a:	f7ff ff79 	bl	8008b50 <_Balloc>
 8008c5e:	4680      	mov	r8, r0
 8008c60:	b928      	cbnz	r0, 8008c6e <__multadd+0x5a>
 8008c62:	4602      	mov	r2, r0
 8008c64:	4b0c      	ldr	r3, [pc, #48]	@ (8008c98 <__multadd+0x84>)
 8008c66:	480d      	ldr	r0, [pc, #52]	@ (8008c9c <__multadd+0x88>)
 8008c68:	21ba      	movs	r1, #186	@ 0xba
 8008c6a:	f000 fef5 	bl	8009a58 <__assert_func>
 8008c6e:	6922      	ldr	r2, [r4, #16]
 8008c70:	3202      	adds	r2, #2
 8008c72:	f104 010c 	add.w	r1, r4, #12
 8008c76:	0092      	lsls	r2, r2, #2
 8008c78:	300c      	adds	r0, #12
 8008c7a:	f000 fedf 	bl	8009a3c <memcpy>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4638      	mov	r0, r7
 8008c82:	f7ff ffa5 	bl	8008bd0 <_Bfree>
 8008c86:	4644      	mov	r4, r8
 8008c88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c8c:	3501      	adds	r5, #1
 8008c8e:	615e      	str	r6, [r3, #20]
 8008c90:	6125      	str	r5, [r4, #16]
 8008c92:	4620      	mov	r0, r4
 8008c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c98:	08009d9c 	.word	0x08009d9c
 8008c9c:	08009dad 	.word	0x08009dad

08008ca0 <__hi0bits>:
 8008ca0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	bf36      	itet	cc
 8008ca8:	0403      	lslcc	r3, r0, #16
 8008caa:	2000      	movcs	r0, #0
 8008cac:	2010      	movcc	r0, #16
 8008cae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cb2:	bf3c      	itt	cc
 8008cb4:	021b      	lslcc	r3, r3, #8
 8008cb6:	3008      	addcc	r0, #8
 8008cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cbc:	bf3c      	itt	cc
 8008cbe:	011b      	lslcc	r3, r3, #4
 8008cc0:	3004      	addcc	r0, #4
 8008cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc6:	bf3c      	itt	cc
 8008cc8:	009b      	lslcc	r3, r3, #2
 8008cca:	3002      	addcc	r0, #2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	db05      	blt.n	8008cdc <__hi0bits+0x3c>
 8008cd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008cd4:	f100 0001 	add.w	r0, r0, #1
 8008cd8:	bf08      	it	eq
 8008cda:	2020      	moveq	r0, #32
 8008cdc:	4770      	bx	lr

08008cde <__lo0bits>:
 8008cde:	6803      	ldr	r3, [r0, #0]
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	f013 0007 	ands.w	r0, r3, #7
 8008ce6:	d00b      	beq.n	8008d00 <__lo0bits+0x22>
 8008ce8:	07d9      	lsls	r1, r3, #31
 8008cea:	d421      	bmi.n	8008d30 <__lo0bits+0x52>
 8008cec:	0798      	lsls	r0, r3, #30
 8008cee:	bf49      	itett	mi
 8008cf0:	085b      	lsrmi	r3, r3, #1
 8008cf2:	089b      	lsrpl	r3, r3, #2
 8008cf4:	2001      	movmi	r0, #1
 8008cf6:	6013      	strmi	r3, [r2, #0]
 8008cf8:	bf5c      	itt	pl
 8008cfa:	6013      	strpl	r3, [r2, #0]
 8008cfc:	2002      	movpl	r0, #2
 8008cfe:	4770      	bx	lr
 8008d00:	b299      	uxth	r1, r3
 8008d02:	b909      	cbnz	r1, 8008d08 <__lo0bits+0x2a>
 8008d04:	0c1b      	lsrs	r3, r3, #16
 8008d06:	2010      	movs	r0, #16
 8008d08:	b2d9      	uxtb	r1, r3
 8008d0a:	b909      	cbnz	r1, 8008d10 <__lo0bits+0x32>
 8008d0c:	3008      	adds	r0, #8
 8008d0e:	0a1b      	lsrs	r3, r3, #8
 8008d10:	0719      	lsls	r1, r3, #28
 8008d12:	bf04      	itt	eq
 8008d14:	091b      	lsreq	r3, r3, #4
 8008d16:	3004      	addeq	r0, #4
 8008d18:	0799      	lsls	r1, r3, #30
 8008d1a:	bf04      	itt	eq
 8008d1c:	089b      	lsreq	r3, r3, #2
 8008d1e:	3002      	addeq	r0, #2
 8008d20:	07d9      	lsls	r1, r3, #31
 8008d22:	d403      	bmi.n	8008d2c <__lo0bits+0x4e>
 8008d24:	085b      	lsrs	r3, r3, #1
 8008d26:	f100 0001 	add.w	r0, r0, #1
 8008d2a:	d003      	beq.n	8008d34 <__lo0bits+0x56>
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	4770      	bx	lr
 8008d30:	2000      	movs	r0, #0
 8008d32:	4770      	bx	lr
 8008d34:	2020      	movs	r0, #32
 8008d36:	4770      	bx	lr

08008d38 <__i2b>:
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	f7ff ff07 	bl	8008b50 <_Balloc>
 8008d42:	4602      	mov	r2, r0
 8008d44:	b928      	cbnz	r0, 8008d52 <__i2b+0x1a>
 8008d46:	4b05      	ldr	r3, [pc, #20]	@ (8008d5c <__i2b+0x24>)
 8008d48:	4805      	ldr	r0, [pc, #20]	@ (8008d60 <__i2b+0x28>)
 8008d4a:	f240 1145 	movw	r1, #325	@ 0x145
 8008d4e:	f000 fe83 	bl	8009a58 <__assert_func>
 8008d52:	2301      	movs	r3, #1
 8008d54:	6144      	str	r4, [r0, #20]
 8008d56:	6103      	str	r3, [r0, #16]
 8008d58:	bd10      	pop	{r4, pc}
 8008d5a:	bf00      	nop
 8008d5c:	08009d9c 	.word	0x08009d9c
 8008d60:	08009dad 	.word	0x08009dad

08008d64 <__multiply>:
 8008d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d68:	4614      	mov	r4, r2
 8008d6a:	690a      	ldr	r2, [r1, #16]
 8008d6c:	6923      	ldr	r3, [r4, #16]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	bfa8      	it	ge
 8008d72:	4623      	movge	r3, r4
 8008d74:	460f      	mov	r7, r1
 8008d76:	bfa4      	itt	ge
 8008d78:	460c      	movge	r4, r1
 8008d7a:	461f      	movge	r7, r3
 8008d7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008d80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008d84:	68a3      	ldr	r3, [r4, #8]
 8008d86:	6861      	ldr	r1, [r4, #4]
 8008d88:	eb0a 0609 	add.w	r6, sl, r9
 8008d8c:	42b3      	cmp	r3, r6
 8008d8e:	b085      	sub	sp, #20
 8008d90:	bfb8      	it	lt
 8008d92:	3101      	addlt	r1, #1
 8008d94:	f7ff fedc 	bl	8008b50 <_Balloc>
 8008d98:	b930      	cbnz	r0, 8008da8 <__multiply+0x44>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	4b44      	ldr	r3, [pc, #272]	@ (8008eb0 <__multiply+0x14c>)
 8008d9e:	4845      	ldr	r0, [pc, #276]	@ (8008eb4 <__multiply+0x150>)
 8008da0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008da4:	f000 fe58 	bl	8009a58 <__assert_func>
 8008da8:	f100 0514 	add.w	r5, r0, #20
 8008dac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008db0:	462b      	mov	r3, r5
 8008db2:	2200      	movs	r2, #0
 8008db4:	4543      	cmp	r3, r8
 8008db6:	d321      	bcc.n	8008dfc <__multiply+0x98>
 8008db8:	f107 0114 	add.w	r1, r7, #20
 8008dbc:	f104 0214 	add.w	r2, r4, #20
 8008dc0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008dc4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008dc8:	9302      	str	r3, [sp, #8]
 8008dca:	1b13      	subs	r3, r2, r4
 8008dcc:	3b15      	subs	r3, #21
 8008dce:	f023 0303 	bic.w	r3, r3, #3
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	f104 0715 	add.w	r7, r4, #21
 8008dd8:	42ba      	cmp	r2, r7
 8008dda:	bf38      	it	cc
 8008ddc:	2304      	movcc	r3, #4
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	9b02      	ldr	r3, [sp, #8]
 8008de2:	9103      	str	r1, [sp, #12]
 8008de4:	428b      	cmp	r3, r1
 8008de6:	d80c      	bhi.n	8008e02 <__multiply+0x9e>
 8008de8:	2e00      	cmp	r6, #0
 8008dea:	dd03      	ble.n	8008df4 <__multiply+0x90>
 8008dec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d05b      	beq.n	8008eac <__multiply+0x148>
 8008df4:	6106      	str	r6, [r0, #16]
 8008df6:	b005      	add	sp, #20
 8008df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfc:	f843 2b04 	str.w	r2, [r3], #4
 8008e00:	e7d8      	b.n	8008db4 <__multiply+0x50>
 8008e02:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e06:	f1ba 0f00 	cmp.w	sl, #0
 8008e0a:	d024      	beq.n	8008e56 <__multiply+0xf2>
 8008e0c:	f104 0e14 	add.w	lr, r4, #20
 8008e10:	46a9      	mov	r9, r5
 8008e12:	f04f 0c00 	mov.w	ip, #0
 8008e16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e1a:	f8d9 3000 	ldr.w	r3, [r9]
 8008e1e:	fa1f fb87 	uxth.w	fp, r7
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	fb0a 330b 	mla	r3, sl, fp, r3
 8008e28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008e2c:	f8d9 7000 	ldr.w	r7, [r9]
 8008e30:	4463      	add	r3, ip
 8008e32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008e36:	fb0a c70b 	mla	r7, sl, fp, ip
 8008e3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e44:	4572      	cmp	r2, lr
 8008e46:	f849 3b04 	str.w	r3, [r9], #4
 8008e4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008e4e:	d8e2      	bhi.n	8008e16 <__multiply+0xb2>
 8008e50:	9b01      	ldr	r3, [sp, #4]
 8008e52:	f845 c003 	str.w	ip, [r5, r3]
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008e5c:	3104      	adds	r1, #4
 8008e5e:	f1b9 0f00 	cmp.w	r9, #0
 8008e62:	d021      	beq.n	8008ea8 <__multiply+0x144>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	f104 0c14 	add.w	ip, r4, #20
 8008e6a:	46ae      	mov	lr, r5
 8008e6c:	f04f 0a00 	mov.w	sl, #0
 8008e70:	f8bc b000 	ldrh.w	fp, [ip]
 8008e74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008e78:	fb09 770b 	mla	r7, r9, fp, r7
 8008e7c:	4457      	add	r7, sl
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e84:	f84e 3b04 	str.w	r3, [lr], #4
 8008e88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e90:	f8be 3000 	ldrh.w	r3, [lr]
 8008e94:	fb09 330a 	mla	r3, r9, sl, r3
 8008e98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e9c:	4562      	cmp	r2, ip
 8008e9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ea2:	d8e5      	bhi.n	8008e70 <__multiply+0x10c>
 8008ea4:	9f01      	ldr	r7, [sp, #4]
 8008ea6:	51eb      	str	r3, [r5, r7]
 8008ea8:	3504      	adds	r5, #4
 8008eaa:	e799      	b.n	8008de0 <__multiply+0x7c>
 8008eac:	3e01      	subs	r6, #1
 8008eae:	e79b      	b.n	8008de8 <__multiply+0x84>
 8008eb0:	08009d9c 	.word	0x08009d9c
 8008eb4:	08009dad 	.word	0x08009dad

08008eb8 <__pow5mult>:
 8008eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ebc:	4615      	mov	r5, r2
 8008ebe:	f012 0203 	ands.w	r2, r2, #3
 8008ec2:	4607      	mov	r7, r0
 8008ec4:	460e      	mov	r6, r1
 8008ec6:	d007      	beq.n	8008ed8 <__pow5mult+0x20>
 8008ec8:	4c25      	ldr	r4, [pc, #148]	@ (8008f60 <__pow5mult+0xa8>)
 8008eca:	3a01      	subs	r2, #1
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ed2:	f7ff fe9f 	bl	8008c14 <__multadd>
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	10ad      	asrs	r5, r5, #2
 8008eda:	d03d      	beq.n	8008f58 <__pow5mult+0xa0>
 8008edc:	69fc      	ldr	r4, [r7, #28]
 8008ede:	b97c      	cbnz	r4, 8008f00 <__pow5mult+0x48>
 8008ee0:	2010      	movs	r0, #16
 8008ee2:	f7ff fd7f 	bl	80089e4 <malloc>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	61f8      	str	r0, [r7, #28]
 8008eea:	b928      	cbnz	r0, 8008ef8 <__pow5mult+0x40>
 8008eec:	4b1d      	ldr	r3, [pc, #116]	@ (8008f64 <__pow5mult+0xac>)
 8008eee:	481e      	ldr	r0, [pc, #120]	@ (8008f68 <__pow5mult+0xb0>)
 8008ef0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ef4:	f000 fdb0 	bl	8009a58 <__assert_func>
 8008ef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008efc:	6004      	str	r4, [r0, #0]
 8008efe:	60c4      	str	r4, [r0, #12]
 8008f00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f08:	b94c      	cbnz	r4, 8008f1e <__pow5mult+0x66>
 8008f0a:	f240 2171 	movw	r1, #625	@ 0x271
 8008f0e:	4638      	mov	r0, r7
 8008f10:	f7ff ff12 	bl	8008d38 <__i2b>
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	6003      	str	r3, [r0, #0]
 8008f1e:	f04f 0900 	mov.w	r9, #0
 8008f22:	07eb      	lsls	r3, r5, #31
 8008f24:	d50a      	bpl.n	8008f3c <__pow5mult+0x84>
 8008f26:	4631      	mov	r1, r6
 8008f28:	4622      	mov	r2, r4
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	f7ff ff1a 	bl	8008d64 <__multiply>
 8008f30:	4631      	mov	r1, r6
 8008f32:	4680      	mov	r8, r0
 8008f34:	4638      	mov	r0, r7
 8008f36:	f7ff fe4b 	bl	8008bd0 <_Bfree>
 8008f3a:	4646      	mov	r6, r8
 8008f3c:	106d      	asrs	r5, r5, #1
 8008f3e:	d00b      	beq.n	8008f58 <__pow5mult+0xa0>
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	b938      	cbnz	r0, 8008f54 <__pow5mult+0x9c>
 8008f44:	4622      	mov	r2, r4
 8008f46:	4621      	mov	r1, r4
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f7ff ff0b 	bl	8008d64 <__multiply>
 8008f4e:	6020      	str	r0, [r4, #0]
 8008f50:	f8c0 9000 	str.w	r9, [r0]
 8008f54:	4604      	mov	r4, r0
 8008f56:	e7e4      	b.n	8008f22 <__pow5mult+0x6a>
 8008f58:	4630      	mov	r0, r6
 8008f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f5e:	bf00      	nop
 8008f60:	08009e08 	.word	0x08009e08
 8008f64:	08009d2d 	.word	0x08009d2d
 8008f68:	08009dad 	.word	0x08009dad

08008f6c <__lshift>:
 8008f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	460c      	mov	r4, r1
 8008f72:	6849      	ldr	r1, [r1, #4]
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f7a:	68a3      	ldr	r3, [r4, #8]
 8008f7c:	4607      	mov	r7, r0
 8008f7e:	4691      	mov	r9, r2
 8008f80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f84:	f108 0601 	add.w	r6, r8, #1
 8008f88:	42b3      	cmp	r3, r6
 8008f8a:	db0b      	blt.n	8008fa4 <__lshift+0x38>
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	f7ff fddf 	bl	8008b50 <_Balloc>
 8008f92:	4605      	mov	r5, r0
 8008f94:	b948      	cbnz	r0, 8008faa <__lshift+0x3e>
 8008f96:	4602      	mov	r2, r0
 8008f98:	4b28      	ldr	r3, [pc, #160]	@ (800903c <__lshift+0xd0>)
 8008f9a:	4829      	ldr	r0, [pc, #164]	@ (8009040 <__lshift+0xd4>)
 8008f9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008fa0:	f000 fd5a 	bl	8009a58 <__assert_func>
 8008fa4:	3101      	adds	r1, #1
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	e7ee      	b.n	8008f88 <__lshift+0x1c>
 8008faa:	2300      	movs	r3, #0
 8008fac:	f100 0114 	add.w	r1, r0, #20
 8008fb0:	f100 0210 	add.w	r2, r0, #16
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	4553      	cmp	r3, sl
 8008fb8:	db33      	blt.n	8009022 <__lshift+0xb6>
 8008fba:	6920      	ldr	r0, [r4, #16]
 8008fbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fc0:	f104 0314 	add.w	r3, r4, #20
 8008fc4:	f019 091f 	ands.w	r9, r9, #31
 8008fc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fd0:	d02b      	beq.n	800902a <__lshift+0xbe>
 8008fd2:	f1c9 0e20 	rsb	lr, r9, #32
 8008fd6:	468a      	mov	sl, r1
 8008fd8:	2200      	movs	r2, #0
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	fa00 f009 	lsl.w	r0, r0, r9
 8008fe0:	4310      	orrs	r0, r2
 8008fe2:	f84a 0b04 	str.w	r0, [sl], #4
 8008fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fea:	459c      	cmp	ip, r3
 8008fec:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ff0:	d8f3      	bhi.n	8008fda <__lshift+0x6e>
 8008ff2:	ebac 0304 	sub.w	r3, ip, r4
 8008ff6:	3b15      	subs	r3, #21
 8008ff8:	f023 0303 	bic.w	r3, r3, #3
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	f104 0015 	add.w	r0, r4, #21
 8009002:	4584      	cmp	ip, r0
 8009004:	bf38      	it	cc
 8009006:	2304      	movcc	r3, #4
 8009008:	50ca      	str	r2, [r1, r3]
 800900a:	b10a      	cbz	r2, 8009010 <__lshift+0xa4>
 800900c:	f108 0602 	add.w	r6, r8, #2
 8009010:	3e01      	subs	r6, #1
 8009012:	4638      	mov	r0, r7
 8009014:	612e      	str	r6, [r5, #16]
 8009016:	4621      	mov	r1, r4
 8009018:	f7ff fdda 	bl	8008bd0 <_Bfree>
 800901c:	4628      	mov	r0, r5
 800901e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009022:	f842 0f04 	str.w	r0, [r2, #4]!
 8009026:	3301      	adds	r3, #1
 8009028:	e7c5      	b.n	8008fb6 <__lshift+0x4a>
 800902a:	3904      	subs	r1, #4
 800902c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009030:	f841 2f04 	str.w	r2, [r1, #4]!
 8009034:	459c      	cmp	ip, r3
 8009036:	d8f9      	bhi.n	800902c <__lshift+0xc0>
 8009038:	e7ea      	b.n	8009010 <__lshift+0xa4>
 800903a:	bf00      	nop
 800903c:	08009d9c 	.word	0x08009d9c
 8009040:	08009dad 	.word	0x08009dad

08009044 <__mcmp>:
 8009044:	690a      	ldr	r2, [r1, #16]
 8009046:	4603      	mov	r3, r0
 8009048:	6900      	ldr	r0, [r0, #16]
 800904a:	1a80      	subs	r0, r0, r2
 800904c:	b530      	push	{r4, r5, lr}
 800904e:	d10e      	bne.n	800906e <__mcmp+0x2a>
 8009050:	3314      	adds	r3, #20
 8009052:	3114      	adds	r1, #20
 8009054:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009058:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800905c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009064:	4295      	cmp	r5, r2
 8009066:	d003      	beq.n	8009070 <__mcmp+0x2c>
 8009068:	d205      	bcs.n	8009076 <__mcmp+0x32>
 800906a:	f04f 30ff 	mov.w	r0, #4294967295
 800906e:	bd30      	pop	{r4, r5, pc}
 8009070:	42a3      	cmp	r3, r4
 8009072:	d3f3      	bcc.n	800905c <__mcmp+0x18>
 8009074:	e7fb      	b.n	800906e <__mcmp+0x2a>
 8009076:	2001      	movs	r0, #1
 8009078:	e7f9      	b.n	800906e <__mcmp+0x2a>
	...

0800907c <__mdiff>:
 800907c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009080:	4689      	mov	r9, r1
 8009082:	4606      	mov	r6, r0
 8009084:	4611      	mov	r1, r2
 8009086:	4648      	mov	r0, r9
 8009088:	4614      	mov	r4, r2
 800908a:	f7ff ffdb 	bl	8009044 <__mcmp>
 800908e:	1e05      	subs	r5, r0, #0
 8009090:	d112      	bne.n	80090b8 <__mdiff+0x3c>
 8009092:	4629      	mov	r1, r5
 8009094:	4630      	mov	r0, r6
 8009096:	f7ff fd5b 	bl	8008b50 <_Balloc>
 800909a:	4602      	mov	r2, r0
 800909c:	b928      	cbnz	r0, 80090aa <__mdiff+0x2e>
 800909e:	4b3f      	ldr	r3, [pc, #252]	@ (800919c <__mdiff+0x120>)
 80090a0:	f240 2137 	movw	r1, #567	@ 0x237
 80090a4:	483e      	ldr	r0, [pc, #248]	@ (80091a0 <__mdiff+0x124>)
 80090a6:	f000 fcd7 	bl	8009a58 <__assert_func>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090b0:	4610      	mov	r0, r2
 80090b2:	b003      	add	sp, #12
 80090b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b8:	bfbc      	itt	lt
 80090ba:	464b      	movlt	r3, r9
 80090bc:	46a1      	movlt	r9, r4
 80090be:	4630      	mov	r0, r6
 80090c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80090c4:	bfba      	itte	lt
 80090c6:	461c      	movlt	r4, r3
 80090c8:	2501      	movlt	r5, #1
 80090ca:	2500      	movge	r5, #0
 80090cc:	f7ff fd40 	bl	8008b50 <_Balloc>
 80090d0:	4602      	mov	r2, r0
 80090d2:	b918      	cbnz	r0, 80090dc <__mdiff+0x60>
 80090d4:	4b31      	ldr	r3, [pc, #196]	@ (800919c <__mdiff+0x120>)
 80090d6:	f240 2145 	movw	r1, #581	@ 0x245
 80090da:	e7e3      	b.n	80090a4 <__mdiff+0x28>
 80090dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80090e0:	6926      	ldr	r6, [r4, #16]
 80090e2:	60c5      	str	r5, [r0, #12]
 80090e4:	f109 0310 	add.w	r3, r9, #16
 80090e8:	f109 0514 	add.w	r5, r9, #20
 80090ec:	f104 0e14 	add.w	lr, r4, #20
 80090f0:	f100 0b14 	add.w	fp, r0, #20
 80090f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80090f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	46d9      	mov	r9, fp
 8009100:	f04f 0c00 	mov.w	ip, #0
 8009104:	9b01      	ldr	r3, [sp, #4]
 8009106:	f85e 0b04 	ldr.w	r0, [lr], #4
 800910a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	fa1f f38a 	uxth.w	r3, sl
 8009114:	4619      	mov	r1, r3
 8009116:	b283      	uxth	r3, r0
 8009118:	1acb      	subs	r3, r1, r3
 800911a:	0c00      	lsrs	r0, r0, #16
 800911c:	4463      	add	r3, ip
 800911e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009122:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009126:	b29b      	uxth	r3, r3
 8009128:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800912c:	4576      	cmp	r6, lr
 800912e:	f849 3b04 	str.w	r3, [r9], #4
 8009132:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009136:	d8e5      	bhi.n	8009104 <__mdiff+0x88>
 8009138:	1b33      	subs	r3, r6, r4
 800913a:	3b15      	subs	r3, #21
 800913c:	f023 0303 	bic.w	r3, r3, #3
 8009140:	3415      	adds	r4, #21
 8009142:	3304      	adds	r3, #4
 8009144:	42a6      	cmp	r6, r4
 8009146:	bf38      	it	cc
 8009148:	2304      	movcc	r3, #4
 800914a:	441d      	add	r5, r3
 800914c:	445b      	add	r3, fp
 800914e:	461e      	mov	r6, r3
 8009150:	462c      	mov	r4, r5
 8009152:	4544      	cmp	r4, r8
 8009154:	d30e      	bcc.n	8009174 <__mdiff+0xf8>
 8009156:	f108 0103 	add.w	r1, r8, #3
 800915a:	1b49      	subs	r1, r1, r5
 800915c:	f021 0103 	bic.w	r1, r1, #3
 8009160:	3d03      	subs	r5, #3
 8009162:	45a8      	cmp	r8, r5
 8009164:	bf38      	it	cc
 8009166:	2100      	movcc	r1, #0
 8009168:	440b      	add	r3, r1
 800916a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800916e:	b191      	cbz	r1, 8009196 <__mdiff+0x11a>
 8009170:	6117      	str	r7, [r2, #16]
 8009172:	e79d      	b.n	80090b0 <__mdiff+0x34>
 8009174:	f854 1b04 	ldr.w	r1, [r4], #4
 8009178:	46e6      	mov	lr, ip
 800917a:	0c08      	lsrs	r0, r1, #16
 800917c:	fa1c fc81 	uxtah	ip, ip, r1
 8009180:	4471      	add	r1, lr
 8009182:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009186:	b289      	uxth	r1, r1
 8009188:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800918c:	f846 1b04 	str.w	r1, [r6], #4
 8009190:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009194:	e7dd      	b.n	8009152 <__mdiff+0xd6>
 8009196:	3f01      	subs	r7, #1
 8009198:	e7e7      	b.n	800916a <__mdiff+0xee>
 800919a:	bf00      	nop
 800919c:	08009d9c 	.word	0x08009d9c
 80091a0:	08009dad 	.word	0x08009dad

080091a4 <__d2b>:
 80091a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091a8:	460f      	mov	r7, r1
 80091aa:	2101      	movs	r1, #1
 80091ac:	ec59 8b10 	vmov	r8, r9, d0
 80091b0:	4616      	mov	r6, r2
 80091b2:	f7ff fccd 	bl	8008b50 <_Balloc>
 80091b6:	4604      	mov	r4, r0
 80091b8:	b930      	cbnz	r0, 80091c8 <__d2b+0x24>
 80091ba:	4602      	mov	r2, r0
 80091bc:	4b23      	ldr	r3, [pc, #140]	@ (800924c <__d2b+0xa8>)
 80091be:	4824      	ldr	r0, [pc, #144]	@ (8009250 <__d2b+0xac>)
 80091c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80091c4:	f000 fc48 	bl	8009a58 <__assert_func>
 80091c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091d0:	b10d      	cbz	r5, 80091d6 <__d2b+0x32>
 80091d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091d6:	9301      	str	r3, [sp, #4]
 80091d8:	f1b8 0300 	subs.w	r3, r8, #0
 80091dc:	d023      	beq.n	8009226 <__d2b+0x82>
 80091de:	4668      	mov	r0, sp
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	f7ff fd7c 	bl	8008cde <__lo0bits>
 80091e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80091ea:	b1d0      	cbz	r0, 8009222 <__d2b+0x7e>
 80091ec:	f1c0 0320 	rsb	r3, r0, #32
 80091f0:	fa02 f303 	lsl.w	r3, r2, r3
 80091f4:	430b      	orrs	r3, r1
 80091f6:	40c2      	lsrs	r2, r0
 80091f8:	6163      	str	r3, [r4, #20]
 80091fa:	9201      	str	r2, [sp, #4]
 80091fc:	9b01      	ldr	r3, [sp, #4]
 80091fe:	61a3      	str	r3, [r4, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	bf0c      	ite	eq
 8009204:	2201      	moveq	r2, #1
 8009206:	2202      	movne	r2, #2
 8009208:	6122      	str	r2, [r4, #16]
 800920a:	b1a5      	cbz	r5, 8009236 <__d2b+0x92>
 800920c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009210:	4405      	add	r5, r0
 8009212:	603d      	str	r5, [r7, #0]
 8009214:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009218:	6030      	str	r0, [r6, #0]
 800921a:	4620      	mov	r0, r4
 800921c:	b003      	add	sp, #12
 800921e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009222:	6161      	str	r1, [r4, #20]
 8009224:	e7ea      	b.n	80091fc <__d2b+0x58>
 8009226:	a801      	add	r0, sp, #4
 8009228:	f7ff fd59 	bl	8008cde <__lo0bits>
 800922c:	9b01      	ldr	r3, [sp, #4]
 800922e:	6163      	str	r3, [r4, #20]
 8009230:	3020      	adds	r0, #32
 8009232:	2201      	movs	r2, #1
 8009234:	e7e8      	b.n	8009208 <__d2b+0x64>
 8009236:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800923a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800923e:	6038      	str	r0, [r7, #0]
 8009240:	6918      	ldr	r0, [r3, #16]
 8009242:	f7ff fd2d 	bl	8008ca0 <__hi0bits>
 8009246:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800924a:	e7e5      	b.n	8009218 <__d2b+0x74>
 800924c:	08009d9c 	.word	0x08009d9c
 8009250:	08009dad 	.word	0x08009dad

08009254 <__ssputs_r>:
 8009254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009258:	688e      	ldr	r6, [r1, #8]
 800925a:	461f      	mov	r7, r3
 800925c:	42be      	cmp	r6, r7
 800925e:	680b      	ldr	r3, [r1, #0]
 8009260:	4682      	mov	sl, r0
 8009262:	460c      	mov	r4, r1
 8009264:	4690      	mov	r8, r2
 8009266:	d82d      	bhi.n	80092c4 <__ssputs_r+0x70>
 8009268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800926c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009270:	d026      	beq.n	80092c0 <__ssputs_r+0x6c>
 8009272:	6965      	ldr	r5, [r4, #20]
 8009274:	6909      	ldr	r1, [r1, #16]
 8009276:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800927a:	eba3 0901 	sub.w	r9, r3, r1
 800927e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009282:	1c7b      	adds	r3, r7, #1
 8009284:	444b      	add	r3, r9
 8009286:	106d      	asrs	r5, r5, #1
 8009288:	429d      	cmp	r5, r3
 800928a:	bf38      	it	cc
 800928c:	461d      	movcc	r5, r3
 800928e:	0553      	lsls	r3, r2, #21
 8009290:	d527      	bpl.n	80092e2 <__ssputs_r+0x8e>
 8009292:	4629      	mov	r1, r5
 8009294:	f7ff fbd0 	bl	8008a38 <_malloc_r>
 8009298:	4606      	mov	r6, r0
 800929a:	b360      	cbz	r0, 80092f6 <__ssputs_r+0xa2>
 800929c:	6921      	ldr	r1, [r4, #16]
 800929e:	464a      	mov	r2, r9
 80092a0:	f000 fbcc 	bl	8009a3c <memcpy>
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80092aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ae:	81a3      	strh	r3, [r4, #12]
 80092b0:	6126      	str	r6, [r4, #16]
 80092b2:	6165      	str	r5, [r4, #20]
 80092b4:	444e      	add	r6, r9
 80092b6:	eba5 0509 	sub.w	r5, r5, r9
 80092ba:	6026      	str	r6, [r4, #0]
 80092bc:	60a5      	str	r5, [r4, #8]
 80092be:	463e      	mov	r6, r7
 80092c0:	42be      	cmp	r6, r7
 80092c2:	d900      	bls.n	80092c6 <__ssputs_r+0x72>
 80092c4:	463e      	mov	r6, r7
 80092c6:	6820      	ldr	r0, [r4, #0]
 80092c8:	4632      	mov	r2, r6
 80092ca:	4641      	mov	r1, r8
 80092cc:	f000 fb6a 	bl	80099a4 <memmove>
 80092d0:	68a3      	ldr	r3, [r4, #8]
 80092d2:	1b9b      	subs	r3, r3, r6
 80092d4:	60a3      	str	r3, [r4, #8]
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	4433      	add	r3, r6
 80092da:	6023      	str	r3, [r4, #0]
 80092dc:	2000      	movs	r0, #0
 80092de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e2:	462a      	mov	r2, r5
 80092e4:	f000 fbfc 	bl	8009ae0 <_realloc_r>
 80092e8:	4606      	mov	r6, r0
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d1e0      	bne.n	80092b0 <__ssputs_r+0x5c>
 80092ee:	6921      	ldr	r1, [r4, #16]
 80092f0:	4650      	mov	r0, sl
 80092f2:	f7ff fb2d 	bl	8008950 <_free_r>
 80092f6:	230c      	movs	r3, #12
 80092f8:	f8ca 3000 	str.w	r3, [sl]
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	f04f 30ff 	mov.w	r0, #4294967295
 8009308:	e7e9      	b.n	80092de <__ssputs_r+0x8a>
	...

0800930c <_svfiprintf_r>:
 800930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	4698      	mov	r8, r3
 8009312:	898b      	ldrh	r3, [r1, #12]
 8009314:	061b      	lsls	r3, r3, #24
 8009316:	b09d      	sub	sp, #116	@ 0x74
 8009318:	4607      	mov	r7, r0
 800931a:	460d      	mov	r5, r1
 800931c:	4614      	mov	r4, r2
 800931e:	d510      	bpl.n	8009342 <_svfiprintf_r+0x36>
 8009320:	690b      	ldr	r3, [r1, #16]
 8009322:	b973      	cbnz	r3, 8009342 <_svfiprintf_r+0x36>
 8009324:	2140      	movs	r1, #64	@ 0x40
 8009326:	f7ff fb87 	bl	8008a38 <_malloc_r>
 800932a:	6028      	str	r0, [r5, #0]
 800932c:	6128      	str	r0, [r5, #16]
 800932e:	b930      	cbnz	r0, 800933e <_svfiprintf_r+0x32>
 8009330:	230c      	movs	r3, #12
 8009332:	603b      	str	r3, [r7, #0]
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	b01d      	add	sp, #116	@ 0x74
 800933a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933e:	2340      	movs	r3, #64	@ 0x40
 8009340:	616b      	str	r3, [r5, #20]
 8009342:	2300      	movs	r3, #0
 8009344:	9309      	str	r3, [sp, #36]	@ 0x24
 8009346:	2320      	movs	r3, #32
 8009348:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800934c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009350:	2330      	movs	r3, #48	@ 0x30
 8009352:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80094f0 <_svfiprintf_r+0x1e4>
 8009356:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800935a:	f04f 0901 	mov.w	r9, #1
 800935e:	4623      	mov	r3, r4
 8009360:	469a      	mov	sl, r3
 8009362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009366:	b10a      	cbz	r2, 800936c <_svfiprintf_r+0x60>
 8009368:	2a25      	cmp	r2, #37	@ 0x25
 800936a:	d1f9      	bne.n	8009360 <_svfiprintf_r+0x54>
 800936c:	ebba 0b04 	subs.w	fp, sl, r4
 8009370:	d00b      	beq.n	800938a <_svfiprintf_r+0x7e>
 8009372:	465b      	mov	r3, fp
 8009374:	4622      	mov	r2, r4
 8009376:	4629      	mov	r1, r5
 8009378:	4638      	mov	r0, r7
 800937a:	f7ff ff6b 	bl	8009254 <__ssputs_r>
 800937e:	3001      	adds	r0, #1
 8009380:	f000 80a7 	beq.w	80094d2 <_svfiprintf_r+0x1c6>
 8009384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009386:	445a      	add	r2, fp
 8009388:	9209      	str	r2, [sp, #36]	@ 0x24
 800938a:	f89a 3000 	ldrb.w	r3, [sl]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 809f 	beq.w	80094d2 <_svfiprintf_r+0x1c6>
 8009394:	2300      	movs	r3, #0
 8009396:	f04f 32ff 	mov.w	r2, #4294967295
 800939a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800939e:	f10a 0a01 	add.w	sl, sl, #1
 80093a2:	9304      	str	r3, [sp, #16]
 80093a4:	9307      	str	r3, [sp, #28]
 80093a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80093ac:	4654      	mov	r4, sl
 80093ae:	2205      	movs	r2, #5
 80093b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b4:	484e      	ldr	r0, [pc, #312]	@ (80094f0 <_svfiprintf_r+0x1e4>)
 80093b6:	f7f6 ff13 	bl	80001e0 <memchr>
 80093ba:	9a04      	ldr	r2, [sp, #16]
 80093bc:	b9d8      	cbnz	r0, 80093f6 <_svfiprintf_r+0xea>
 80093be:	06d0      	lsls	r0, r2, #27
 80093c0:	bf44      	itt	mi
 80093c2:	2320      	movmi	r3, #32
 80093c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093c8:	0711      	lsls	r1, r2, #28
 80093ca:	bf44      	itt	mi
 80093cc:	232b      	movmi	r3, #43	@ 0x2b
 80093ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093d2:	f89a 3000 	ldrb.w	r3, [sl]
 80093d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80093d8:	d015      	beq.n	8009406 <_svfiprintf_r+0xfa>
 80093da:	9a07      	ldr	r2, [sp, #28]
 80093dc:	4654      	mov	r4, sl
 80093de:	2000      	movs	r0, #0
 80093e0:	f04f 0c0a 	mov.w	ip, #10
 80093e4:	4621      	mov	r1, r4
 80093e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ea:	3b30      	subs	r3, #48	@ 0x30
 80093ec:	2b09      	cmp	r3, #9
 80093ee:	d94b      	bls.n	8009488 <_svfiprintf_r+0x17c>
 80093f0:	b1b0      	cbz	r0, 8009420 <_svfiprintf_r+0x114>
 80093f2:	9207      	str	r2, [sp, #28]
 80093f4:	e014      	b.n	8009420 <_svfiprintf_r+0x114>
 80093f6:	eba0 0308 	sub.w	r3, r0, r8
 80093fa:	fa09 f303 	lsl.w	r3, r9, r3
 80093fe:	4313      	orrs	r3, r2
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	46a2      	mov	sl, r4
 8009404:	e7d2      	b.n	80093ac <_svfiprintf_r+0xa0>
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	1d19      	adds	r1, r3, #4
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	9103      	str	r1, [sp, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	bfbb      	ittet	lt
 8009412:	425b      	neglt	r3, r3
 8009414:	f042 0202 	orrlt.w	r2, r2, #2
 8009418:	9307      	strge	r3, [sp, #28]
 800941a:	9307      	strlt	r3, [sp, #28]
 800941c:	bfb8      	it	lt
 800941e:	9204      	strlt	r2, [sp, #16]
 8009420:	7823      	ldrb	r3, [r4, #0]
 8009422:	2b2e      	cmp	r3, #46	@ 0x2e
 8009424:	d10a      	bne.n	800943c <_svfiprintf_r+0x130>
 8009426:	7863      	ldrb	r3, [r4, #1]
 8009428:	2b2a      	cmp	r3, #42	@ 0x2a
 800942a:	d132      	bne.n	8009492 <_svfiprintf_r+0x186>
 800942c:	9b03      	ldr	r3, [sp, #12]
 800942e:	1d1a      	adds	r2, r3, #4
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	9203      	str	r2, [sp, #12]
 8009434:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009438:	3402      	adds	r4, #2
 800943a:	9305      	str	r3, [sp, #20]
 800943c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009500 <_svfiprintf_r+0x1f4>
 8009440:	7821      	ldrb	r1, [r4, #0]
 8009442:	2203      	movs	r2, #3
 8009444:	4650      	mov	r0, sl
 8009446:	f7f6 fecb 	bl	80001e0 <memchr>
 800944a:	b138      	cbz	r0, 800945c <_svfiprintf_r+0x150>
 800944c:	9b04      	ldr	r3, [sp, #16]
 800944e:	eba0 000a 	sub.w	r0, r0, sl
 8009452:	2240      	movs	r2, #64	@ 0x40
 8009454:	4082      	lsls	r2, r0
 8009456:	4313      	orrs	r3, r2
 8009458:	3401      	adds	r4, #1
 800945a:	9304      	str	r3, [sp, #16]
 800945c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009460:	4824      	ldr	r0, [pc, #144]	@ (80094f4 <_svfiprintf_r+0x1e8>)
 8009462:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009466:	2206      	movs	r2, #6
 8009468:	f7f6 feba 	bl	80001e0 <memchr>
 800946c:	2800      	cmp	r0, #0
 800946e:	d036      	beq.n	80094de <_svfiprintf_r+0x1d2>
 8009470:	4b21      	ldr	r3, [pc, #132]	@ (80094f8 <_svfiprintf_r+0x1ec>)
 8009472:	bb1b      	cbnz	r3, 80094bc <_svfiprintf_r+0x1b0>
 8009474:	9b03      	ldr	r3, [sp, #12]
 8009476:	3307      	adds	r3, #7
 8009478:	f023 0307 	bic.w	r3, r3, #7
 800947c:	3308      	adds	r3, #8
 800947e:	9303      	str	r3, [sp, #12]
 8009480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009482:	4433      	add	r3, r6
 8009484:	9309      	str	r3, [sp, #36]	@ 0x24
 8009486:	e76a      	b.n	800935e <_svfiprintf_r+0x52>
 8009488:	fb0c 3202 	mla	r2, ip, r2, r3
 800948c:	460c      	mov	r4, r1
 800948e:	2001      	movs	r0, #1
 8009490:	e7a8      	b.n	80093e4 <_svfiprintf_r+0xd8>
 8009492:	2300      	movs	r3, #0
 8009494:	3401      	adds	r4, #1
 8009496:	9305      	str	r3, [sp, #20]
 8009498:	4619      	mov	r1, r3
 800949a:	f04f 0c0a 	mov.w	ip, #10
 800949e:	4620      	mov	r0, r4
 80094a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094a4:	3a30      	subs	r2, #48	@ 0x30
 80094a6:	2a09      	cmp	r2, #9
 80094a8:	d903      	bls.n	80094b2 <_svfiprintf_r+0x1a6>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0c6      	beq.n	800943c <_svfiprintf_r+0x130>
 80094ae:	9105      	str	r1, [sp, #20]
 80094b0:	e7c4      	b.n	800943c <_svfiprintf_r+0x130>
 80094b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80094b6:	4604      	mov	r4, r0
 80094b8:	2301      	movs	r3, #1
 80094ba:	e7f0      	b.n	800949e <_svfiprintf_r+0x192>
 80094bc:	ab03      	add	r3, sp, #12
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	462a      	mov	r2, r5
 80094c2:	4b0e      	ldr	r3, [pc, #56]	@ (80094fc <_svfiprintf_r+0x1f0>)
 80094c4:	a904      	add	r1, sp, #16
 80094c6:	4638      	mov	r0, r7
 80094c8:	f7fd fd94 	bl	8006ff4 <_printf_float>
 80094cc:	1c42      	adds	r2, r0, #1
 80094ce:	4606      	mov	r6, r0
 80094d0:	d1d6      	bne.n	8009480 <_svfiprintf_r+0x174>
 80094d2:	89ab      	ldrh	r3, [r5, #12]
 80094d4:	065b      	lsls	r3, r3, #25
 80094d6:	f53f af2d 	bmi.w	8009334 <_svfiprintf_r+0x28>
 80094da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094dc:	e72c      	b.n	8009338 <_svfiprintf_r+0x2c>
 80094de:	ab03      	add	r3, sp, #12
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	462a      	mov	r2, r5
 80094e4:	4b05      	ldr	r3, [pc, #20]	@ (80094fc <_svfiprintf_r+0x1f0>)
 80094e6:	a904      	add	r1, sp, #16
 80094e8:	4638      	mov	r0, r7
 80094ea:	f7fe f81b 	bl	8007524 <_printf_i>
 80094ee:	e7ed      	b.n	80094cc <_svfiprintf_r+0x1c0>
 80094f0:	08009f08 	.word	0x08009f08
 80094f4:	08009f12 	.word	0x08009f12
 80094f8:	08006ff5 	.word	0x08006ff5
 80094fc:	08009255 	.word	0x08009255
 8009500:	08009f0e 	.word	0x08009f0e

08009504 <__sfputc_r>:
 8009504:	6893      	ldr	r3, [r2, #8]
 8009506:	3b01      	subs	r3, #1
 8009508:	2b00      	cmp	r3, #0
 800950a:	b410      	push	{r4}
 800950c:	6093      	str	r3, [r2, #8]
 800950e:	da08      	bge.n	8009522 <__sfputc_r+0x1e>
 8009510:	6994      	ldr	r4, [r2, #24]
 8009512:	42a3      	cmp	r3, r4
 8009514:	db01      	blt.n	800951a <__sfputc_r+0x16>
 8009516:	290a      	cmp	r1, #10
 8009518:	d103      	bne.n	8009522 <__sfputc_r+0x1e>
 800951a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800951e:	f7fe bab6 	b.w	8007a8e <__swbuf_r>
 8009522:	6813      	ldr	r3, [r2, #0]
 8009524:	1c58      	adds	r0, r3, #1
 8009526:	6010      	str	r0, [r2, #0]
 8009528:	7019      	strb	r1, [r3, #0]
 800952a:	4608      	mov	r0, r1
 800952c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009530:	4770      	bx	lr

08009532 <__sfputs_r>:
 8009532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009534:	4606      	mov	r6, r0
 8009536:	460f      	mov	r7, r1
 8009538:	4614      	mov	r4, r2
 800953a:	18d5      	adds	r5, r2, r3
 800953c:	42ac      	cmp	r4, r5
 800953e:	d101      	bne.n	8009544 <__sfputs_r+0x12>
 8009540:	2000      	movs	r0, #0
 8009542:	e007      	b.n	8009554 <__sfputs_r+0x22>
 8009544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009548:	463a      	mov	r2, r7
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff ffda 	bl	8009504 <__sfputc_r>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	d1f3      	bne.n	800953c <__sfputs_r+0xa>
 8009554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009558 <_vfiprintf_r>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	460d      	mov	r5, r1
 800955e:	b09d      	sub	sp, #116	@ 0x74
 8009560:	4614      	mov	r4, r2
 8009562:	4698      	mov	r8, r3
 8009564:	4606      	mov	r6, r0
 8009566:	b118      	cbz	r0, 8009570 <_vfiprintf_r+0x18>
 8009568:	6a03      	ldr	r3, [r0, #32]
 800956a:	b90b      	cbnz	r3, 8009570 <_vfiprintf_r+0x18>
 800956c:	f7fe f986 	bl	800787c <__sinit>
 8009570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009572:	07d9      	lsls	r1, r3, #31
 8009574:	d405      	bmi.n	8009582 <_vfiprintf_r+0x2a>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	059a      	lsls	r2, r3, #22
 800957a:	d402      	bmi.n	8009582 <_vfiprintf_r+0x2a>
 800957c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800957e:	f7fe fb98 	bl	8007cb2 <__retarget_lock_acquire_recursive>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	071b      	lsls	r3, r3, #28
 8009586:	d501      	bpl.n	800958c <_vfiprintf_r+0x34>
 8009588:	692b      	ldr	r3, [r5, #16]
 800958a:	b99b      	cbnz	r3, 80095b4 <_vfiprintf_r+0x5c>
 800958c:	4629      	mov	r1, r5
 800958e:	4630      	mov	r0, r6
 8009590:	f7fe fabc 	bl	8007b0c <__swsetup_r>
 8009594:	b170      	cbz	r0, 80095b4 <_vfiprintf_r+0x5c>
 8009596:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009598:	07dc      	lsls	r4, r3, #31
 800959a:	d504      	bpl.n	80095a6 <_vfiprintf_r+0x4e>
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	b01d      	add	sp, #116	@ 0x74
 80095a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a6:	89ab      	ldrh	r3, [r5, #12]
 80095a8:	0598      	lsls	r0, r3, #22
 80095aa:	d4f7      	bmi.n	800959c <_vfiprintf_r+0x44>
 80095ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ae:	f7fe fb81 	bl	8007cb4 <__retarget_lock_release_recursive>
 80095b2:	e7f3      	b.n	800959c <_vfiprintf_r+0x44>
 80095b4:	2300      	movs	r3, #0
 80095b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80095b8:	2320      	movs	r3, #32
 80095ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095be:	f8cd 800c 	str.w	r8, [sp, #12]
 80095c2:	2330      	movs	r3, #48	@ 0x30
 80095c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009774 <_vfiprintf_r+0x21c>
 80095c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095cc:	f04f 0901 	mov.w	r9, #1
 80095d0:	4623      	mov	r3, r4
 80095d2:	469a      	mov	sl, r3
 80095d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095d8:	b10a      	cbz	r2, 80095de <_vfiprintf_r+0x86>
 80095da:	2a25      	cmp	r2, #37	@ 0x25
 80095dc:	d1f9      	bne.n	80095d2 <_vfiprintf_r+0x7a>
 80095de:	ebba 0b04 	subs.w	fp, sl, r4
 80095e2:	d00b      	beq.n	80095fc <_vfiprintf_r+0xa4>
 80095e4:	465b      	mov	r3, fp
 80095e6:	4622      	mov	r2, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	4630      	mov	r0, r6
 80095ec:	f7ff ffa1 	bl	8009532 <__sfputs_r>
 80095f0:	3001      	adds	r0, #1
 80095f2:	f000 80a7 	beq.w	8009744 <_vfiprintf_r+0x1ec>
 80095f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095f8:	445a      	add	r2, fp
 80095fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80095fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 809f 	beq.w	8009744 <_vfiprintf_r+0x1ec>
 8009606:	2300      	movs	r3, #0
 8009608:	f04f 32ff 	mov.w	r2, #4294967295
 800960c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009610:	f10a 0a01 	add.w	sl, sl, #1
 8009614:	9304      	str	r3, [sp, #16]
 8009616:	9307      	str	r3, [sp, #28]
 8009618:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800961c:	931a      	str	r3, [sp, #104]	@ 0x68
 800961e:	4654      	mov	r4, sl
 8009620:	2205      	movs	r2, #5
 8009622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009626:	4853      	ldr	r0, [pc, #332]	@ (8009774 <_vfiprintf_r+0x21c>)
 8009628:	f7f6 fdda 	bl	80001e0 <memchr>
 800962c:	9a04      	ldr	r2, [sp, #16]
 800962e:	b9d8      	cbnz	r0, 8009668 <_vfiprintf_r+0x110>
 8009630:	06d1      	lsls	r1, r2, #27
 8009632:	bf44      	itt	mi
 8009634:	2320      	movmi	r3, #32
 8009636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800963a:	0713      	lsls	r3, r2, #28
 800963c:	bf44      	itt	mi
 800963e:	232b      	movmi	r3, #43	@ 0x2b
 8009640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009644:	f89a 3000 	ldrb.w	r3, [sl]
 8009648:	2b2a      	cmp	r3, #42	@ 0x2a
 800964a:	d015      	beq.n	8009678 <_vfiprintf_r+0x120>
 800964c:	9a07      	ldr	r2, [sp, #28]
 800964e:	4654      	mov	r4, sl
 8009650:	2000      	movs	r0, #0
 8009652:	f04f 0c0a 	mov.w	ip, #10
 8009656:	4621      	mov	r1, r4
 8009658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800965c:	3b30      	subs	r3, #48	@ 0x30
 800965e:	2b09      	cmp	r3, #9
 8009660:	d94b      	bls.n	80096fa <_vfiprintf_r+0x1a2>
 8009662:	b1b0      	cbz	r0, 8009692 <_vfiprintf_r+0x13a>
 8009664:	9207      	str	r2, [sp, #28]
 8009666:	e014      	b.n	8009692 <_vfiprintf_r+0x13a>
 8009668:	eba0 0308 	sub.w	r3, r0, r8
 800966c:	fa09 f303 	lsl.w	r3, r9, r3
 8009670:	4313      	orrs	r3, r2
 8009672:	9304      	str	r3, [sp, #16]
 8009674:	46a2      	mov	sl, r4
 8009676:	e7d2      	b.n	800961e <_vfiprintf_r+0xc6>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	1d19      	adds	r1, r3, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	9103      	str	r1, [sp, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	bfbb      	ittet	lt
 8009684:	425b      	neglt	r3, r3
 8009686:	f042 0202 	orrlt.w	r2, r2, #2
 800968a:	9307      	strge	r3, [sp, #28]
 800968c:	9307      	strlt	r3, [sp, #28]
 800968e:	bfb8      	it	lt
 8009690:	9204      	strlt	r2, [sp, #16]
 8009692:	7823      	ldrb	r3, [r4, #0]
 8009694:	2b2e      	cmp	r3, #46	@ 0x2e
 8009696:	d10a      	bne.n	80096ae <_vfiprintf_r+0x156>
 8009698:	7863      	ldrb	r3, [r4, #1]
 800969a:	2b2a      	cmp	r3, #42	@ 0x2a
 800969c:	d132      	bne.n	8009704 <_vfiprintf_r+0x1ac>
 800969e:	9b03      	ldr	r3, [sp, #12]
 80096a0:	1d1a      	adds	r2, r3, #4
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	9203      	str	r2, [sp, #12]
 80096a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096aa:	3402      	adds	r4, #2
 80096ac:	9305      	str	r3, [sp, #20]
 80096ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009784 <_vfiprintf_r+0x22c>
 80096b2:	7821      	ldrb	r1, [r4, #0]
 80096b4:	2203      	movs	r2, #3
 80096b6:	4650      	mov	r0, sl
 80096b8:	f7f6 fd92 	bl	80001e0 <memchr>
 80096bc:	b138      	cbz	r0, 80096ce <_vfiprintf_r+0x176>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	eba0 000a 	sub.w	r0, r0, sl
 80096c4:	2240      	movs	r2, #64	@ 0x40
 80096c6:	4082      	lsls	r2, r0
 80096c8:	4313      	orrs	r3, r2
 80096ca:	3401      	adds	r4, #1
 80096cc:	9304      	str	r3, [sp, #16]
 80096ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d2:	4829      	ldr	r0, [pc, #164]	@ (8009778 <_vfiprintf_r+0x220>)
 80096d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096d8:	2206      	movs	r2, #6
 80096da:	f7f6 fd81 	bl	80001e0 <memchr>
 80096de:	2800      	cmp	r0, #0
 80096e0:	d03f      	beq.n	8009762 <_vfiprintf_r+0x20a>
 80096e2:	4b26      	ldr	r3, [pc, #152]	@ (800977c <_vfiprintf_r+0x224>)
 80096e4:	bb1b      	cbnz	r3, 800972e <_vfiprintf_r+0x1d6>
 80096e6:	9b03      	ldr	r3, [sp, #12]
 80096e8:	3307      	adds	r3, #7
 80096ea:	f023 0307 	bic.w	r3, r3, #7
 80096ee:	3308      	adds	r3, #8
 80096f0:	9303      	str	r3, [sp, #12]
 80096f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f4:	443b      	add	r3, r7
 80096f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80096f8:	e76a      	b.n	80095d0 <_vfiprintf_r+0x78>
 80096fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80096fe:	460c      	mov	r4, r1
 8009700:	2001      	movs	r0, #1
 8009702:	e7a8      	b.n	8009656 <_vfiprintf_r+0xfe>
 8009704:	2300      	movs	r3, #0
 8009706:	3401      	adds	r4, #1
 8009708:	9305      	str	r3, [sp, #20]
 800970a:	4619      	mov	r1, r3
 800970c:	f04f 0c0a 	mov.w	ip, #10
 8009710:	4620      	mov	r0, r4
 8009712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009716:	3a30      	subs	r2, #48	@ 0x30
 8009718:	2a09      	cmp	r2, #9
 800971a:	d903      	bls.n	8009724 <_vfiprintf_r+0x1cc>
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0c6      	beq.n	80096ae <_vfiprintf_r+0x156>
 8009720:	9105      	str	r1, [sp, #20]
 8009722:	e7c4      	b.n	80096ae <_vfiprintf_r+0x156>
 8009724:	fb0c 2101 	mla	r1, ip, r1, r2
 8009728:	4604      	mov	r4, r0
 800972a:	2301      	movs	r3, #1
 800972c:	e7f0      	b.n	8009710 <_vfiprintf_r+0x1b8>
 800972e:	ab03      	add	r3, sp, #12
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	462a      	mov	r2, r5
 8009734:	4b12      	ldr	r3, [pc, #72]	@ (8009780 <_vfiprintf_r+0x228>)
 8009736:	a904      	add	r1, sp, #16
 8009738:	4630      	mov	r0, r6
 800973a:	f7fd fc5b 	bl	8006ff4 <_printf_float>
 800973e:	4607      	mov	r7, r0
 8009740:	1c78      	adds	r0, r7, #1
 8009742:	d1d6      	bne.n	80096f2 <_vfiprintf_r+0x19a>
 8009744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009746:	07d9      	lsls	r1, r3, #31
 8009748:	d405      	bmi.n	8009756 <_vfiprintf_r+0x1fe>
 800974a:	89ab      	ldrh	r3, [r5, #12]
 800974c:	059a      	lsls	r2, r3, #22
 800974e:	d402      	bmi.n	8009756 <_vfiprintf_r+0x1fe>
 8009750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009752:	f7fe faaf 	bl	8007cb4 <__retarget_lock_release_recursive>
 8009756:	89ab      	ldrh	r3, [r5, #12]
 8009758:	065b      	lsls	r3, r3, #25
 800975a:	f53f af1f 	bmi.w	800959c <_vfiprintf_r+0x44>
 800975e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009760:	e71e      	b.n	80095a0 <_vfiprintf_r+0x48>
 8009762:	ab03      	add	r3, sp, #12
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	462a      	mov	r2, r5
 8009768:	4b05      	ldr	r3, [pc, #20]	@ (8009780 <_vfiprintf_r+0x228>)
 800976a:	a904      	add	r1, sp, #16
 800976c:	4630      	mov	r0, r6
 800976e:	f7fd fed9 	bl	8007524 <_printf_i>
 8009772:	e7e4      	b.n	800973e <_vfiprintf_r+0x1e6>
 8009774:	08009f08 	.word	0x08009f08
 8009778:	08009f12 	.word	0x08009f12
 800977c:	08006ff5 	.word	0x08006ff5
 8009780:	08009533 	.word	0x08009533
 8009784:	08009f0e 	.word	0x08009f0e

08009788 <__sflush_r>:
 8009788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800978c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009790:	0716      	lsls	r6, r2, #28
 8009792:	4605      	mov	r5, r0
 8009794:	460c      	mov	r4, r1
 8009796:	d454      	bmi.n	8009842 <__sflush_r+0xba>
 8009798:	684b      	ldr	r3, [r1, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	dc02      	bgt.n	80097a4 <__sflush_r+0x1c>
 800979e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dd48      	ble.n	8009836 <__sflush_r+0xae>
 80097a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097a6:	2e00      	cmp	r6, #0
 80097a8:	d045      	beq.n	8009836 <__sflush_r+0xae>
 80097aa:	2300      	movs	r3, #0
 80097ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097b0:	682f      	ldr	r7, [r5, #0]
 80097b2:	6a21      	ldr	r1, [r4, #32]
 80097b4:	602b      	str	r3, [r5, #0]
 80097b6:	d030      	beq.n	800981a <__sflush_r+0x92>
 80097b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	0759      	lsls	r1, r3, #29
 80097be:	d505      	bpl.n	80097cc <__sflush_r+0x44>
 80097c0:	6863      	ldr	r3, [r4, #4]
 80097c2:	1ad2      	subs	r2, r2, r3
 80097c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097c6:	b10b      	cbz	r3, 80097cc <__sflush_r+0x44>
 80097c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097ca:	1ad2      	subs	r2, r2, r3
 80097cc:	2300      	movs	r3, #0
 80097ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097d0:	6a21      	ldr	r1, [r4, #32]
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b0      	blx	r6
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	d106      	bne.n	80097ea <__sflush_r+0x62>
 80097dc:	6829      	ldr	r1, [r5, #0]
 80097de:	291d      	cmp	r1, #29
 80097e0:	d82b      	bhi.n	800983a <__sflush_r+0xb2>
 80097e2:	4a2a      	ldr	r2, [pc, #168]	@ (800988c <__sflush_r+0x104>)
 80097e4:	410a      	asrs	r2, r1
 80097e6:	07d6      	lsls	r6, r2, #31
 80097e8:	d427      	bmi.n	800983a <__sflush_r+0xb2>
 80097ea:	2200      	movs	r2, #0
 80097ec:	6062      	str	r2, [r4, #4]
 80097ee:	04d9      	lsls	r1, r3, #19
 80097f0:	6922      	ldr	r2, [r4, #16]
 80097f2:	6022      	str	r2, [r4, #0]
 80097f4:	d504      	bpl.n	8009800 <__sflush_r+0x78>
 80097f6:	1c42      	adds	r2, r0, #1
 80097f8:	d101      	bne.n	80097fe <__sflush_r+0x76>
 80097fa:	682b      	ldr	r3, [r5, #0]
 80097fc:	b903      	cbnz	r3, 8009800 <__sflush_r+0x78>
 80097fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8009800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009802:	602f      	str	r7, [r5, #0]
 8009804:	b1b9      	cbz	r1, 8009836 <__sflush_r+0xae>
 8009806:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800980a:	4299      	cmp	r1, r3
 800980c:	d002      	beq.n	8009814 <__sflush_r+0x8c>
 800980e:	4628      	mov	r0, r5
 8009810:	f7ff f89e 	bl	8008950 <_free_r>
 8009814:	2300      	movs	r3, #0
 8009816:	6363      	str	r3, [r4, #52]	@ 0x34
 8009818:	e00d      	b.n	8009836 <__sflush_r+0xae>
 800981a:	2301      	movs	r3, #1
 800981c:	4628      	mov	r0, r5
 800981e:	47b0      	blx	r6
 8009820:	4602      	mov	r2, r0
 8009822:	1c50      	adds	r0, r2, #1
 8009824:	d1c9      	bne.n	80097ba <__sflush_r+0x32>
 8009826:	682b      	ldr	r3, [r5, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0c6      	beq.n	80097ba <__sflush_r+0x32>
 800982c:	2b1d      	cmp	r3, #29
 800982e:	d001      	beq.n	8009834 <__sflush_r+0xac>
 8009830:	2b16      	cmp	r3, #22
 8009832:	d11e      	bne.n	8009872 <__sflush_r+0xea>
 8009834:	602f      	str	r7, [r5, #0]
 8009836:	2000      	movs	r0, #0
 8009838:	e022      	b.n	8009880 <__sflush_r+0xf8>
 800983a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800983e:	b21b      	sxth	r3, r3
 8009840:	e01b      	b.n	800987a <__sflush_r+0xf2>
 8009842:	690f      	ldr	r7, [r1, #16]
 8009844:	2f00      	cmp	r7, #0
 8009846:	d0f6      	beq.n	8009836 <__sflush_r+0xae>
 8009848:	0793      	lsls	r3, r2, #30
 800984a:	680e      	ldr	r6, [r1, #0]
 800984c:	bf08      	it	eq
 800984e:	694b      	ldreq	r3, [r1, #20]
 8009850:	600f      	str	r7, [r1, #0]
 8009852:	bf18      	it	ne
 8009854:	2300      	movne	r3, #0
 8009856:	eba6 0807 	sub.w	r8, r6, r7
 800985a:	608b      	str	r3, [r1, #8]
 800985c:	f1b8 0f00 	cmp.w	r8, #0
 8009860:	dde9      	ble.n	8009836 <__sflush_r+0xae>
 8009862:	6a21      	ldr	r1, [r4, #32]
 8009864:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009866:	4643      	mov	r3, r8
 8009868:	463a      	mov	r2, r7
 800986a:	4628      	mov	r0, r5
 800986c:	47b0      	blx	r6
 800986e:	2800      	cmp	r0, #0
 8009870:	dc08      	bgt.n	8009884 <__sflush_r+0xfc>
 8009872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	f04f 30ff 	mov.w	r0, #4294967295
 8009880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009884:	4407      	add	r7, r0
 8009886:	eba8 0800 	sub.w	r8, r8, r0
 800988a:	e7e7      	b.n	800985c <__sflush_r+0xd4>
 800988c:	dfbffffe 	.word	0xdfbffffe

08009890 <_fflush_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	690b      	ldr	r3, [r1, #16]
 8009894:	4605      	mov	r5, r0
 8009896:	460c      	mov	r4, r1
 8009898:	b913      	cbnz	r3, 80098a0 <_fflush_r+0x10>
 800989a:	2500      	movs	r5, #0
 800989c:	4628      	mov	r0, r5
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	b118      	cbz	r0, 80098aa <_fflush_r+0x1a>
 80098a2:	6a03      	ldr	r3, [r0, #32]
 80098a4:	b90b      	cbnz	r3, 80098aa <_fflush_r+0x1a>
 80098a6:	f7fd ffe9 	bl	800787c <__sinit>
 80098aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d0f3      	beq.n	800989a <_fflush_r+0xa>
 80098b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098b4:	07d0      	lsls	r0, r2, #31
 80098b6:	d404      	bmi.n	80098c2 <_fflush_r+0x32>
 80098b8:	0599      	lsls	r1, r3, #22
 80098ba:	d402      	bmi.n	80098c2 <_fflush_r+0x32>
 80098bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098be:	f7fe f9f8 	bl	8007cb2 <__retarget_lock_acquire_recursive>
 80098c2:	4628      	mov	r0, r5
 80098c4:	4621      	mov	r1, r4
 80098c6:	f7ff ff5f 	bl	8009788 <__sflush_r>
 80098ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098cc:	07da      	lsls	r2, r3, #31
 80098ce:	4605      	mov	r5, r0
 80098d0:	d4e4      	bmi.n	800989c <_fflush_r+0xc>
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	059b      	lsls	r3, r3, #22
 80098d6:	d4e1      	bmi.n	800989c <_fflush_r+0xc>
 80098d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098da:	f7fe f9eb 	bl	8007cb4 <__retarget_lock_release_recursive>
 80098de:	e7dd      	b.n	800989c <_fflush_r+0xc>

080098e0 <__swhatbuf_r>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	460c      	mov	r4, r1
 80098e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e8:	2900      	cmp	r1, #0
 80098ea:	b096      	sub	sp, #88	@ 0x58
 80098ec:	4615      	mov	r5, r2
 80098ee:	461e      	mov	r6, r3
 80098f0:	da0d      	bge.n	800990e <__swhatbuf_r+0x2e>
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098f8:	f04f 0100 	mov.w	r1, #0
 80098fc:	bf14      	ite	ne
 80098fe:	2340      	movne	r3, #64	@ 0x40
 8009900:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009904:	2000      	movs	r0, #0
 8009906:	6031      	str	r1, [r6, #0]
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	b016      	add	sp, #88	@ 0x58
 800990c:	bd70      	pop	{r4, r5, r6, pc}
 800990e:	466a      	mov	r2, sp
 8009910:	f000 f862 	bl	80099d8 <_fstat_r>
 8009914:	2800      	cmp	r0, #0
 8009916:	dbec      	blt.n	80098f2 <__swhatbuf_r+0x12>
 8009918:	9901      	ldr	r1, [sp, #4]
 800991a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800991e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009922:	4259      	negs	r1, r3
 8009924:	4159      	adcs	r1, r3
 8009926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800992a:	e7eb      	b.n	8009904 <__swhatbuf_r+0x24>

0800992c <__smakebuf_r>:
 800992c:	898b      	ldrh	r3, [r1, #12]
 800992e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009930:	079d      	lsls	r5, r3, #30
 8009932:	4606      	mov	r6, r0
 8009934:	460c      	mov	r4, r1
 8009936:	d507      	bpl.n	8009948 <__smakebuf_r+0x1c>
 8009938:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	6123      	str	r3, [r4, #16]
 8009940:	2301      	movs	r3, #1
 8009942:	6163      	str	r3, [r4, #20]
 8009944:	b003      	add	sp, #12
 8009946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009948:	ab01      	add	r3, sp, #4
 800994a:	466a      	mov	r2, sp
 800994c:	f7ff ffc8 	bl	80098e0 <__swhatbuf_r>
 8009950:	9f00      	ldr	r7, [sp, #0]
 8009952:	4605      	mov	r5, r0
 8009954:	4639      	mov	r1, r7
 8009956:	4630      	mov	r0, r6
 8009958:	f7ff f86e 	bl	8008a38 <_malloc_r>
 800995c:	b948      	cbnz	r0, 8009972 <__smakebuf_r+0x46>
 800995e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009962:	059a      	lsls	r2, r3, #22
 8009964:	d4ee      	bmi.n	8009944 <__smakebuf_r+0x18>
 8009966:	f023 0303 	bic.w	r3, r3, #3
 800996a:	f043 0302 	orr.w	r3, r3, #2
 800996e:	81a3      	strh	r3, [r4, #12]
 8009970:	e7e2      	b.n	8009938 <__smakebuf_r+0xc>
 8009972:	89a3      	ldrh	r3, [r4, #12]
 8009974:	6020      	str	r0, [r4, #0]
 8009976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800997a:	81a3      	strh	r3, [r4, #12]
 800997c:	9b01      	ldr	r3, [sp, #4]
 800997e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009982:	b15b      	cbz	r3, 800999c <__smakebuf_r+0x70>
 8009984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009988:	4630      	mov	r0, r6
 800998a:	f000 f837 	bl	80099fc <_isatty_r>
 800998e:	b128      	cbz	r0, 800999c <__smakebuf_r+0x70>
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	f023 0303 	bic.w	r3, r3, #3
 8009996:	f043 0301 	orr.w	r3, r3, #1
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	431d      	orrs	r5, r3
 80099a0:	81a5      	strh	r5, [r4, #12]
 80099a2:	e7cf      	b.n	8009944 <__smakebuf_r+0x18>

080099a4 <memmove>:
 80099a4:	4288      	cmp	r0, r1
 80099a6:	b510      	push	{r4, lr}
 80099a8:	eb01 0402 	add.w	r4, r1, r2
 80099ac:	d902      	bls.n	80099b4 <memmove+0x10>
 80099ae:	4284      	cmp	r4, r0
 80099b0:	4623      	mov	r3, r4
 80099b2:	d807      	bhi.n	80099c4 <memmove+0x20>
 80099b4:	1e43      	subs	r3, r0, #1
 80099b6:	42a1      	cmp	r1, r4
 80099b8:	d008      	beq.n	80099cc <memmove+0x28>
 80099ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099c2:	e7f8      	b.n	80099b6 <memmove+0x12>
 80099c4:	4402      	add	r2, r0
 80099c6:	4601      	mov	r1, r0
 80099c8:	428a      	cmp	r2, r1
 80099ca:	d100      	bne.n	80099ce <memmove+0x2a>
 80099cc:	bd10      	pop	{r4, pc}
 80099ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099d6:	e7f7      	b.n	80099c8 <memmove+0x24>

080099d8 <_fstat_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d07      	ldr	r5, [pc, #28]	@ (80099f8 <_fstat_r+0x20>)
 80099dc:	2300      	movs	r3, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	4611      	mov	r1, r2
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	f7f8 f9f7 	bl	8001dd8 <_fstat>
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	d102      	bne.n	80099f4 <_fstat_r+0x1c>
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	b103      	cbz	r3, 80099f4 <_fstat_r+0x1c>
 80099f2:	6023      	str	r3, [r4, #0]
 80099f4:	bd38      	pop	{r3, r4, r5, pc}
 80099f6:	bf00      	nop
 80099f8:	20000570 	.word	0x20000570

080099fc <_isatty_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4d06      	ldr	r5, [pc, #24]	@ (8009a18 <_isatty_r+0x1c>)
 8009a00:	2300      	movs	r3, #0
 8009a02:	4604      	mov	r4, r0
 8009a04:	4608      	mov	r0, r1
 8009a06:	602b      	str	r3, [r5, #0]
 8009a08:	f7f8 f9f6 	bl	8001df8 <_isatty>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_isatty_r+0x1a>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_isatty_r+0x1a>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	20000570 	.word	0x20000570

08009a1c <_sbrk_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4d06      	ldr	r5, [pc, #24]	@ (8009a38 <_sbrk_r+0x1c>)
 8009a20:	2300      	movs	r3, #0
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	602b      	str	r3, [r5, #0]
 8009a28:	f7f8 f9fe 	bl	8001e28 <_sbrk>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_sbrk_r+0x1a>
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_sbrk_r+0x1a>
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	20000570 	.word	0x20000570

08009a3c <memcpy>:
 8009a3c:	440a      	add	r2, r1
 8009a3e:	4291      	cmp	r1, r2
 8009a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a44:	d100      	bne.n	8009a48 <memcpy+0xc>
 8009a46:	4770      	bx	lr
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a52:	4291      	cmp	r1, r2
 8009a54:	d1f9      	bne.n	8009a4a <memcpy+0xe>
 8009a56:	bd10      	pop	{r4, pc}

08009a58 <__assert_func>:
 8009a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a5a:	4614      	mov	r4, r2
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	4b09      	ldr	r3, [pc, #36]	@ (8009a84 <__assert_func+0x2c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4605      	mov	r5, r0
 8009a64:	68d8      	ldr	r0, [r3, #12]
 8009a66:	b954      	cbnz	r4, 8009a7e <__assert_func+0x26>
 8009a68:	4b07      	ldr	r3, [pc, #28]	@ (8009a88 <__assert_func+0x30>)
 8009a6a:	461c      	mov	r4, r3
 8009a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a70:	9100      	str	r1, [sp, #0]
 8009a72:	462b      	mov	r3, r5
 8009a74:	4905      	ldr	r1, [pc, #20]	@ (8009a8c <__assert_func+0x34>)
 8009a76:	f000 f86f 	bl	8009b58 <fiprintf>
 8009a7a:	f000 f87f 	bl	8009b7c <abort>
 8009a7e:	4b04      	ldr	r3, [pc, #16]	@ (8009a90 <__assert_func+0x38>)
 8009a80:	e7f4      	b.n	8009a6c <__assert_func+0x14>
 8009a82:	bf00      	nop
 8009a84:	20000018 	.word	0x20000018
 8009a88:	08009f5e 	.word	0x08009f5e
 8009a8c:	08009f30 	.word	0x08009f30
 8009a90:	08009f23 	.word	0x08009f23

08009a94 <_calloc_r>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	fba1 5402 	umull	r5, r4, r1, r2
 8009a9a:	b93c      	cbnz	r4, 8009aac <_calloc_r+0x18>
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	f7fe ffcb 	bl	8008a38 <_malloc_r>
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	b928      	cbnz	r0, 8009ab2 <_calloc_r+0x1e>
 8009aa6:	2600      	movs	r6, #0
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
 8009aac:	220c      	movs	r2, #12
 8009aae:	6002      	str	r2, [r0, #0]
 8009ab0:	e7f9      	b.n	8009aa6 <_calloc_r+0x12>
 8009ab2:	462a      	mov	r2, r5
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	f7fe f87f 	bl	8007bb8 <memset>
 8009aba:	e7f5      	b.n	8009aa8 <_calloc_r+0x14>

08009abc <__ascii_mbtowc>:
 8009abc:	b082      	sub	sp, #8
 8009abe:	b901      	cbnz	r1, 8009ac2 <__ascii_mbtowc+0x6>
 8009ac0:	a901      	add	r1, sp, #4
 8009ac2:	b142      	cbz	r2, 8009ad6 <__ascii_mbtowc+0x1a>
 8009ac4:	b14b      	cbz	r3, 8009ada <__ascii_mbtowc+0x1e>
 8009ac6:	7813      	ldrb	r3, [r2, #0]
 8009ac8:	600b      	str	r3, [r1, #0]
 8009aca:	7812      	ldrb	r2, [r2, #0]
 8009acc:	1e10      	subs	r0, r2, #0
 8009ace:	bf18      	it	ne
 8009ad0:	2001      	movne	r0, #1
 8009ad2:	b002      	add	sp, #8
 8009ad4:	4770      	bx	lr
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	e7fb      	b.n	8009ad2 <__ascii_mbtowc+0x16>
 8009ada:	f06f 0001 	mvn.w	r0, #1
 8009ade:	e7f8      	b.n	8009ad2 <__ascii_mbtowc+0x16>

08009ae0 <_realloc_r>:
 8009ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae4:	4680      	mov	r8, r0
 8009ae6:	4615      	mov	r5, r2
 8009ae8:	460c      	mov	r4, r1
 8009aea:	b921      	cbnz	r1, 8009af6 <_realloc_r+0x16>
 8009aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009af0:	4611      	mov	r1, r2
 8009af2:	f7fe bfa1 	b.w	8008a38 <_malloc_r>
 8009af6:	b92a      	cbnz	r2, 8009b04 <_realloc_r+0x24>
 8009af8:	f7fe ff2a 	bl	8008950 <_free_r>
 8009afc:	2400      	movs	r4, #0
 8009afe:	4620      	mov	r0, r4
 8009b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b04:	f000 f841 	bl	8009b8a <_malloc_usable_size_r>
 8009b08:	4285      	cmp	r5, r0
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	d802      	bhi.n	8009b14 <_realloc_r+0x34>
 8009b0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b12:	d8f4      	bhi.n	8009afe <_realloc_r+0x1e>
 8009b14:	4629      	mov	r1, r5
 8009b16:	4640      	mov	r0, r8
 8009b18:	f7fe ff8e 	bl	8008a38 <_malloc_r>
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d0ec      	beq.n	8009afc <_realloc_r+0x1c>
 8009b22:	42b5      	cmp	r5, r6
 8009b24:	462a      	mov	r2, r5
 8009b26:	4621      	mov	r1, r4
 8009b28:	bf28      	it	cs
 8009b2a:	4632      	movcs	r2, r6
 8009b2c:	f7ff ff86 	bl	8009a3c <memcpy>
 8009b30:	4621      	mov	r1, r4
 8009b32:	4640      	mov	r0, r8
 8009b34:	f7fe ff0c 	bl	8008950 <_free_r>
 8009b38:	463c      	mov	r4, r7
 8009b3a:	e7e0      	b.n	8009afe <_realloc_r+0x1e>

08009b3c <__ascii_wctomb>:
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	4608      	mov	r0, r1
 8009b40:	b141      	cbz	r1, 8009b54 <__ascii_wctomb+0x18>
 8009b42:	2aff      	cmp	r2, #255	@ 0xff
 8009b44:	d904      	bls.n	8009b50 <__ascii_wctomb+0x14>
 8009b46:	228a      	movs	r2, #138	@ 0x8a
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4e:	4770      	bx	lr
 8009b50:	700a      	strb	r2, [r1, #0]
 8009b52:	2001      	movs	r0, #1
 8009b54:	4770      	bx	lr
	...

08009b58 <fiprintf>:
 8009b58:	b40e      	push	{r1, r2, r3}
 8009b5a:	b503      	push	{r0, r1, lr}
 8009b5c:	4601      	mov	r1, r0
 8009b5e:	ab03      	add	r3, sp, #12
 8009b60:	4805      	ldr	r0, [pc, #20]	@ (8009b78 <fiprintf+0x20>)
 8009b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b66:	6800      	ldr	r0, [r0, #0]
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	f7ff fcf5 	bl	8009558 <_vfiprintf_r>
 8009b6e:	b002      	add	sp, #8
 8009b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b74:	b003      	add	sp, #12
 8009b76:	4770      	bx	lr
 8009b78:	20000018 	.word	0x20000018

08009b7c <abort>:
 8009b7c:	b508      	push	{r3, lr}
 8009b7e:	2006      	movs	r0, #6
 8009b80:	f000 f834 	bl	8009bec <raise>
 8009b84:	2001      	movs	r0, #1
 8009b86:	f7f8 f8d7 	bl	8001d38 <_exit>

08009b8a <_malloc_usable_size_r>:
 8009b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b8e:	1f18      	subs	r0, r3, #4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	bfbc      	itt	lt
 8009b94:	580b      	ldrlt	r3, [r1, r0]
 8009b96:	18c0      	addlt	r0, r0, r3
 8009b98:	4770      	bx	lr

08009b9a <_raise_r>:
 8009b9a:	291f      	cmp	r1, #31
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	d904      	bls.n	8009bae <_raise_r+0x14>
 8009ba4:	2316      	movs	r3, #22
 8009ba6:	6003      	str	r3, [r0, #0]
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	bd38      	pop	{r3, r4, r5, pc}
 8009bae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009bb0:	b112      	cbz	r2, 8009bb8 <_raise_r+0x1e>
 8009bb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bb6:	b94b      	cbnz	r3, 8009bcc <_raise_r+0x32>
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f000 f831 	bl	8009c20 <_getpid_r>
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	4601      	mov	r1, r0
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bc8:	f000 b818 	b.w	8009bfc <_kill_r>
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d00a      	beq.n	8009be6 <_raise_r+0x4c>
 8009bd0:	1c59      	adds	r1, r3, #1
 8009bd2:	d103      	bne.n	8009bdc <_raise_r+0x42>
 8009bd4:	2316      	movs	r3, #22
 8009bd6:	6003      	str	r3, [r0, #0]
 8009bd8:	2001      	movs	r0, #1
 8009bda:	e7e7      	b.n	8009bac <_raise_r+0x12>
 8009bdc:	2100      	movs	r1, #0
 8009bde:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009be2:	4620      	mov	r0, r4
 8009be4:	4798      	blx	r3
 8009be6:	2000      	movs	r0, #0
 8009be8:	e7e0      	b.n	8009bac <_raise_r+0x12>
	...

08009bec <raise>:
 8009bec:	4b02      	ldr	r3, [pc, #8]	@ (8009bf8 <raise+0xc>)
 8009bee:	4601      	mov	r1, r0
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	f7ff bfd2 	b.w	8009b9a <_raise_r>
 8009bf6:	bf00      	nop
 8009bf8:	20000018 	.word	0x20000018

08009bfc <_kill_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d07      	ldr	r5, [pc, #28]	@ (8009c1c <_kill_r+0x20>)
 8009c00:	2300      	movs	r3, #0
 8009c02:	4604      	mov	r4, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	4611      	mov	r1, r2
 8009c08:	602b      	str	r3, [r5, #0]
 8009c0a:	f7f8 f885 	bl	8001d18 <_kill>
 8009c0e:	1c43      	adds	r3, r0, #1
 8009c10:	d102      	bne.n	8009c18 <_kill_r+0x1c>
 8009c12:	682b      	ldr	r3, [r5, #0]
 8009c14:	b103      	cbz	r3, 8009c18 <_kill_r+0x1c>
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	bd38      	pop	{r3, r4, r5, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20000570 	.word	0x20000570

08009c20 <_getpid_r>:
 8009c20:	f7f8 b872 	b.w	8001d08 <_getpid>

08009c24 <_init>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	bf00      	nop
 8009c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c2a:	bc08      	pop	{r3}
 8009c2c:	469e      	mov	lr, r3
 8009c2e:	4770      	bx	lr

08009c30 <_fini>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	bf00      	nop
 8009c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c36:	bc08      	pop	{r3}
 8009c38:	469e      	mov	lr, r3
 8009c3a:	4770      	bx	lr
